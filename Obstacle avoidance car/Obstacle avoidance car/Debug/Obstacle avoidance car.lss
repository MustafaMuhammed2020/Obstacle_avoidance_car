
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001768  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00001768  000017fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080009e  0080009e  0000183a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000183a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000365c  00000000  00000000  00001bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff0  00000000  00000000  00005214  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f13  00000000  00000000  00006204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00008118  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e53  00000000  00000000  000086f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143e  00000000  00000000  0000954b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000a989  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 96 03 	jmp	0x72c	; 0x72c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 98 07 	call	0xf30	; 0xf30 <main>
      8a:	0c 94 b2 0b 	jmp	0x1764	; 0x1764 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint32_t u32_g_tick = 0 ;           /** GLOBAL VARIABLE TO BE COMPARED WITH DELAY TICKS **/   

/** FUNCTION TO INITIALIZE APPLICATION MODULES **/
void APP_init()
{
    ICU_init(); /** INITIALIZE ICU **/
      92:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <ICU_init>

	US_init(); /** INITILAIZATION ULTRASONIC MODULE **/
      96:	0e 94 81 07 	call	0xf02	; 0xf02 <US_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
      9a:	0e 94 25 09 	call	0x124a	; 0x124a <TMR0_init>
	
	TMR2_init() ; /** INITIALIZE TIMER 2 **/
      9e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <TMR2_init>
	
	KEYPAD_init() ; /** INITIALIZE KEYPAD **/
      a2:	0e 94 0b 04 	call	0x816	; 0x816 <KEYPAD_init>
	
	Button_init(); /** INITIALIZATION OF BUTTON **/
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <Button_init>
	
	LCD_init(); /** INITIALIZE LCD **/
      aa:	0e 94 35 05 	call	0xa6a	; 0xa6a <LCD_init>
	
	TMR0_delayms(50); /** DELAY FOR LCD INITIALIZATION **/
      ae:	62 e3       	ldi	r22, 0x32	; 50
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>

	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 73 06 	call	0xce6	; 0xce6 <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 73 06 	call	0xce6	; 0xce6 <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 73 06 	call	0xce6	; 0xce6 <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 73 06 	call	0xce6	; 0xce6 <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_rotateclkdir>
      ea:	08 95       	ret

000000ec <APP_setentry>:

}

/** FUNCTION TO SET DEFAULTS **/
void APP_setentry()
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <APP_setentry+0x6>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_a_btnstatus = 0 , u8_a_pressednum = 0 ;
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	1a 82       	std	Y+2, r1	; 0x02
	
 	u32_g_tick = 0 ;
      fa:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
      fe:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     102:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     106:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
	 
 	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     10a:	88 e8       	ldi	r24, 0x88	; 136
     10c:	93 e1       	ldi	r25, 0x13	; 19
     10e:	0e 94 25 0a 	call	0x144a	; 0x144a <TMR2_getovs>
     112:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     116:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     11a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     11e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>

 	TMR2_start() ; /** START TIMER 2 **/
     122:	0e 94 0f 0a 	call	0x141e	; 0x141e <TMR2_start>

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     126:	39 c0       	rjmp	.+114    	; 0x19a <APP_setentry+0xae>
	{
 		LCD_goto(0 , 1);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCD_goto>
 		LCD_writestr("Set Def. Rot");
     130:	80 e6       	ldi	r24, 0x60	; 96
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writestr>

 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON PRESSED **/
     138:	ae 01       	movw	r20, r28
     13a:	4f 5f       	subi	r20, 0xFF	; 255
     13c:	5f 4f       	sbci	r21, 0xFF	; 255
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 cb 03 	call	0x796	; 0x796 <Is_pressed>
 		TMR0_delayms(100); /** WAIT 100 MS FOR BUTTON TO SETTLE **/
     146:	64 e6       	ldi	r22, 0x64	; 100
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>
 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON IS STILL PRESSED **/
     152:	ae 01       	movw	r20, r28
     154:	4f 5f       	subi	r20, 0xFF	; 255
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 cb 03 	call	0x796	; 0x796 <Is_pressed>

		if (u8_a_btnstatus) /** IF THE BUTTON PRESSED **/
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 23       	and	r24, r24
     164:	d1 f0       	breq	.+52     	; 0x19a <APP_setentry+0xae>
 		{
 			u8_g_rotationcounter++ ; /** INCREASE ROTATION COUNTER BY 1 **/
     166:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <u8_g_rotationcounter>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <u8_g_rotationcounter>

 			if (u8_g_rotationcounter == LEFT_ROTATION) /** LEFT ROTATION **/
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	41 f4       	brne	.+16     	; 0x184 <APP_setentry+0x98>
 			{
				LCD_goto(1 , 1);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCD_goto>
				LCD_writestr("LEFT ROTATION");
     17a:	8d e6       	ldi	r24, 0x6D	; 109
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writestr>
     182:	0a c0       	rjmp	.+20     	; 0x198 <APP_setentry+0xac>
			}
	 		else if(u8_g_rotationcounter == RIGHT_ROTATION) /** RIGHT ROTATION **/
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	41 f4       	brne	.+16     	; 0x198 <APP_setentry+0xac>
	 		{
 				LCD_goto(1 , 1);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCD_goto>
 				LCD_writestr("RIGHT ROTATION");
     190:	8b e7       	ldi	r24, 0x7B	; 123
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writestr>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
     198:	19 82       	std	Y+1, r1	; 0x01
	 
 	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

 	TMR2_start() ; /** START TIMER 2 **/

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     19a:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     19e:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     1a2:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     1a6:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     1aa:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     1ae:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     1b2:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     1b6:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     1ba:	48 17       	cp	r20, r24
     1bc:	59 07       	cpc	r21, r25
     1be:	6a 07       	cpc	r22, r26
     1c0:	7b 07       	cpc	r23, r27
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <APP_setentry+0xda>
     1c4:	b1 cf       	rjmp	.-158    	; 0x128 <APP_setentry+0x3c>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
 		}
 	}
	
 	TMR2_stop(); /** STOP TIMER 2 **/
     1c6:	0e 94 1a 0a 	call	0x1434	; 0x1434 <TMR2_stop>
		
	do /** ACCEPT KEYPAD BUTTON 1 FROM USER **/
	{
 		KEYPAD_read(&u8_a_pressednum);
     1ca:	ce 01       	movw	r24, r28
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	0e 94 49 04 	call	0x892	; 0x892 <KEYPAD_read>
 	} while (u8_a_pressednum != '1');
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	81 33       	cpi	r24, 0x31	; 49
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <APP_setentry+0xde>

 	 LCD_sendcmd(LCD_CLEAR);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCD_sendcmd>
	 TMR0_delayms(20);
     1de:	64 e1       	ldi	r22, 0x14	; 20
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>
	 
	 LCD_writestr("Waiting");
     1ea:	8a e8       	ldi	r24, 0x8A	; 138
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writestr>
	 
	 TMR0_delayms(2000); /** WAIT 2 SECONDS **/
     1f2:	60 ed       	ldi	r22, 0xD0	; 208
     1f4:	77 e0       	ldi	r23, 0x07	; 7
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>
	 
	 LCD_sendcmd(LCD_CLEAR);
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCD_sendcmd>
	 TMR0_delayms(20);
     204:	64 e1       	ldi	r22, 0x14	; 20
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>
	 
}
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <APP_start>:

void APP_start()
{	
	u32_g_tick = 0 , u32_g_delay = 0; 
     21a:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     21e:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     222:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     226:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
     22a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <u32_g_delay>
     22e:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <u32_g_delay+0x1>
     232:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <u32_g_delay+0x2>
     236:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <u32_g_delay+0x3>
	
	US_sendtrigger(); /** SEND TRIGGER **/
     23a:	0e 94 87 07 	call	0xf0e	; 0xf0e <US_sendtrigger>
		
	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     23e:	88 e8       	ldi	r24, 0x88	; 136
     240:	93 e1       	ldi	r25, 0x13	; 19
     242:	0e 94 25 0a 	call	0x144a	; 0x144a <TMR2_getovs>
     246:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     24a:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     24e:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     252:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>
	
	while((u16_g_time/464) > 70) /** DISTANCE GREATER THAN 70 **/
     256:	82 c0       	rjmp	.+260    	; 0x35c <APP_start+0x142>
		{		
			u8_g_distance = (u16_g_time/464) ; /** CALCULATE THE DISTANCE **/
     258:	af e9       	ldi	r26, 0x9F	; 159
     25a:	b6 e4       	ldi	r27, 0x46	; 70
     25c:	0e 94 81 0b 	call	0x1702	; 0x1702 <__umulhisi3>
     260:	88 0f       	add	r24, r24
     262:	89 2f       	mov	r24, r25
     264:	88 1f       	adc	r24, r24
     266:	99 0b       	sbc	r25, r25
     268:	91 95       	neg	r25
     26a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <u8_g_distance>
			
			TMR2_start() ; /** START TIMER 2 **/
     26e:	0e 94 0f 0a 	call	0x141e	; 0x141e <TMR2_start>
		
			while (u32_g_tick < u32_g_delay)
     272:	2d c0       	rjmp	.+90     	; 0x2ce <APP_start+0xb4>
			{
				/** MOVE WITH 50% SPEED FOR 5 MIN **/
				MOTOR_turnon(MOTOR1_ID);
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     286:	83 e0       	ldi	r24, 0x03	; 3
     288:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
				LCD_goto(1,0) ;
     28c:	60 e0       	ldi	r22, 0x00	; 0
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCD_goto>
				TMR0_delaymicros(50400);
     294:	60 ee       	ldi	r22, 0xE0	; 224
     296:	74 ec       	ldi	r23, 0xC4	; 196
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 88 09 	call	0x1310	; 0x1310 <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
				LCD_writestr("Distance :");
     2b8:	82 e9       	ldi	r24, 0x92	; 146
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writestr>
				LCD_writeint(u8_g_distance);
     2c0:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_writeint>
		{		
			u8_g_distance = (u16_g_time/464) ; /** CALCULATE THE DISTANCE **/
			
			TMR2_start() ; /** START TIMER 2 **/
		
			while (u32_g_tick < u32_g_delay)
     2ce:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     2d2:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     2d6:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     2da:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     2de:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     2e2:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     2e6:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     2ea:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     2ee:	48 17       	cp	r20, r24
     2f0:	59 07       	cpc	r21, r25
     2f2:	6a 07       	cpc	r22, r26
     2f4:	7b 07       	cpc	r23, r27
     2f6:	08 f4       	brcc	.+2      	; 0x2fa <APP_start+0xe0>
     2f8:	bd cf       	rjmp	.-134    	; 0x274 <APP_start+0x5a>
				LCD_writestr("Distance :");
				LCD_writeint(u8_g_distance);
				//TMR0_delaymicros(1200);
			}
					
			TMR2_stop() ;
     2fa:	0e 94 1a 0a 	call	0x1434	; 0x1434 <TMR2_stop>
					
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     30a:	82 e0       	ldi	r24, 0x02	; 2
     30c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			LCD_goto(1,0) ;
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCD_goto>
			TMR0_delaymicros(20560);
     31e:	60 e5       	ldi	r22, 0x50	; 80
     320:	70 e5       	ldi	r23, 0x50	; 80
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 88 09 	call	0x1310	; 0x1310 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     33c:	83 e0       	ldi	r24, 0x03	; 3
     33e:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			LCD_writestr("Distance :");
     342:	82 e9       	ldi	r24, 0x92	; 146
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writestr>
			LCD_writeint(u8_g_distance);
     34a:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_writeint>
			
			US_sendtrigger(); /** SEND TRIGGER **/
     358:	0e 94 87 07 	call	0xf0e	; 0xf0e <US_sendtrigger>
	
	US_sendtrigger(); /** SEND TRIGGER **/
		
	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/464) > 70) /** DISTANCE GREATER THAN 70 **/
     35c:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <u16_g_time>
     360:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     364:	20 3b       	cpi	r18, 0xB0	; 176
     366:	80 e8       	ldi	r24, 0x80	; 128
     368:	38 07       	cpc	r19, r24
     36a:	08 f0       	brcs	.+2      	; 0x36e <APP_start+0x154>
     36c:	75 cf       	rjmp	.-278    	; 0x258 <APP_start+0x3e>
     36e:	2f c0       	rjmp	.+94     	; 0x3ce <APP_start+0x1b4>

	
	while((u16_g_time/464) >= 30) /** DISTANCE BETWEEN 70 AND 30 **/
	{
		/** CONTINUE WITH 30% **/
		MOTOR_turnon(MOTOR1_ID);
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     37c:	82 e0       	ldi	r24, 0x02	; 2
     37e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     382:	83 e0       	ldi	r24, 0x03	; 3
     384:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
		LCD_goto(1,0) ;
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCD_goto>
		TMR0_delaymicros(20560);
     390:	60 e5       	ldi	r22, 0x50	; 80
     392:	70 e5       	ldi	r23, 0x50	; 80
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 88 09 	call	0x1310	; 0x1310 <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     3ae:	83 e0       	ldi	r24, 0x03	; 3
     3b0:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
		LCD_writestr("Distance :");
     3b4:	82 e9       	ldi	r24, 0x92	; 146
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writestr>
		LCD_writeint(u8_g_distance);
     3bc:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_writeint>
		US_sendtrigger(); /** SEND TRIGGER **/
     3ca:	0e 94 87 07 	call	0xf0e	; 0xf0e <US_sendtrigger>
			
			US_sendtrigger(); /** SEND TRIGGER **/
		}

	
	while((u16_g_time/464) >= 30) /** DISTANCE BETWEEN 70 AND 30 **/
     3ce:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     3d2:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     3d6:	80 36       	cpi	r24, 0x60	; 96
     3d8:	96 43       	sbci	r25, 0x36	; 54
     3da:	50 f6       	brcc	.-108    	; 0x370 <APP_start+0x156>
		LCD_writeint(u8_g_distance);
		US_sendtrigger(); /** SEND TRIGGER **/

	}
	
	u32_g_tick = 0 ;
     3dc:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     3e0:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     3e4:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     3e8:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
	u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     3ec:	84 ef       	ldi	r24, 0xF4	; 244
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 25 0a 	call	0x144a	; 0x144a <TMR2_getovs>
     3f4:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     3f8:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     3fc:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     400:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>

	
	
	while((u16_g_time/464) >= 20) /** DISTANCE FROM 20 TO 30 CM **/
     404:	65 c0       	rjmp	.+202    	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
	{
		/** STOP THEN ROTATE **/
		MOTOR_turnoff(MOTOR1_ID);
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
		
		TMR2_start() ; /** START TIMER 2 **/ 
     41e:	0e 94 0f 0a 	call	0x141e	; 0x141e <TMR2_start>
		while (u32_g_tick < u32_g_delay)
     422:	06 c0       	rjmp	.+12     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
		{
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
     424:	82 e0       	ldi	r24, 0x02	; 2
     426:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
		MOTOR_turnoff(MOTOR2_ID);
		MOTOR_turnoff(MOTOR3_ID);
		MOTOR_turnoff(MOTOR4_ID);
		
		TMR2_start() ; /** START TIMER 2 **/ 
		while (u32_g_tick < u32_g_delay)
     430:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     434:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     438:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     43c:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     440:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     444:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     448:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     44c:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     450:	48 17       	cp	r20, r24
     452:	59 07       	cpc	r21, r25
     454:	6a 07       	cpc	r22, r26
     456:	7b 07       	cpc	r23, r27
     458:	28 f3       	brcs	.-54     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		{
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop();
     45a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <TMR2_stop>
			
		while((u16_g_time/464) >= 30)
     45e:	2f c0       	rjmp	.+94     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		{
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			LCD_goto(1,0) ;
     478:	60 e0       	ldi	r22, 0x00	; 0
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCD_goto>
			TMR0_delaymicros(20560);
     480:	60 e5       	ldi	r22, 0x50	; 80
     482:	70 e5       	ldi	r23, 0x50	; 80
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 88 09 	call	0x1310	; 0x1310 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     49e:	83 e0       	ldi	r24, 0x03	; 3
     4a0:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			LCD_writestr("Distance :");
     4a4:	82 e9       	ldi	r24, 0x92	; 146
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writestr>
			LCD_writeint(u8_g_distance);
     4ac:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_writeint>
			US_sendtrigger(); /** SEND TRIGGER **/
     4ba:	0e 94 87 07 	call	0xf0e	; 0xf0e <US_sendtrigger>
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop();
			
		while((u16_g_time/464) >= 30)
     4be:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     4c2:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     4c6:	80 36       	cpi	r24, 0x60	; 96
     4c8:	96 43       	sbci	r25, 0x36	; 54
     4ca:	50 f6       	brcc	.-108    	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
			MOTOR_turnoff(MOTOR4_ID);
			LCD_writestr("Distance :");
			LCD_writeint(u8_g_distance);
			US_sendtrigger(); /** SEND TRIGGER **/
		}
		US_sendtrigger(); /** SEND TRIGGER **/
     4cc:	0e 94 87 07 	call	0xf0e	; 0xf0e <US_sendtrigger>
	u32_g_tick = 0 ;
	u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

	
	
	while((u16_g_time/464) >= 20) /** DISTANCE FROM 20 TO 30 CM **/
     4d0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     4d4:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     4d8:	80 34       	cpi	r24, 0x40	; 64
     4da:	94 42       	sbci	r25, 0x24	; 36
     4dc:	08 f0       	brcs	.+2      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4de:	93 cf       	rjmp	.-218    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     4e0:	d1 c0       	rjmp	.+418    	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
	}

	
	while((u16_g_time/464) < 20)
	{
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR2_ID);
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR3_ID);
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR4_ID);
     4f4:	83 e0       	ldi	r24, 0x03	; 3
     4f6:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <MOTOR_rotateanticlkdir>
		
		while ((u16_g_time/464) <= 20)
     4fa:	2f c0       	rjmp	.+94     	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
		{
			/** GO BACKWARDS WITH 30% SPEED **/
			MOTOR_turnon(MOTOR1_ID);
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			LCD_goto(1,0) ;
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCD_goto>
			TMR0_delaymicros(20560);
     51c:	60 e5       	ldi	r22, 0x50	; 80
     51e:	70 e5       	ldi	r23, 0x50	; 80
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 88 09 	call	0x1310	; 0x1310 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     53a:	83 e0       	ldi	r24, 0x03	; 3
     53c:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			LCD_writestr("Distance :");
     540:	82 e9       	ldi	r24, 0x92	; 146
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writestr>
			LCD_writeint(u8_g_distance);
     548:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_writeint>
			US_sendtrigger(); /** SEND TRIGGER **/
     556:	0e 94 87 07 	call	0xf0e	; 0xf0e <US_sendtrigger>
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
		MOTOR_rotateanticlkdir(MOTOR2_ID);
		MOTOR_rotateanticlkdir(MOTOR3_ID);
		MOTOR_rotateanticlkdir(MOTOR4_ID);
		
		while ((u16_g_time/464) <= 20)
     55a:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     55e:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     562:	80 31       	cpi	r24, 0x10	; 16
     564:	96 42       	sbci	r25, 0x26	; 38
     566:	50 f2       	brcs	.-108    	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
			LCD_writestr("Distance :");
			LCD_writeint(u8_g_distance);
			US_sendtrigger(); /** SEND TRIGGER **/
		}
		
		u32_g_tick = 0 ;
     568:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     56c:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     570:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     574:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
		u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     578:	84 ef       	ldi	r24, 0xF4	; 244
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 25 0a 	call	0x144a	; 0x144a <TMR2_getovs>
     580:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     584:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     588:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     58c:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>
		TMR2_start() ; /** START TIMER 2 **/
     590:	0e 94 0f 0a 	call	0x141e	; 0x141e <TMR2_start>
		
		MOTOR_rotateclkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR2_ID);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR3_ID);
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR4_ID);
     5a6:	83 e0       	ldi	r24, 0x03	; 3
     5a8:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_rotateclkdir>
		
		while ((u16_g_time/464) > 20)
     5ac:	63 c0       	rjmp	.+198    	; 0x674 <__EEPROM_REGION_LENGTH__+0x274>
		{
			/** STOP THEN ROTATE **/
			MOTOR_turnoff(MOTOR1_ID);
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     5c0:	83 e0       	ldi	r24, 0x03	; 3
     5c2:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
			while (u32_g_tick < u32_g_delay)
     5c6:	06 c0       	rjmp	.+12     	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
			{
				/** ROTATION **/
				MOTOR_turnon(MOTOR3_ID);
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     5ce:	83 e0       	ldi	r24, 0x03	; 3
     5d0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
			/** STOP THEN ROTATE **/
			MOTOR_turnoff(MOTOR1_ID);
			MOTOR_turnoff(MOTOR2_ID);
			MOTOR_turnoff(MOTOR3_ID);
			MOTOR_turnoff(MOTOR4_ID);
			while (u32_g_tick < u32_g_delay)
     5d4:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     5d8:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     5dc:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     5e0:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     5e4:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     5e8:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     5ec:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     5f0:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     5f4:	48 17       	cp	r20, r24
     5f6:	59 07       	cpc	r21, r25
     5f8:	6a 07       	cpc	r22, r26
     5fa:	7b 07       	cpc	r23, r27
     5fc:	28 f3       	brcs	.-54     	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
			{
				/** ROTATION **/
				MOTOR_turnon(MOTOR3_ID);
				MOTOR_turnon(MOTOR4_ID);
			}
			US_sendtrigger(); /** SEND TRIGGER **/
     5fe:	0e 94 87 07 	call	0xf0e	; 0xf0e <US_sendtrigger>
			TMR2_stop() ; /** START TIMER 2 **/
     602:	0e 94 1a 0a 	call	0x1434	; 0x1434 <TMR2_stop>
			
			while((u16_g_time/464) >= 30)
     606:	2f c0       	rjmp	.+94     	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
			{
				MOTOR_turnon(MOTOR1_ID);
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <MOTOR_turnon>
				LCD_goto(1,0) ;
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	81 e0       	ldi	r24, 0x01	; 1
     624:	0e 94 d0 05 	call	0xba0	; 0xba0 <LCD_goto>
				TMR0_delaymicros(20560);
     628:	60 e5       	ldi	r22, 0x50	; 80
     62a:	70 e5       	ldi	r23, 0x50	; 80
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	0e 94 88 09 	call	0x1310	; 0x1310 <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     640:	82 e0       	ldi	r24, 0x02	; 2
     642:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	0e 94 35 07 	call	0xe6a	; 0xe6a <MOTOR_turnoff>
				LCD_writestr("Distance :");
     64c:	82 e9       	ldi	r24, 0x92	; 146
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writestr>
				LCD_writeint(u8_g_distance);
     654:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <LCD_writeint>
				US_sendtrigger(); /** SEND TRIGGER **/
     662:	0e 94 87 07 	call	0xf0e	; 0xf0e <US_sendtrigger>
				MOTOR_turnon(MOTOR4_ID);
			}
			US_sendtrigger(); /** SEND TRIGGER **/
			TMR2_stop() ; /** START TIMER 2 **/
			
			while((u16_g_time/464) >= 30)
     666:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     66a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     66e:	80 36       	cpi	r24, 0x60	; 96
     670:	96 43       	sbci	r25, 0x36	; 54
     672:	50 f6       	brcc	.-108    	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
		MOTOR_rotateclkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
		MOTOR_rotateclkdir(MOTOR2_ID);
		MOTOR_rotateclkdir(MOTOR3_ID);
		MOTOR_rotateclkdir(MOTOR4_ID);
		
		while ((u16_g_time/464) > 20)
     674:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     678:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     67c:	80 31       	cpi	r24, 0x10	; 16
     67e:	96 42       	sbci	r25, 0x26	; 38
     680:	08 f0       	brcs	.+2      	; 0x684 <__EEPROM_REGION_LENGTH__+0x284>
     682:	95 cf       	rjmp	.-214    	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
		}
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	
	while((u16_g_time/464) < 20)
     684:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     688:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     68c:	80 34       	cpi	r24, 0x40	; 64
     68e:	94 42       	sbci	r25, 0x24	; 36
     690:	08 f4       	brcc	.+2      	; 0x694 <__EEPROM_REGION_LENGTH__+0x294>
     692:	27 cf       	rjmp	.-434    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
				US_sendtrigger(); /** SEND TRIGGER **/
			}
		}
		
	}
}
     694:	08 95       	ret

00000696 <__vector_1>:


/** EXTI0 **/
ISR(INT0_vect)
{
     696:	1f 92       	push	r1
     698:	0f 92       	push	r0
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	2f 93       	push	r18
     6a2:	3f 93       	push	r19
     6a4:	4f 93       	push	r20
     6a6:	5f 93       	push	r21
     6a8:	6f 93       	push	r22
     6aa:	7f 93       	push	r23
     6ac:	8f 93       	push	r24
     6ae:	9f 93       	push	r25
     6b0:	af 93       	push	r26
     6b2:	bf 93       	push	r27
     6b4:	ef 93       	push	r30
     6b6:	ff 93       	push	r31
	u8_echoedge++ ; /** INCREASE THE ECHO BY 1 **/
     6b8:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <u8_echoedge>
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <u8_echoedge>
	
	if(u8_echoedge == 1) /** FIRST CHANGE (RISING EDGE) **/
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	19 f4       	brne	.+6      	; 0x6cc <__vector_1+0x36>
	{
		ICU_start(); /** START ICU / COUNTING **/
     6c6:	0e 94 02 04 	call	0x804	; 0x804 <ICU_start>
     6ca:	1f c0       	rjmp	.+62     	; 0x70a <__vector_1+0x74>
	}
	
	else if(u8_echoedge == 2) /** SECOND CHANGE (FALLING EDGE) **/
     6cc:	82 30       	cpi	r24, 0x02	; 2
     6ce:	e9 f4       	brne	.+58     	; 0x70a <__vector_1+0x74>
	{
		ICU_stop(); /** STOP ICU / COUNTING **/
     6d0:	0e 94 08 04 	call	0x810	; 0x810 <ICU_stop>
		
		u16_g_time = ICU_getvalue(); /** GET PULSE LENGTH **/
     6d4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <ICU_getvalue>
     6d8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <u16_g_time+0x1>
     6dc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <u16_g_time>
		
		ICU_setcounterval(0); /** START COUNTING FROM ZERO **/
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 05 04 	call	0x80a	; 0x80a <ICU_setcounterval>
				
		u8_echoedge = 0 ; /** REINITIALIZE ECHO EDGE TO 0 TO REPEAT IN ANY CHANGE AGAIN **/
     6e8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <u8_echoedge>
		
		u8_g_distance = (u16_g_time/464) ; /** CALCULATE THE DISTANCE **/
     6ec:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <u16_g_time>
     6f0:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     6f4:	af e9       	ldi	r26, 0x9F	; 159
     6f6:	b6 e4       	ldi	r27, 0x46	; 70
     6f8:	0e 94 81 0b 	call	0x1702	; 0x1702 <__umulhisi3>
     6fc:	88 0f       	add	r24, r24
     6fe:	89 2f       	mov	r24, r25
     700:	88 1f       	adc	r24, r24
     702:	99 0b       	sbc	r25, r25
     704:	91 95       	neg	r25
     706:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <u8_g_distance>
	}
}
     70a:	ff 91       	pop	r31
     70c:	ef 91       	pop	r30
     70e:	bf 91       	pop	r27
     710:	af 91       	pop	r26
     712:	9f 91       	pop	r25
     714:	8f 91       	pop	r24
     716:	7f 91       	pop	r23
     718:	6f 91       	pop	r22
     71a:	5f 91       	pop	r21
     71c:	4f 91       	pop	r20
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	0f 90       	pop	r0
     724:	0f be       	out	0x3f, r0	; 63
     726:	0f 90       	pop	r0
     728:	1f 90       	pop	r1
     72a:	18 95       	reti

0000072c <__vector_9>:

/** TIMER 1 OVERFLOW **/
ISR(TIMER1_OVF_vect)
{
     72c:	1f 92       	push	r1
     72e:	0f 92       	push	r0
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	0f 92       	push	r0
     734:	11 24       	eor	r1, r1
	/** DO NOTHING **/
}
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <__vector_5>:

/** TIMER 0 OVERFLOW **/
ISR(TIMER2_OVF_vect)
{
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	8f 93       	push	r24
     74c:	9f 93       	push	r25
     74e:	af 93       	push	r26
     750:	bf 93       	push	r27
	u32_g_tick++ ; /** INCREASE TICKS  **/
     752:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
     756:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <__data_end+0x1>
     75a:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <__data_end+0x2>
     75e:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <__data_end+0x3>
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	a1 1d       	adc	r26, r1
     766:	b1 1d       	adc	r27, r1
     768:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
     76c:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <__data_end+0x1>
     770:	a0 93 a0 00 	sts	0x00A0, r26	; 0x8000a0 <__data_end+0x2>
     774:	b0 93 a1 00 	sts	0x00A1, r27	; 0x8000a1 <__data_end+0x3>
}
     778:	bf 91       	pop	r27
     77a:	af 91       	pop	r26
     77c:	9f 91       	pop	r25
     77e:	8f 91       	pop	r24
     780:	0f 90       	pop	r0
     782:	0f be       	out	0x3f, r0	; 63
     784:	0f 90       	pop	r0
     786:	1f 90       	pop	r1
     788:	18 95       	reti

0000078a <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(void)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(BUTTON1_PORT , BUTTON1_PIN , DIO_PIN_INPUT);
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	63 e0       	ldi	r22, 0x03	; 3
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
     794:	08 95       	ret

00000796 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
en_a_button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	1f 92       	push	r1
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	8a 01       	movw	r16, r20
	en_a_button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
     7a6:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
     7a8:	ae 01       	movw	r20, r28
     7aa:	4f 5f       	subi	r20, 0xFF	; 255
     7ac:	5f 4f       	sbci	r21, 0xFF	; 255
     7ae:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_readpin>
	
	if (!pin_status) 
     7b2:	81 11       	cpse	r24, r1
     7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	f8 01       	movw	r30, r16
     7ba:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	04 c0       	rjmp	.+8      	; 0x7c8 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	f8 01       	movw	r30, r16
     7c4:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     7c6:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
     7c8:	0f 90       	pop	r0
     7ca:	df 91       	pop	r29
     7cc:	cf 91       	pop	r28
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <ICU_init>:
/**************************************************************/
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	TMR1_init(); /** INITIALIZE TIMER 1 MODULE **/
     7d4:	0e 94 bc 09 	call	0x1378	; 0x1378 <TMR1_init>
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
     7d8:	0e 94 19 09 	call	0x1232	; 0x1232 <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	08 95       	ret

000007e0 <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <ICU_getvalue+0x6>
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
     7ea:	1a 82       	std	Y+2, r1	; 0x02
     7ec:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
     7ee:	ce 01       	movw	r24, r28
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	0e 94 ef 09 	call	0x13de	; 0x13de <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	9a 81       	ldd	r25, Y+2	; 0x02
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <ICU_start>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_start(void)
{
	TMR1_start(); /** START TIMER1 COUNTING **/
     804:	0e 94 d7 09 	call	0x13ae	; 0x13ae <TMR1_start>
     808:	08 95       	ret

0000080a <ICU_setcounterval>:
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_setcounterval(uint16t u16_a_counterval)
{
	TMR1_setcounterval(u16_a_counterval);
     80a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <TMR1_setcounterval>
     80e:	08 95       	ret

00000810 <ICU_stop>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_stop(void)
{
	TMR1_stop();  /** STOP TIMER1 COUNTING **/
     810:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <TMR1_stop>
     814:	08 95       	ret

00000816 <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	65 e0       	ldi	r22, 0x05	; 5
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
     820:	41 e0       	ldi	r20, 0x01	; 1
     822:	66 e0       	ldi	r22, 0x06	; 6
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
     82a:	41 e0       	ldi	r20, 0x01	; 1
     82c:	67 e0       	ldi	r22, 0x07	; 7
     82e:	83 e0       	ldi	r24, 0x03	; 3
     830:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>

	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	64 e0       	ldi	r22, 0x04	; 4
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
	DIO_setpinvalue(ROW_PORT_DATA , R3 ,  DIO_PIN_LOW);


    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	65 e0       	ldi	r22, 0x05	; 5
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
     85c:	41 e0       	ldi	r20, 0x01	; 1
     85e:	66 e0       	ldi	r22, 0x06	; 6
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
     866:	41 e0       	ldi	r20, 0x01	; 1
     868:	67 e0       	ldi	r22, 0x07	; 7
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	83 e0       	ldi	r24, 0x03	; 3
     876:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
     87a:	41 e0       	ldi	r20, 0x01	; 1
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	83 e0       	ldi	r24, 0x03	; 3
     880:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
     884:	41 e0       	ldi	r20, 0x01	; 1
     886:	64 e0       	ldi	r22, 0x04	; 4
     888:	83 e0       	ldi	r24, 0x03	; 3
     88a:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	08 95       	ret

00000892 <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <KEYPAD_read+0xe>
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <KEYPAD_read+0x10>
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <KEYPAD_read+0x12>
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
     8aa:	85 e0       	ldi	r24, 0x05	; 5
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	86 e0       	ldi	r24, 0x06	; 6
     8b0:	8a 83       	std	Y+2, r24	; 0x02
     8b2:	87 e0       	ldi	r24, 0x07	; 7
     8b4:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
     8b6:	1c 82       	std	Y+4, r1	; 0x04
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	8d 83       	std	Y+5, r24	; 0x05
     8bc:	84 e0       	ldi	r24, 0x04	; 4
     8be:	8e 83       	std	Y+6, r24	; 0x06

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     8c0:	00 e0       	ldi	r16, 0x00	; 0
     8c2:	79 c0       	rjmp	.+242    	; 0x9b6 <KEYPAD_read+0x124>
    {
		if (u8_a_rowiterator == 3 )
     8c4:	03 30       	cpi	r16, 0x03	; 3
     8c6:	39 f4       	brne	.+14     	; 0x8d6 <KEYPAD_read+0x44>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	83 e0       	ldi	r24, 0x03	; 3
     8ce:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     8d2:	10 e0       	ldi	r17, 0x00	; 0
     8d4:	62 c0       	rjmp	.+196    	; 0x99a <KEYPAD_read+0x108>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
		}
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
     8d6:	e1 e0       	ldi	r30, 0x01	; 1
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	ec 0f       	add	r30, r28
     8dc:	fd 1f       	adc	r31, r29
     8de:	e0 0f       	add	r30, r16
     8e0:	f1 1d       	adc	r31, r1
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	60 81       	ld	r22, Z
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     8ec:	f2 cf       	rjmp	.-28     	; 0x8d2 <KEYPAD_read+0x40>
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
     8ee:	e4 e0       	ldi	r30, 0x04	; 4
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	ec 0f       	add	r30, r28
     8f4:	fd 1f       	adc	r31, r29
     8f6:	e1 0f       	add	r30, r17
     8f8:	f1 1d       	adc	r31, r1
     8fa:	a7 01       	movw	r20, r14
     8fc:	60 81       	ld	r22, Z
     8fe:	83 e0       	ldi	r24, 0x03	; 3
     900:	0e 94 9d 08 	call	0x113a	; 0x113a <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
     904:	f7 01       	movw	r30, r14
     906:	80 81       	ld	r24, Z
     908:	81 11       	cpse	r24, r1
     90a:	46 c0       	rjmp	.+140    	; 0x998 <KEYPAD_read+0x106>
            {
                if (u8_a_rowiterator == 0)
     90c:	01 11       	cpse	r16, r1
     90e:	11 c0       	rjmp	.+34     	; 0x932 <KEYPAD_read+0xa0>
                {
                    if (u8_a_coulumniterator == 0)
     910:	11 11       	cpse	r17, r1
     912:	03 c0       	rjmp	.+6      	; 0x91a <KEYPAD_read+0x88>
                    {
                        *u8_a_value = '1' ;
     914:	81 e3       	ldi	r24, 0x31	; 49
     916:	80 83       	st	Z, r24
     918:	33 c0       	rjmp	.+102    	; 0x980 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     91a:	11 30       	cpi	r17, 0x01	; 1
     91c:	21 f4       	brne	.+8      	; 0x926 <KEYPAD_read+0x94>
                    {
                        *u8_a_value = '2' ;
     91e:	82 e3       	ldi	r24, 0x32	; 50
     920:	f7 01       	movw	r30, r14
     922:	80 83       	st	Z, r24
     924:	2d c0       	rjmp	.+90     	; 0x980 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     926:	12 30       	cpi	r17, 0x02	; 2
     928:	59 f5       	brne	.+86     	; 0x980 <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '3' ;
     92a:	83 e3       	ldi	r24, 0x33	; 51
     92c:	f7 01       	movw	r30, r14
     92e:	80 83       	st	Z, r24
     930:	27 c0       	rjmp	.+78     	; 0x980 <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 1)
     932:	01 30       	cpi	r16, 0x01	; 1
     934:	91 f4       	brne	.+36     	; 0x95a <KEYPAD_read+0xc8>
                {
                    if (u8_a_coulumniterator == 0)
     936:	11 11       	cpse	r17, r1
     938:	04 c0       	rjmp	.+8      	; 0x942 <KEYPAD_read+0xb0>
                    {
                        *u8_a_value = '4' ;
     93a:	84 e3       	ldi	r24, 0x34	; 52
     93c:	f7 01       	movw	r30, r14
     93e:	80 83       	st	Z, r24
     940:	1f c0       	rjmp	.+62     	; 0x980 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     942:	11 30       	cpi	r17, 0x01	; 1
     944:	21 f4       	brne	.+8      	; 0x94e <KEYPAD_read+0xbc>
                    {
                        *u8_a_value = '5' ;
     946:	85 e3       	ldi	r24, 0x35	; 53
     948:	f7 01       	movw	r30, r14
     94a:	80 83       	st	Z, r24
     94c:	19 c0       	rjmp	.+50     	; 0x980 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     94e:	12 30       	cpi	r17, 0x02	; 2
     950:	b9 f4       	brne	.+46     	; 0x980 <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '6' ;
     952:	86 e3       	ldi	r24, 0x36	; 54
     954:	f7 01       	movw	r30, r14
     956:	80 83       	st	Z, r24
     958:	13 c0       	rjmp	.+38     	; 0x980 <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 2)
     95a:	02 30       	cpi	r16, 0x02	; 2
     95c:	89 f4       	brne	.+34     	; 0x980 <KEYPAD_read+0xee>
                {
                    if (u8_a_coulumniterator == 0)
     95e:	11 11       	cpse	r17, r1
     960:	04 c0       	rjmp	.+8      	; 0x96a <KEYPAD_read+0xd8>
                    {
                        *u8_a_value = '7' ;
     962:	87 e3       	ldi	r24, 0x37	; 55
     964:	f7 01       	movw	r30, r14
     966:	80 83       	st	Z, r24
     968:	0b c0       	rjmp	.+22     	; 0x980 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     96a:	11 30       	cpi	r17, 0x01	; 1
     96c:	21 f4       	brne	.+8      	; 0x976 <KEYPAD_read+0xe4>
                    {
                        *u8_a_value = '8' ;
     96e:	88 e3       	ldi	r24, 0x38	; 56
     970:	f7 01       	movw	r30, r14
     972:	80 83       	st	Z, r24
     974:	05 c0       	rjmp	.+10     	; 0x980 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     976:	12 30       	cpi	r17, 0x02	; 2
     978:	19 f4       	brne	.+6      	; 0x980 <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '9' ;
     97a:	89 e3       	ldi	r24, 0x39	; 57
     97c:	f7 01       	movw	r30, r14
     97e:	80 83       	st	Z, r24
                    }
                }
				
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     980:	e1 e0       	ldi	r30, 0x01	; 1
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	ec 0f       	add	r30, r28
     986:	fd 1f       	adc	r31, r29
     988:	e0 0f       	add	r30, r16
     98a:	f1 1d       	adc	r31, r1
     98c:	60 81       	ld	r22, Z
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_togglepin>
				return KEYPAD_readSuccess;
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	13 c0       	rjmp	.+38     	; 0x9be <KEYPAD_read+0x12c>
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     998:	1f 5f       	subi	r17, 0xFF	; 255
     99a:	13 30       	cpi	r17, 0x03	; 3
     99c:	08 f4       	brcc	.+2      	; 0x9a0 <KEYPAD_read+0x10e>
     99e:	a7 cf       	rjmp	.-178    	; 0x8ee <KEYPAD_read+0x5c>
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
				return KEYPAD_readSuccess;
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     9a0:	e1 e0       	ldi	r30, 0x01	; 1
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	ec 0f       	add	r30, r28
     9a6:	fd 1f       	adc	r31, r29
     9a8:	e0 0f       	add	r30, r16
     9aa:	f1 1d       	adc	r31, r1
     9ac:	60 81       	ld	r22, Z
     9ae:	83 e0       	ldi	r24, 0x03	; 3
     9b0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     9b4:	0f 5f       	subi	r16, 0xFF	; 255
     9b6:	03 30       	cpi	r16, 0x03	; 3
     9b8:	08 f4       	brcc	.+2      	; 0x9bc <KEYPAD_read+0x12a>
     9ba:	84 cf       	rjmp	.-248    	; 0x8c4 <KEYPAD_read+0x32>
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
    }
    return KEYPAD_readFail;
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	26 96       	adiw	r28, 0x06	; 6
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	f8 94       	cli
     9c4:	de bf       	out	0x3e, r29	; 62
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	08 95       	ret

000009d8 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     9d8:	cf 93       	push	r28
     9da:	c8 2f       	mov	r28, r24
     9dc:	0e 94 25 09 	call	0x124a	; 0x124a <TMR0_init>
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	61 e0       	ldi	r22, 0x01	; 1
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	62 e0       	ldi	r22, 0x02	; 2
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	63 e0       	ldi	r22, 0x03	; 3
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     9fe:	8b b3       	in	r24, 0x1b	; 27
     a00:	9c 2f       	mov	r25, r28
     a02:	90 7f       	andi	r25, 0xF0	; 240
     a04:	8f 70       	andi	r24, 0x0F	; 15
     a06:	89 2b       	or	r24, r25
     a08:	8b bb       	out	0x1b, r24	; 27
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	63 e0       	ldi	r22, 0x03	; 3
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     a14:	61 e0       	ldi	r22, 0x01	; 1
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	63 e0       	ldi	r22, 0x03	; 3
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     a2a:	20 e1       	ldi	r18, 0x10	; 16
     a2c:	c2 9f       	mul	r28, r18
     a2e:	c0 01       	movw	r24, r0
     a30:	11 24       	eor	r1, r1
     a32:	9b b3       	in	r25, 0x1b	; 27
     a34:	9f 70       	andi	r25, 0x0F	; 15
     a36:	89 2b       	or	r24, r25
     a38:	8b bb       	out	0x1b, r24	; 27
     a3a:	41 e0       	ldi	r20, 0x01	; 1
     a3c:	63 e0       	ldi	r22, 0x03	; 3
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	63 e0       	ldi	r22, 0x03	; 3
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     a5a:	65 e0       	ldi	r22, 0x05	; 5
     a5c:	70 e0       	ldi	r23, 0x00	; 0
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <LCD_init>:
     a6a:	0e 94 25 09 	call	0x124a	; 0x124a <TMR0_init>
     a6e:	41 e0       	ldi	r20, 0x01	; 1
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
     a78:	41 e0       	ldi	r20, 0x01	; 1
     a7a:	62 e0       	ldi	r22, 0x02	; 2
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	63 e0       	ldi	r22, 0x03	; 3
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	64 e0       	ldi	r22, 0x04	; 4
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
     a96:	41 e0       	ldi	r20, 0x01	; 1
     a98:	65 e0       	ldi	r22, 0x05	; 5
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
     aa0:	41 e0       	ldi	r20, 0x01	; 1
     aa2:	66 e0       	ldi	r22, 0x06	; 6
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
     aaa:	41 e0       	ldi	r20, 0x01	; 1
     aac:	67 e0       	ldi	r22, 0x07	; 7
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
     ab4:	64 e1       	ldi	r22, 0x14	; 20
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>
     ac0:	83 e3       	ldi	r24, 0x33	; 51
     ac2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCD_sendcmd>
     ac6:	82 e3       	ldi	r24, 0x32	; 50
     ac8:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCD_sendcmd>
     acc:	88 e2       	ldi	r24, 0x28	; 40
     ace:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCD_sendcmd>
     ad2:	8c e0       	ldi	r24, 0x0C	; 12
     ad4:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCD_sendcmd>
     ad8:	86 e0       	ldi	r24, 0x06	; 6
     ada:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCD_sendcmd>
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCD_sendcmd>
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCD_sendcmd>
     aea:	08 95       	ret

00000aec <LCD_writechar>:
     aec:	cf 93       	push	r28
     aee:	c8 2f       	mov	r28, r24
     af0:	41 e0       	ldi	r20, 0x01	; 1
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	62 e0       	ldi	r22, 0x02	; 2
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	63 e0       	ldi	r22, 0x03	; 3
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     b0e:	8b b3       	in	r24, 0x1b	; 27
     b10:	9c 2f       	mov	r25, r28
     b12:	90 7f       	andi	r25, 0xF0	; 240
     b14:	8f 70       	andi	r24, 0x0F	; 15
     b16:	89 2b       	or	r24, r25
     b18:	8b bb       	out	0x1b, r24	; 27
     b1a:	41 e0       	ldi	r20, 0x01	; 1
     b1c:	63 e0       	ldi	r22, 0x03	; 3
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	63 e0       	ldi	r22, 0x03	; 3
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     b3a:	20 e1       	ldi	r18, 0x10	; 16
     b3c:	c2 9f       	mul	r28, r18
     b3e:	c0 01       	movw	r24, r0
     b40:	11 24       	eor	r1, r1
     b42:	9b b3       	in	r25, 0x1b	; 27
     b44:	9f 70       	andi	r25, 0x0F	; 15
     b46:	89 2b       	or	r24, r25
     b48:	8b bb       	out	0x1b, r24	; 27
     b4a:	41 e0       	ldi	r20, 0x01	; 1
     b4c:	63 e0       	ldi	r22, 0x03	; 3
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	63 e0       	ldi	r22, 0x03	; 3
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
     b6a:	65 e0       	ldi	r22, 0x05	; 5
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 4c 09 	call	0x1298	; 0x1298 <TMR0_delayms>
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <LCD_writestr>:
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	8c 01       	movw	r16, r24
     b82:	c0 e0       	ldi	r28, 0x00	; 0
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <LCD_writestr+0x12>
     b86:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_writechar>
     b8a:	cf 5f       	subi	r28, 0xFF	; 255
     b8c:	f8 01       	movw	r30, r16
     b8e:	ec 0f       	add	r30, r28
     b90:	f1 1d       	adc	r31, r1
     b92:	80 81       	ld	r24, Z
     b94:	81 11       	cpse	r24, r1
     b96:	f7 cf       	rjmp	.-18     	; 0xb86 <LCD_writestr+0xc>
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	08 95       	ret

00000ba0 <LCD_goto>:
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <LCD_goto+0x6>
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	90 e8       	ldi	r25, 0x80	; 128
     bac:	99 83       	std	Y+1, r25	; 0x01
     bae:	90 ec       	ldi	r25, 0xC0	; 192
     bb0:	9a 83       	std	Y+2, r25	; 0x02
     bb2:	e1 e0       	ldi	r30, 0x01	; 1
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	ec 0f       	add	r30, r28
     bb8:	fd 1f       	adc	r31, r29
     bba:	e8 0f       	add	r30, r24
     bbc:	f1 1d       	adc	r31, r1
     bbe:	80 81       	ld	r24, Z
     bc0:	86 0f       	add	r24, r22
     bc2:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <LCD_sendcmd>
     bc6:	0f 90       	pop	r0
     bc8:	0f 90       	pop	r0
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	2a 97       	sbiw	r28, 0x0a	; 10
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     be6:	99 23       	and	r25, r25
     be8:	dc f5       	brge	.+118    	; 0xc60 <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
     bea:	90 95       	com	r25
     bec:	80 95       	com	r24
     bee:	70 95       	com	r23
     bf0:	61 95       	neg	r22
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	8f 4f       	sbci	r24, 0xFF	; 255
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     bf8:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     bfa:	13 c0       	rjmp	.+38     	; 0xc22 <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     bfc:	2a e0       	ldi	r18, 0x0A	; 10
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__divmodsi4>
     c08:	e1 e0       	ldi	r30, 0x01	; 1
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	ec 0f       	add	r30, r28
     c0e:	fd 1f       	adc	r31, r29
     c10:	e1 0f       	add	r30, r17
     c12:	f1 1d       	adc	r31, r1
     c14:	60 5d       	subi	r22, 0xD0	; 208
     c16:	60 83       	st	Z, r22
			s32_a_num /= 10;
     c18:	62 2f       	mov	r22, r18
     c1a:	73 2f       	mov	r23, r19
     c1c:	84 2f       	mov	r24, r20
     c1e:	95 2f       	mov	r25, r21
			i++;
     c20:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     c22:	16 16       	cp	r1, r22
     c24:	17 06       	cpc	r1, r23
     c26:	18 06       	cpc	r1, r24
     c28:	19 06       	cpc	r1, r25
     c2a:	44 f3       	brlt	.-48     	; 0xbfc <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     c2c:	e1 e0       	ldi	r30, 0x01	; 1
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	ec 0f       	add	r30, r28
     c32:	fd 1f       	adc	r31, r29
     c34:	e1 0f       	add	r30, r17
     c36:	f1 1d       	adc	r31, r1
     c38:	8d e2       	ldi	r24, 0x2D	; 45
     c3a:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     c3c:	1f 5f       	subi	r17, 0xFF	; 255
     c3e:	0d c0       	rjmp	.+26     	; 0xc5a <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
     c40:	e1 2f       	mov	r30, r17
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	31 97       	sbiw	r30, 0x01	; 1
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	8c 0f       	add	r24, r28
     c4c:	9d 1f       	adc	r25, r29
     c4e:	e8 0f       	add	r30, r24
     c50:	f9 1f       	adc	r31, r25
     c52:	80 81       	ld	r24, Z
     c54:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     c58:	11 50       	subi	r17, 0x01	; 1
     c5a:	11 11       	cpse	r17, r1
     c5c:	f1 cf       	rjmp	.-30     	; 0xc40 <LCD_writeint+0x70>
     c5e:	39 c0       	rjmp	.+114    	; 0xcd2 <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     c60:	61 15       	cp	r22, r1
     c62:	71 05       	cpc	r23, r1
     c64:	81 05       	cpc	r24, r1
     c66:	91 05       	cpc	r25, r1
     c68:	21 f4       	brne	.+8      	; 0xc72 <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
     c6a:	80 e3       	ldi	r24, 0x30	; 48
     c6c:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_writechar>
     c70:	30 c0       	rjmp	.+96     	; 0xcd2 <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     c72:	16 16       	cp	r1, r22
     c74:	17 06       	cpc	r1, r23
     c76:	18 06       	cpc	r1, r24
     c78:	19 06       	cpc	r1, r25
     c7a:	ac f0       	brlt	.+42     	; 0xca6 <LCD_writeint+0xd6>
     c7c:	2a c0       	rjmp	.+84     	; 0xcd2 <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     c7e:	2a e0       	ldi	r18, 0x0A	; 10
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <__divmodsi4>
     c8a:	e1 e0       	ldi	r30, 0x01	; 1
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	ec 0f       	add	r30, r28
     c90:	fd 1f       	adc	r31, r29
     c92:	e1 0f       	add	r30, r17
     c94:	f1 1d       	adc	r31, r1
     c96:	60 5d       	subi	r22, 0xD0	; 208
     c98:	60 83       	st	Z, r22
			s32_a_num /= 10;
     c9a:	62 2f       	mov	r22, r18
     c9c:	73 2f       	mov	r23, r19
     c9e:	84 2f       	mov	r24, r20
     ca0:	95 2f       	mov	r25, r21
			i++;
     ca2:	1f 5f       	subi	r17, 0xFF	; 255
     ca4:	01 c0       	rjmp	.+2      	; 0xca8 <LCD_writeint+0xd8>
     ca6:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     ca8:	16 16       	cp	r1, r22
     caa:	17 06       	cpc	r1, r23
     cac:	18 06       	cpc	r1, r24
     cae:	19 06       	cpc	r1, r25
     cb0:	34 f3       	brlt	.-52     	; 0xc7e <LCD_writeint+0xae>
     cb2:	0d c0       	rjmp	.+26     	; 0xcce <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     cb4:	e1 2f       	mov	r30, r17
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	8c 0f       	add	r24, r28
     cc0:	9d 1f       	adc	r25, r29
     cc2:	e8 0f       	add	r30, r24
     cc4:	f9 1f       	adc	r31, r25
     cc6:	80 81       	ld	r24, Z
     cc8:	0e 94 76 05 	call	0xaec	; 0xaec <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     ccc:	11 50       	subi	r17, 0x01	; 1
     cce:	11 11       	cpse	r17, r1
     cd0:	f1 cf       	rjmp	.-30     	; 0xcb4 <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     cd2:	2a 96       	adiw	r28, 0x0a	; 10
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	08 95       	ret

00000ce6 <MOTOR_init>:
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
	
	switch(u8_a_motorid)
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	b9 f0       	breq	.+46     	; 0xd18 <MOTOR_init+0x32>
     cea:	28 f0       	brcs	.+10     	; 0xcf6 <MOTOR_init+0x10>
     cec:	82 30       	cpi	r24, 0x02	; 2
     cee:	29 f1       	breq	.+74     	; 0xd3a <MOTOR_init+0x54>
     cf0:	83 30       	cpi	r24, 0x03	; 3
     cf2:	a1 f1       	breq	.+104    	; 0xd5c <MOTOR_init+0x76>
     cf4:	44 c0       	rjmp	.+136    	; 0xd7e <MOTOR_init+0x98>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
     cf6:	41 e0       	ldi	r20, 0x01	; 1
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
     d00:	41 e0       	ldi	r20, 0x01	; 1
     d02:	61 e0       	ldi	r22, 0x01	; 1
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
     d0a:	41 e0       	ldi	r20, 0x01	; 1
     d0c:	62 e0       	ldi	r22, 0x02	; 2
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d14:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
		break;
     d16:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
     d18:	41 e0       	ldi	r20, 0x01	; 1
     d1a:	63 e0       	ldi	r22, 0x03	; 3
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
     d22:	41 e0       	ldi	r20, 0x01	; 1
     d24:	64 e0       	ldi	r22, 0x04	; 4
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     d2c:	41 e0       	ldi	r20, 0x01	; 1
     d2e:	65 e0       	ldi	r22, 0x05	; 5
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d36:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d38:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
     d3a:	41 e0       	ldi	r20, 0x01	; 1
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
     d44:	41 e0       	ldi	r20, 0x01	; 1
     d46:	61 e0       	ldi	r22, 0x01	; 1
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     d4e:	41 e0       	ldi	r20, 0x01	; 1
     d50:	62 e0       	ldi	r22, 0x02	; 2
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d58:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d5a:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
     d5c:	41 e0       	ldi	r20, 0x01	; 1
     d5e:	63 e0       	ldi	r22, 0x03	; 3
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	64 e0       	ldi	r22, 0x04	; 4
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     d70:	41 e0       	ldi	r20, 0x01	; 1
     d72:	65 e0       	ldi	r22, 0x05	; 5
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d7a:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d7c:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_initstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d7e:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_initstatus ; /** RETURN THE FINAL STATUS **/
}
     d80:	08 95       	ret

00000d82 <MOTOR_rotateclkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	91 f0       	breq	.+36     	; 0xdaa <MOTOR_rotateclkdir+0x28>
     d86:	28 f0       	brcs	.+10     	; 0xd92 <MOTOR_rotateclkdir+0x10>
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	d9 f0       	breq	.+54     	; 0xdc2 <MOTOR_rotateclkdir+0x40>
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	29 f1       	breq	.+74     	; 0xdda <MOTOR_rotateclkdir+0x58>
     d90:	30 c0       	rjmp	.+96     	; 0xdf2 <MOTOR_rotateclkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     da6:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     da8:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     daa:	41 e0       	ldi	r20, 0x01	; 1
     dac:	63 e0       	ldi	r22, 0x03	; 3
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	64 e0       	ldi	r22, 0x04	; 4
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dbe:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     dc0:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dd6:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     dd8:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     dda:	41 e0       	ldi	r20, 0x01	; 1
     ddc:	63 e0       	ldi	r22, 0x03	; 3
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	64 e0       	ldi	r22, 0x04	; 4
     de8:	82 e0       	ldi	r24, 0x02	; 2
     dea:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dee:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     df0:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motordirectionstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     df2:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motordirectionstatus ; /** RETURN THE FINAL STATUS **/
}
     df4:	08 95       	ret

00000df6 <MOTOR_rotateanticlkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	91 f0       	breq	.+36     	; 0xe1e <MOTOR_rotateanticlkdir+0x28>
     dfa:	28 f0       	brcs	.+10     	; 0xe06 <MOTOR_rotateanticlkdir+0x10>
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	d9 f0       	breq	.+54     	; 0xe36 <MOTOR_rotateanticlkdir+0x40>
     e00:	83 30       	cpi	r24, 0x03	; 3
     e02:	29 f1       	breq	.+74     	; 0xe4e <MOTOR_rotateanticlkdir+0x58>
     e04:	30 c0       	rjmp	.+96     	; 0xe66 <MOTOR_rotateanticlkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e1a:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e1c:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	63 e0       	ldi	r22, 0x03	; 3
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e28:	41 e0       	ldi	r20, 0x01	; 1
     e2a:	64 e0       	ldi	r22, 0x04	; 4
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e32:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e34:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e36:	40 e0       	ldi	r20, 0x00	; 0
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	61 e0       	ldi	r22, 0x01	; 1
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e4a:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e4c:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	63 e0       	ldi	r22, 0x03	; 3
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	64 e0       	ldi	r22, 0x04	; 4
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e62:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e64:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motorrotatestatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e66:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
     e68:	08 95       	ret

00000e6a <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	69 f0       	breq	.+26     	; 0xe88 <MOTOR_turnoff+0x1e>
     e6e:	28 f0       	brcs	.+10     	; 0xe7a <MOTOR_turnoff+0x10>
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	89 f0       	breq	.+34     	; 0xe96 <MOTOR_turnoff+0x2c>
     e74:	83 30       	cpi	r24, 0x03	; 3
     e76:	b1 f0       	breq	.+44     	; 0xea4 <MOTOR_turnoff+0x3a>
     e78:	1c c0       	rjmp	.+56     	; 0xeb2 <MOTOR_turnoff+0x48>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	62 e0       	ldi	r22, 0x02	; 2
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e84:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e86:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	65 e0       	ldi	r22, 0x05	; 5
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e92:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e94:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e96:	40 e0       	ldi	r20, 0x00	; 0
     e98:	62 e0       	ldi	r22, 0x02	; 2
     e9a:	82 e0       	ldi	r24, 0x02	; 2
     e9c:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ea0:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     ea2:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     ea4:	40 e0       	ldi	r20, 0x00	; 0
     ea6:	65 e0       	ldi	r22, 0x05	; 5
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     eae:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     eb0:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     eb2:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     eb4:	08 95       	ret

00000eb6 <MOTOR_turnon>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	69 f0       	breq	.+26     	; 0xed4 <MOTOR_turnon+0x1e>
     eba:	28 f0       	brcs	.+10     	; 0xec6 <MOTOR_turnon+0x10>
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	89 f0       	breq	.+34     	; 0xee2 <MOTOR_turnon+0x2c>
     ec0:	83 30       	cpi	r24, 0x03	; 3
     ec2:	b1 f0       	breq	.+44     	; 0xef0 <MOTOR_turnon+0x3a>
     ec4:	1c c0       	rjmp	.+56     	; 0xefe <MOTOR_turnon+0x48>
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     ec6:	41 e0       	ldi	r20, 0x01	; 1
     ec8:	62 e0       	ldi	r22, 0x02	; 2
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ed0:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     ed2:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     ed4:	41 e0       	ldi	r20, 0x01	; 1
     ed6:	65 e0       	ldi	r22, 0x05	; 5
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ede:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     ee0:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	62 e0       	ldi	r22, 0x02	; 2
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     eec:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     eee:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     ef0:	41 e0       	ldi	r20, 0x01	; 1
     ef2:	65 e0       	ldi	r22, 0x05	; 5
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     efa:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     efc:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     efe:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     f00:	08 95       	ret

00000f02 <US_init>:
/** RETURNS : VOID                                                **/
/*******************************************************************/
void US_init(void)
{
	/** INITIALIZE THE TRIGGER PIN AS OUTPUT PIN **/
	DIO_setpindir(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_OUTPUT);
     f02:	41 e0       	ldi	r20, 0x01	; 1
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	0e 94 9f 07 	call	0xf3e	; 0xf3e <DIO_setpindir>
     f0c:	08 95       	ret

00000f0e <US_sendtrigger>:
/** RETURNS : EN_ultrasonicreturn                                 **/
/*******************************************************************/
EN_ultrasonicreturn US_sendtrigger(void)
{
	/** SEND PULSE OF 15 MICROSECOND **/
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_HIGH);
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
	TMR0_delaymicros(15);
     f18:	6f e0       	ldi	r22, 0x0F	; 15
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 88 09 	call	0x1310	; 0x1310 <TMR0_delaymicros>
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_LOW);
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 1e 08 	call	0x103c	; 0x103c <DIO_setpinvalue>
}
     f2e:	08 95       	ret

00000f30 <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZE APPLICATION MODULES **/
     f30:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_setentry(); /** SET THE ENTRY DATA **/
     f34:	0e 94 76 00 	call	0xec	; 0xec <APP_setentry>
	
	
    while (1) 
    {
		
		APP_start(); /** SUPER LOOP **/	
     f38:	0e 94 0d 01 	call	0x21a	; 0x21a <APP_start>
     f3c:	fd cf       	rjmp	.-6      	; 0xf38 <main+0x8>

00000f3e <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
     f3e:	44 23       	and	r20, r20
     f40:	19 f0       	breq	.+6      	; 0xf48 <DIO_setpindir+0xa>
     f42:	41 30       	cpi	r20, 0x01	; 1
     f44:	e9 f1       	breq	.+122    	; 0xfc0 <DIO_setpindir+0x82>
     f46:	74 c0       	rjmp	.+232    	; 0x1030 <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	99 f0       	breq	.+38     	; 0xf72 <DIO_setpindir+0x34>
     f4c:	28 f0       	brcs	.+10     	; 0xf58 <DIO_setpindir+0x1a>
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	e9 f0       	breq	.+58     	; 0xf8c <DIO_setpindir+0x4e>
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	41 f1       	breq	.+80     	; 0xfa6 <DIO_setpindir+0x68>
     f56:	6e c0       	rjmp	.+220    	; 0x1034 <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     f58:	2a b3       	in	r18, 0x1a	; 26
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_setpindir+0x26>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	6a 95       	dec	r22
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_setpindir+0x22>
     f68:	80 95       	com	r24
     f6a:	82 23       	and	r24, r18
     f6c:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f6e:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
     f70:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     f72:	27 b3       	in	r18, 0x17	; 23
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_setpindir+0x40>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	6a 95       	dec	r22
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_setpindir+0x3c>
     f82:	80 95       	com	r24
     f84:	82 23       	and	r24, r18
     f86:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f88:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
     f8a:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     f8c:	24 b3       	in	r18, 0x14	; 20
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_setpindir+0x5a>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	6a 95       	dec	r22
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_setpindir+0x56>
     f9c:	80 95       	com	r24
     f9e:	82 23       	and	r24, r18
     fa0:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     fa2:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
     fa4:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     fa6:	21 b3       	in	r18, 0x11	; 17
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_setpindir+0x74>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	6a 95       	dec	r22
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_setpindir+0x70>
     fb6:	80 95       	com	r24
     fb8:	82 23       	and	r24, r18
     fba:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     fbc:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
     fbe:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	91 f0       	breq	.+36     	; 0xfe8 <DIO_setpindir+0xaa>
     fc4:	28 f0       	brcs	.+10     	; 0xfd0 <DIO_setpindir+0x92>
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	d9 f0       	breq	.+54     	; 0x1000 <DIO_setpindir+0xc2>
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	29 f1       	breq	.+74     	; 0x1018 <DIO_setpindir+0xda>
     fce:	34 c0       	rjmp	.+104    	; 0x1038 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     fd0:	2a b3       	in	r18, 0x1a	; 26
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_setpindir+0x9e>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	6a 95       	dec	r22
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_setpindir+0x9a>
     fe0:	82 2b       	or	r24, r18
     fe2:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     fe4:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     fe6:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     fe8:	27 b3       	in	r18, 0x17	; 23
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_setpindir+0xb6>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	6a 95       	dec	r22
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_setpindir+0xb2>
     ff8:	82 2b       	or	r24, r18
     ffa:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     ffc:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     ffe:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
    1000:	24 b3       	in	r18, 0x14	; 20
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_setpindir+0xce>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	6a 95       	dec	r22
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_setpindir+0xca>
    1010:	82 2b       	or	r24, r18
    1012:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
    1014:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
    1016:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
    1018:	21 b3       	in	r18, 0x11	; 17
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_setpindir+0xe6>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	6a 95       	dec	r22
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_setpindir+0xe2>
    1028:	82 2b       	or	r24, r18
    102a:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
    102c:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
    102e:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
    1038:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
    103a:	08 95       	ret

0000103c <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
    103c:	44 23       	and	r20, r20
    103e:	19 f0       	breq	.+6      	; 0x1046 <DIO_setpinvalue+0xa>
    1040:	41 30       	cpi	r20, 0x01	; 1
    1042:	e9 f1       	breq	.+122    	; 0x10be <DIO_setpinvalue+0x82>
    1044:	74 c0       	rjmp	.+232    	; 0x112e <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	99 f0       	breq	.+38     	; 0x1070 <DIO_setpinvalue+0x34>
    104a:	28 f0       	brcs	.+10     	; 0x1056 <DIO_setpinvalue+0x1a>
    104c:	82 30       	cpi	r24, 0x02	; 2
    104e:	e9 f0       	breq	.+58     	; 0x108a <DIO_setpinvalue+0x4e>
    1050:	83 30       	cpi	r24, 0x03	; 3
    1052:	41 f1       	breq	.+80     	; 0x10a4 <DIO_setpinvalue+0x68>
    1054:	6e c0       	rjmp	.+220    	; 0x1132 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    1056:	2b b3       	in	r18, 0x1b	; 27
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_setpinvalue+0x26>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	6a 95       	dec	r22
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_setpinvalue+0x22>
    1066:	80 95       	com	r24
    1068:	82 23       	and	r24, r18
    106a:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    106c:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    106e:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    1070:	28 b3       	in	r18, 0x18	; 24
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_setpinvalue+0x40>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	6a 95       	dec	r22
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_setpinvalue+0x3c>
    1080:	80 95       	com	r24
    1082:	82 23       	and	r24, r18
    1084:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1086:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    1088:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    108a:	25 b3       	in	r18, 0x15	; 21
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_setpinvalue+0x5a>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	6a 95       	dec	r22
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_setpinvalue+0x56>
    109a:	80 95       	com	r24
    109c:	82 23       	and	r24, r18
    109e:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10a0:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    10a2:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    10a4:	22 b3       	in	r18, 0x12	; 18
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_setpinvalue+0x74>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	6a 95       	dec	r22
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_setpinvalue+0x70>
    10b4:	80 95       	com	r24
    10b6:	82 23       	and	r24, r18
    10b8:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10ba:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    10bc:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	91 f0       	breq	.+36     	; 0x10e6 <DIO_setpinvalue+0xaa>
    10c2:	28 f0       	brcs	.+10     	; 0x10ce <DIO_setpinvalue+0x92>
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	d9 f0       	breq	.+54     	; 0x10fe <DIO_setpinvalue+0xc2>
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	29 f1       	breq	.+74     	; 0x1116 <DIO_setpinvalue+0xda>
    10cc:	34 c0       	rjmp	.+104    	; 0x1136 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    10ce:	2b b3       	in	r18, 0x1b	; 27
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_setpinvalue+0x9e>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	6a 95       	dec	r22
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_setpinvalue+0x9a>
    10de:	82 2b       	or	r24, r18
    10e0:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10e2:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    10e4:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    10e6:	28 b3       	in	r18, 0x18	; 24
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_setpinvalue+0xb6>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	6a 95       	dec	r22
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_setpinvalue+0xb2>
    10f6:	82 2b       	or	r24, r18
    10f8:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10fa:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    10fc:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    10fe:	25 b3       	in	r18, 0x15	; 21
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_setpinvalue+0xce>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	6a 95       	dec	r22
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_setpinvalue+0xca>
    110e:	82 2b       	or	r24, r18
    1110:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1112:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1114:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1116:	22 b3       	in	r18, 0x12	; 18
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <DIO_setpinvalue+0xe6>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	6a 95       	dec	r22
    1124:	e2 f7       	brpl	.-8      	; 0x111e <DIO_setpinvalue+0xe2>
    1126:	82 2b       	or	r24, r18
    1128:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    112a:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    112c:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    1136:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
    1138:	08 95       	ret

0000113a <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	99 f0       	breq	.+38     	; 0x1164 <DIO_readpin+0x2a>
    113e:	28 f0       	brcs	.+10     	; 0x114a <DIO_readpin+0x10>
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	e9 f0       	breq	.+58     	; 0x117e <DIO_readpin+0x44>
    1144:	83 30       	cpi	r24, 0x03	; 3
    1146:	41 f1       	breq	.+80     	; 0x1198 <DIO_readpin+0x5e>
    1148:	34 c0       	rjmp	.+104    	; 0x11b2 <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    114a:	89 b3       	in	r24, 0x19	; 25
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_readpin+0x1a>
    1150:	95 95       	asr	r25
    1152:	87 95       	ror	r24
    1154:	6a 95       	dec	r22
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_readpin+0x16>
    1158:	81 70       	andi	r24, 0x01	; 1
    115a:	89 bb       	out	0x19, r24	; 25
    115c:	fa 01       	movw	r30, r20
    115e:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1160:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    1162:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    1164:	86 b3       	in	r24, 0x16	; 22
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_readpin+0x34>
    116a:	95 95       	asr	r25
    116c:	87 95       	ror	r24
    116e:	6a 95       	dec	r22
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_readpin+0x30>
    1172:	81 70       	andi	r24, 0x01	; 1
    1174:	86 bb       	out	0x16, r24	; 22
    1176:	fa 01       	movw	r30, r20
    1178:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    117a:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    117c:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    117e:	83 b3       	in	r24, 0x13	; 19
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_readpin+0x4e>
    1184:	95 95       	asr	r25
    1186:	87 95       	ror	r24
    1188:	6a 95       	dec	r22
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_readpin+0x4a>
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	83 bb       	out	0x13, r24	; 19
    1190:	fa 01       	movw	r30, r20
    1192:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1194:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    1196:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    1198:	80 b3       	in	r24, 0x10	; 16
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_readpin+0x68>
    119e:	95 95       	asr	r25
    11a0:	87 95       	ror	r24
    11a2:	6a 95       	dec	r22
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_readpin+0x64>
    11a6:	81 70       	andi	r24, 0x01	; 1
    11a8:	80 bb       	out	0x10, r24	; 16
    11aa:	fa 01       	movw	r30, r20
    11ac:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    11ae:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    11b0:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
    11b2:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
    11b4:	08 95       	ret

000011b6 <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 f0       	breq	.+36     	; 0x11de <DIO_togglepin+0x28>
    11ba:	28 f0       	brcs	.+10     	; 0x11c6 <DIO_togglepin+0x10>
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	d9 f0       	breq	.+54     	; 0x11f6 <DIO_togglepin+0x40>
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	29 f1       	breq	.+74     	; 0x120e <DIO_togglepin+0x58>
    11c4:	30 c0       	rjmp	.+96     	; 0x1226 <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
    11c6:	2b b3       	in	r18, 0x1b	; 27
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <DIO_togglepin+0x1c>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	6a 95       	dec	r22
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <DIO_togglepin+0x18>
    11d6:	82 27       	eor	r24, r18
    11d8:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    11da:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
    11dc:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
    11de:	28 b3       	in	r18, 0x18	; 24
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_togglepin+0x34>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	6a 95       	dec	r22
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_togglepin+0x30>
    11ee:	82 27       	eor	r24, r18
    11f0:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    11f2:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
    11f4:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
    11f6:	25 b3       	in	r18, 0x15	; 21
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_togglepin+0x4c>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	6a 95       	dec	r22
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_togglepin+0x48>
    1206:	82 27       	eor	r24, r18
    1208:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    120a:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
    120c:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
    120e:	22 b3       	in	r18, 0x12	; 18
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_togglepin+0x64>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	6a 95       	dec	r22
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_togglepin+0x60>
    121e:	82 27       	eor	r24, r18
    1220:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1222:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
    1224:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
    1226:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
    1228:	08 95       	ret

0000122a <SET_GLOBALINTERRUPT>:
/** RETURNS    : VOID                                   */
/********************************************************/
void SET_GLOBALINTERRUPT(void)
{
	#if GLOBAL_INTERRUPT_STATE  ==  GLOBAL_INTERRUPT_STATE_ENABLE /** ENABLE GLOBAL INTERRUPTS **/
	  set_bit(SREG , 7);
    122a:	8f b7       	in	r24, 0x3f	; 63
    122c:	80 68       	ori	r24, 0x80	; 128
    122e:	8f bf       	out	0x3f, r24	; 63
    1230:	08 95       	ret

00001232 <INT0_init>:
/** ARGUMENTS  : VOID                                   */
/** RETURNS    : VOID                                   */
/********************************************************/
void INT0_init(void)
{
	SET_GLOBALINTERRUPT(); /** ENABLE GLOBAL INTERRUPTS */
    1232:	0e 94 15 09 	call	0x122a	; 0x122a <SET_GLOBALINTERRUPT>
	  clear_bit(MCUCR , 0);
	  clear_bit(MCUCR , 1);
	  
	#elif EXTERNAL_INT0_TRIGGER  == INT_TRIGGER_ANY_CHANGE
	
	  set_bit(MCUCR , 0);
    1236:	85 b7       	in	r24, 0x35	; 53
    1238:	81 60       	ori	r24, 0x01	; 1
    123a:	85 bf       	out	0x35, r24	; 53
	  clear_bit(MCUCR ,1);
    123c:	85 b7       	in	r24, 0x35	; 53
    123e:	8d 7f       	andi	r24, 0xFD	; 253
    1240:	85 bf       	out	0x35, r24	; 53
	  
	#endif
	
	/* Enable INT0 */
	set_bit(GICR , 6);	
    1242:	8b b7       	in	r24, 0x3b	; 59
    1244:	80 64       	ori	r24, 0x40	; 64
    1246:	8b bf       	out	0x3b, r24	; 59
    1248:	08 95       	ret

0000124a <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
    124a:	83 b7       	in	r24, 0x33	; 51
    124c:	8f 77       	andi	r24, 0x7F	; 127
    124e:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
    1250:	83 b7       	in	r24, 0x33	; 51
    1252:	8f 7b       	andi	r24, 0xBF	; 191
    1254:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
    1256:	83 b7       	in	r24, 0x33	; 51
    1258:	87 7f       	andi	r24, 0xF7	; 247
    125a:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
    125c:	83 b7       	in	r24, 0x33	; 51
    125e:	8f 7e       	andi	r24, 0xEF	; 239
    1260:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
    1262:	83 b7       	in	r24, 0x33	; 51
    1264:	8f 7d       	andi	r24, 0xDF	; 223
    1266:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	08 95       	ret

0000126c <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
    126c:	83 b7       	in	r24, 0x33	; 51
    126e:	81 60       	ori	r24, 0x01	; 1
    1270:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
    1272:	83 b7       	in	r24, 0x33	; 51
    1274:	8d 7f       	andi	r24, 0xFD	; 253
    1276:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
    1278:	83 b7       	in	r24, 0x33	; 51
    127a:	8b 7f       	andi	r24, 0xFB	; 251
    127c:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	08 95       	ret

00001282 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
    1282:	83 b7       	in	r24, 0x33	; 51
    1284:	8e 7f       	andi	r24, 0xFE	; 254
    1286:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
    1288:	83 b7       	in	r24, 0x33	; 51
    128a:	8d 7f       	andi	r24, 0xFD	; 253
    128c:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
    128e:	83 b7       	in	r24, 0x33	; 51
    1290:	8b 7f       	andi	r24, 0xFB	; 251
    1292:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	08 95       	ret

00001298 <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    1298:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__floatunsisf>
    129c:	2f e6       	ldi	r18, 0x6F	; 111
    129e:	32 e1       	ldi	r19, 0x12	; 18
    12a0:	43 e0       	ldi	r20, 0x03	; 3
    12a2:	5d e3       	ldi	r21, 0x3D	; 61
    12a4:	0e 94 33 0a 	call	0x1466	; 0x1466 <__divsf3>
    12a8:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fixunssfsi>
    12ac:	60 93 ab 00 	sts	0x00AB, r22	; 0x8000ab <u32_gs_tmr0nuofovs>
    12b0:	70 93 ac 00 	sts	0x00AC, r23	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    12b4:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    12b8:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
    12bc:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
    12be:	0e 94 36 09 	call	0x126c	; 0x126c <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    12c8:	0a c0       	rjmp	.+20     	; 0x12de <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
    12ca:	08 b6       	in	r0, 0x38	; 56
    12cc:	00 fe       	sbrs	r0, 0
    12ce:	fd cf       	rjmp	.-6      	; 0x12ca <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
    12d0:	88 b7       	in	r24, 0x38	; 56
    12d2:	81 60       	ori	r24, 0x01	; 1
    12d4:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
    12d6:	4f 5f       	subi	r20, 0xFF	; 255
    12d8:	5f 4f       	sbci	r21, 0xFF	; 255
    12da:	6f 4f       	sbci	r22, 0xFF	; 255
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    12de:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <u32_gs_tmr0nuofovs>
    12e2:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    12e6:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    12ea:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
    12ee:	48 17       	cp	r20, r24
    12f0:	59 07       	cpc	r21, r25
    12f2:	6a 07       	cpc	r22, r26
    12f4:	7b 07       	cpc	r23, r27
    12f6:	48 f3       	brcs	.-46     	; 0x12ca <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
    12f8:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <u32_gs_tmr0nuofovs>
    12fc:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    1300:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    1304:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
    1308:	0e 94 41 09 	call	0x1282	; 0x1282 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	08 95       	ret

00001310 <TMR0_delaymicros>:
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	u32_gs_tmr0nuofovs = (u32_a_delaymicros / 32);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	68 94       	set
    1316:	14 f8       	bld	r1, 4
    1318:	b6 95       	lsr	r27
    131a:	a7 95       	ror	r26
    131c:	97 95       	ror	r25
    131e:	87 95       	ror	r24
    1320:	16 94       	lsr	r1
    1322:	d1 f7       	brne	.-12     	; 0x1318 <TMR0_delaymicros+0x8>
    1324:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <u32_gs_tmr0nuofovs>
    1328:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    132c:	a0 93 ad 00 	sts	0x00AD, r26	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    1330:	b0 93 ae 00 	sts	0x00AE, r27	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
	
	TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
    1334:	12 be       	out	0x32, r1	; 50
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
    1336:	0e 94 36 09 	call	0x126c	; 0x126c <TMR0_start>
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delaymicros(uint32_t u32_a_delaymicros)
{
	uint32_t u32_a_overflowcounter = 0 ;
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    1340:	0a c0       	rjmp	.+20     	; 0x1356 <TMR0_delaymicros+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
    1342:	08 b6       	in	r0, 0x38	; 56
    1344:	00 fe       	sbrs	r0, 0
    1346:	fd cf       	rjmp	.-6      	; 0x1342 <TMR0_delaymicros+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
    1348:	88 b7       	in	r24, 0x38	; 56
    134a:	81 60       	ori	r24, 0x01	; 1
    134c:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
    134e:	4f 5f       	subi	r20, 0xFF	; 255
    1350:	5f 4f       	sbci	r21, 0xFF	; 255
    1352:	6f 4f       	sbci	r22, 0xFF	; 255
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    1356:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <u32_gs_tmr0nuofovs>
    135a:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    135e:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    1362:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
    1366:	48 17       	cp	r20, r24
    1368:	59 07       	cpc	r21, r25
    136a:	6a 07       	cpc	r22, r26
    136c:	7b 07       	cpc	r23, r27
    136e:	48 f3       	brcs	.-46     	; 0x1342 <TMR0_delaymicros+0x32>
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_a_overflowcounter = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop(); /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
    1370:	0e 94 41 09 	call	0x1282	; 0x1282 <TMR0_stop>
	
	return en_a_delaystatus ; 
}
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	08 95       	ret

00001378 <TMR1_init>:
	 
	#elif TMR1_CLK_SOURCE == TMR1_INTERNAL_CLK_SOURCE
	
	 #if TMR1_MODE == NORMAL_MODE
	  
	  clear_bit(TCCR1A , 0);
    1378:	8f b5       	in	r24, 0x2f	; 47
    137a:	8e 7f       	andi	r24, 0xFE	; 254
    137c:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1A , 1);
    137e:	8f b5       	in	r24, 0x2f	; 47
    1380:	8d 7f       	andi	r24, 0xFD	; 253
    1382:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1B , 3);
    1384:	8e b5       	in	r24, 0x2e	; 46
    1386:	87 7f       	andi	r24, 0xF7	; 247
    1388:	8e bd       	out	0x2e, r24	; 46
	  clear_bit(TCCR1B , 4);
    138a:	8e b5       	in	r24, 0x2e	; 46
    138c:	8f 7e       	andi	r24, 0xEF	; 239
    138e:	8e bd       	out	0x2e, r24	; 46
	  
	  /* NON PWM MODE */
	  set_bit(TCCR1A , 2);
    1390:	8f b5       	in	r24, 0x2f	; 47
    1392:	84 60       	ori	r24, 0x04	; 4
    1394:	8f bd       	out	0x2f, r24	; 47
	  set_bit(TCCR1A , 3);
    1396:	8f b5       	in	r24, 0x2f	; 47
    1398:	88 60       	ori	r24, 0x08	; 8
    139a:	8f bd       	out	0x2f, r24	; 47
	  
	  /* ENABLE INTERRUPT */
	  set_bit(SREG , 7);   /** ENABLE GLOBAL INTTERUPTS **/
    139c:	8f b7       	in	r24, 0x3f	; 63
    139e:	80 68       	ori	r24, 0x80	; 128
    13a0:	8f bf       	out	0x3f, r24	; 63
	  set_bit(TIMSK , 2);  /** NABLE TMR1 INTERRUPT **/
    13a2:	89 b7       	in	r24, 0x39	; 57
    13a4:	9a b7       	in	r25, 0x3a	; 58
    13a6:	84 60       	ori	r24, 0x04	; 4
    13a8:	9a bf       	out	0x3a, r25	; 58
    13aa:	89 bf       	out	0x39, r24	; 57
	 /* SET THE OC1B BIT AS OUTPUT */
	 DIO_setpindir(DIO_PORTD , DIO_PIN4 , DIO_PIN_OUTPUT);
	#endif
	#endif
#endif
}
    13ac:	08 95       	ret

000013ae <TMR1_start>:
/******************************************************************************/
TMR1_start_status TMR1_start(void)
{
  TMR1_start_status en_a_startstatus = TMR1_NOT_VALID_START ; /** VARIABLE TO HOLD THE RETURN STATUS **/
  
  TCNT1 = 0 ;   /** SET THE INITIAL VALUE IN TCNT1 REGISTER **/
    13ae:	1d bc       	out	0x2d, r1	; 45
    13b0:	1c bc       	out	0x2c, r1	; 44

         en_a_startstatus = TMR1_VALID_START ; /** STATUS IS VALID **/
	 
	 #elif TMR1_PRESCALLER_VALUE == NO_PRESCALER
	 
	 set_bit(TCCR1B , 0);
    13b2:	8e b5       	in	r24, 0x2e	; 46
    13b4:	81 60       	ori	r24, 0x01	; 1
    13b6:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 1);
    13b8:	8e b5       	in	r24, 0x2e	; 46
    13ba:	8d 7f       	andi	r24, 0xFD	; 253
    13bc:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 2);
    13be:	8e b5       	in	r24, 0x2e	; 46
    13c0:	8b 7f       	andi	r24, 0xFB	; 251
    13c2:	8e bd       	out	0x2e, r24	; 46

	 #endif
	#endif

  return en_a_startstatus ; /** RETURN THE FINAL STATUS **/
}
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	08 95       	ret

000013c8 <TMR1_stop>:
TMR1_stop_status TMR1_stop(void)
{
     TMR1_stop_status en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** VARIABLE TO HOLD THE RETURN STATUS  **/
	
     /* TURN THE CLOCK OFF */
     clear_bit(TCCR1B , 0);
    13c8:	8e b5       	in	r24, 0x2e	; 46
    13ca:	8e 7f       	andi	r24, 0xFE	; 254
    13cc:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 1);
    13ce:	8e b5       	in	r24, 0x2e	; 46
    13d0:	8d 7f       	andi	r24, 0xFD	; 253
    13d2:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 2);
    13d4:	8e b5       	in	r24, 0x2e	; 46
    13d6:	8b 7f       	andi	r24, 0xFB	; 251
    13d8:	8e bd       	out	0x2e, r24	; 46

     en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** UPDATE THE STOP STATUS **/

     return en_a_stopstatus ; /** RETURN THE FINAL STATUS **/

}
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	08 95       	ret

000013de <TMR1_getvalue>:
/** ARGUMENTS  : u16_a_value                                                 **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR1_getvalue(uint16t * u16_a_value)
{
	*u16_a_value = TCNT1 ; /** GET THE VALUE FROM TIMER1 COUNTING REGISTER **/
    13de:	2c b5       	in	r18, 0x2c	; 44
    13e0:	3d b5       	in	r19, 0x2d	; 45
    13e2:	fc 01       	movw	r30, r24
    13e4:	31 83       	std	Z+1, r19	; 0x01
    13e6:	20 83       	st	Z, r18
    13e8:	08 95       	ret

000013ea <TMR1_setcounterval>:
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
void TMR1_setcounterval(uint16t u16_a_tmrval)
{
	TCNT1 = u16_a_tmrval ; /** SET THE PASSED VALUE IN TIMER COUNTING REGISTER **/
    13ea:	9d bd       	out	0x2d, r25	; 45
    13ec:	8c bd       	out	0x2c, r24	; 44
    13ee:	08 95       	ret

000013f0 <TMR2_init>:
	/* TIMER MODE OF TMR0 */
	#elif TIMER2_CLK_SRC == INTERNAL_CLK_SRC
	
	#if TIMER2_MODE == TMR2_NORMAL_MODE
	
	clear_bit(TCCR2 , 7);
    13f0:	85 b5       	in	r24, 0x25	; 37
    13f2:	8f 77       	andi	r24, 0x7F	; 127
    13f4:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 6);
    13f6:	85 b5       	in	r24, 0x25	; 37
    13f8:	8f 7b       	andi	r24, 0xBF	; 191
    13fa:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 3);
    13fc:	85 b5       	in	r24, 0x25	; 37
    13fe:	87 7f       	andi	r24, 0xF7	; 247
    1400:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 4);
    1402:	85 b5       	in	r24, 0x25	; 37
    1404:	8f 7e       	andi	r24, 0xEF	; 239
    1406:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 5);
    1408:	85 b5       	in	r24, 0x25	; 37
    140a:	8f 7d       	andi	r24, 0xDF	; 223
    140c:	85 bd       	out	0x25, r24	; 37
	
	/* ENABLE INTERRUPT */
	set_bit(SREG , 7);
    140e:	8f b7       	in	r24, 0x3f	; 63
    1410:	80 68       	ori	r24, 0x80	; 128
    1412:	8f bf       	out	0x3f, r24	; 63
	set_bit(TIMSK , 6);
    1414:	89 b7       	in	r24, 0x39	; 57
    1416:	80 64       	ori	r24, 0x40	; 64
    1418:	89 bf       	out	0x39, r24	; 57
	#endif
	#endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	08 95       	ret

0000141e <TMR2_start>:
	
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR2 , 0);
    141e:	85 b5       	in	r24, 0x25	; 37
    1420:	81 60       	ori	r24, 0x01	; 1
    1422:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    1424:	85 b5       	in	r24, 0x25	; 37
    1426:	8d 7f       	andi	r24, 0xFD	; 253
    1428:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    142a:	85 b5       	in	r24, 0x25	; 37
    142c:	8b 7f       	andi	r24, 0xFB	; 251
    142e:	85 bd       	out	0x25, r24	; 37
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	08 95       	ret

00001434 <TMR2_stop>:
TMR2_stop_error TMR2_stop(void)
{
	TMR2_stop_error en_a_stopStatus = TMR2_VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR2 , 0);
    1434:	85 b5       	in	r24, 0x25	; 37
    1436:	8e 7f       	andi	r24, 0xFE	; 254
    1438:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    143a:	85 b5       	in	r24, 0x25	; 37
    143c:	8d 7f       	andi	r24, 0xFD	; 253
    143e:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    1440:	85 b5       	in	r24, 0x25	; 37
    1442:	8b 7f       	andi	r24, 0xFB	; 251
    1444:	85 bd       	out	0x25, r24	; 37
	
	en_a_stopStatus = TMR2_VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	08 95       	ret

0000144a <TMR2_getovs>:
	u32_a_ovs = (u16_a_delay / 0.256);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
	

	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	u32_a_ovs = (u16_a_delay / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    144a:	bc 01       	movw	r22, r24
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <__floatunsisf>
    1454:	2f e6       	ldi	r18, 0x6F	; 111
    1456:	32 e1       	ldi	r19, 0x12	; 18
    1458:	43 e0       	ldi	r20, 0x03	; 3
    145a:	5d e3       	ldi	r21, 0x3D	; 61
    145c:	0e 94 33 0a 	call	0x1466	; 0x1466 <__divsf3>
    1460:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fixunssfsi>
	
	#endif
	
	return u32_a_ovs ;  /** RETURN THE CALCULATED NUMBER OF OVERFLOWS **/
}
    1464:	08 95       	ret

00001466 <__divsf3>:
    1466:	0e 94 47 0a 	call	0x148e	; 0x148e <__divsf3x>
    146a:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__fp_round>
    146e:	0e 94 21 0b 	call	0x1642	; 0x1642 <__fp_pscB>
    1472:	58 f0       	brcs	.+22     	; 0x148a <__divsf3+0x24>
    1474:	0e 94 1a 0b 	call	0x1634	; 0x1634 <__fp_pscA>
    1478:	40 f0       	brcs	.+16     	; 0x148a <__divsf3+0x24>
    147a:	29 f4       	brne	.+10     	; 0x1486 <__divsf3+0x20>
    147c:	5f 3f       	cpi	r21, 0xFF	; 255
    147e:	29 f0       	breq	.+10     	; 0x148a <__divsf3+0x24>
    1480:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__fp_inf>
    1484:	51 11       	cpse	r21, r1
    1486:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__fp_szero>
    148a:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__fp_nan>

0000148e <__divsf3x>:
    148e:	0e 94 39 0b 	call	0x1672	; 0x1672 <__fp_split3>
    1492:	68 f3       	brcs	.-38     	; 0x146e <__divsf3+0x8>

00001494 <__divsf3_pse>:
    1494:	99 23       	and	r25, r25
    1496:	b1 f3       	breq	.-20     	; 0x1484 <__divsf3+0x1e>
    1498:	55 23       	and	r21, r21
    149a:	91 f3       	breq	.-28     	; 0x1480 <__divsf3+0x1a>
    149c:	95 1b       	sub	r25, r21
    149e:	55 0b       	sbc	r21, r21
    14a0:	bb 27       	eor	r27, r27
    14a2:	aa 27       	eor	r26, r26
    14a4:	62 17       	cp	r22, r18
    14a6:	73 07       	cpc	r23, r19
    14a8:	84 07       	cpc	r24, r20
    14aa:	38 f0       	brcs	.+14     	; 0x14ba <__divsf3_pse+0x26>
    14ac:	9f 5f       	subi	r25, 0xFF	; 255
    14ae:	5f 4f       	sbci	r21, 0xFF	; 255
    14b0:	22 0f       	add	r18, r18
    14b2:	33 1f       	adc	r19, r19
    14b4:	44 1f       	adc	r20, r20
    14b6:	aa 1f       	adc	r26, r26
    14b8:	a9 f3       	breq	.-22     	; 0x14a4 <__divsf3_pse+0x10>
    14ba:	35 d0       	rcall	.+106    	; 0x1526 <__divsf3_pse+0x92>
    14bc:	0e 2e       	mov	r0, r30
    14be:	3a f0       	brmi	.+14     	; 0x14ce <__divsf3_pse+0x3a>
    14c0:	e0 e8       	ldi	r30, 0x80	; 128
    14c2:	32 d0       	rcall	.+100    	; 0x1528 <__divsf3_pse+0x94>
    14c4:	91 50       	subi	r25, 0x01	; 1
    14c6:	50 40       	sbci	r21, 0x00	; 0
    14c8:	e6 95       	lsr	r30
    14ca:	00 1c       	adc	r0, r0
    14cc:	ca f7       	brpl	.-14     	; 0x14c0 <__divsf3_pse+0x2c>
    14ce:	2b d0       	rcall	.+86     	; 0x1526 <__divsf3_pse+0x92>
    14d0:	fe 2f       	mov	r31, r30
    14d2:	29 d0       	rcall	.+82     	; 0x1526 <__divsf3_pse+0x92>
    14d4:	66 0f       	add	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	88 1f       	adc	r24, r24
    14da:	bb 1f       	adc	r27, r27
    14dc:	26 17       	cp	r18, r22
    14de:	37 07       	cpc	r19, r23
    14e0:	48 07       	cpc	r20, r24
    14e2:	ab 07       	cpc	r26, r27
    14e4:	b0 e8       	ldi	r27, 0x80	; 128
    14e6:	09 f0       	breq	.+2      	; 0x14ea <__divsf3_pse+0x56>
    14e8:	bb 0b       	sbc	r27, r27
    14ea:	80 2d       	mov	r24, r0
    14ec:	bf 01       	movw	r22, r30
    14ee:	ff 27       	eor	r31, r31
    14f0:	93 58       	subi	r25, 0x83	; 131
    14f2:	5f 4f       	sbci	r21, 0xFF	; 255
    14f4:	3a f0       	brmi	.+14     	; 0x1504 <__divsf3_pse+0x70>
    14f6:	9e 3f       	cpi	r25, 0xFE	; 254
    14f8:	51 05       	cpc	r21, r1
    14fa:	78 f0       	brcs	.+30     	; 0x151a <__divsf3_pse+0x86>
    14fc:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__fp_inf>
    1500:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__fp_szero>
    1504:	5f 3f       	cpi	r21, 0xFF	; 255
    1506:	e4 f3       	brlt	.-8      	; 0x1500 <__divsf3_pse+0x6c>
    1508:	98 3e       	cpi	r25, 0xE8	; 232
    150a:	d4 f3       	brlt	.-12     	; 0x1500 <__divsf3_pse+0x6c>
    150c:	86 95       	lsr	r24
    150e:	77 95       	ror	r23
    1510:	67 95       	ror	r22
    1512:	b7 95       	ror	r27
    1514:	f7 95       	ror	r31
    1516:	9f 5f       	subi	r25, 0xFF	; 255
    1518:	c9 f7       	brne	.-14     	; 0x150c <__divsf3_pse+0x78>
    151a:	88 0f       	add	r24, r24
    151c:	91 1d       	adc	r25, r1
    151e:	96 95       	lsr	r25
    1520:	87 95       	ror	r24
    1522:	97 f9       	bld	r25, 7
    1524:	08 95       	ret
    1526:	e1 e0       	ldi	r30, 0x01	; 1
    1528:	66 0f       	add	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	88 1f       	adc	r24, r24
    152e:	bb 1f       	adc	r27, r27
    1530:	62 17       	cp	r22, r18
    1532:	73 07       	cpc	r23, r19
    1534:	84 07       	cpc	r24, r20
    1536:	ba 07       	cpc	r27, r26
    1538:	20 f0       	brcs	.+8      	; 0x1542 <__divsf3_pse+0xae>
    153a:	62 1b       	sub	r22, r18
    153c:	73 0b       	sbc	r23, r19
    153e:	84 0b       	sbc	r24, r20
    1540:	ba 0b       	sbc	r27, r26
    1542:	ee 1f       	adc	r30, r30
    1544:	88 f7       	brcc	.-30     	; 0x1528 <__divsf3_pse+0x94>
    1546:	e0 95       	com	r30
    1548:	08 95       	ret

0000154a <__fixunssfsi>:
    154a:	0e 94 41 0b 	call	0x1682	; 0x1682 <__fp_splitA>
    154e:	88 f0       	brcs	.+34     	; 0x1572 <__fixunssfsi+0x28>
    1550:	9f 57       	subi	r25, 0x7F	; 127
    1552:	98 f0       	brcs	.+38     	; 0x157a <__fixunssfsi+0x30>
    1554:	b9 2f       	mov	r27, r25
    1556:	99 27       	eor	r25, r25
    1558:	b7 51       	subi	r27, 0x17	; 23
    155a:	b0 f0       	brcs	.+44     	; 0x1588 <__fixunssfsi+0x3e>
    155c:	e1 f0       	breq	.+56     	; 0x1596 <__fixunssfsi+0x4c>
    155e:	66 0f       	add	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	88 1f       	adc	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	1a f0       	brmi	.+6      	; 0x156e <__fixunssfsi+0x24>
    1568:	ba 95       	dec	r27
    156a:	c9 f7       	brne	.-14     	; 0x155e <__fixunssfsi+0x14>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <__fixunssfsi+0x4c>
    156e:	b1 30       	cpi	r27, 0x01	; 1
    1570:	91 f0       	breq	.+36     	; 0x1596 <__fixunssfsi+0x4c>
    1572:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <__fp_zero>
    1576:	b1 e0       	ldi	r27, 0x01	; 1
    1578:	08 95       	ret
    157a:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__fp_zero>
    157e:	67 2f       	mov	r22, r23
    1580:	78 2f       	mov	r23, r24
    1582:	88 27       	eor	r24, r24
    1584:	b8 5f       	subi	r27, 0xF8	; 248
    1586:	39 f0       	breq	.+14     	; 0x1596 <__fixunssfsi+0x4c>
    1588:	b9 3f       	cpi	r27, 0xF9	; 249
    158a:	cc f3       	brlt	.-14     	; 0x157e <__fixunssfsi+0x34>
    158c:	86 95       	lsr	r24
    158e:	77 95       	ror	r23
    1590:	67 95       	ror	r22
    1592:	b3 95       	inc	r27
    1594:	d9 f7       	brne	.-10     	; 0x158c <__fixunssfsi+0x42>
    1596:	3e f4       	brtc	.+14     	; 0x15a6 <__fixunssfsi+0x5c>
    1598:	90 95       	com	r25
    159a:	80 95       	com	r24
    159c:	70 95       	com	r23
    159e:	61 95       	neg	r22
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	8f 4f       	sbci	r24, 0xFF	; 255
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	08 95       	ret

000015a8 <__floatunsisf>:
    15a8:	e8 94       	clt
    15aa:	09 c0       	rjmp	.+18     	; 0x15be <__floatsisf+0x12>

000015ac <__floatsisf>:
    15ac:	97 fb       	bst	r25, 7
    15ae:	3e f4       	brtc	.+14     	; 0x15be <__floatsisf+0x12>
    15b0:	90 95       	com	r25
    15b2:	80 95       	com	r24
    15b4:	70 95       	com	r23
    15b6:	61 95       	neg	r22
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	8f 4f       	sbci	r24, 0xFF	; 255
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	99 23       	and	r25, r25
    15c0:	a9 f0       	breq	.+42     	; 0x15ec <__floatsisf+0x40>
    15c2:	f9 2f       	mov	r31, r25
    15c4:	96 e9       	ldi	r25, 0x96	; 150
    15c6:	bb 27       	eor	r27, r27
    15c8:	93 95       	inc	r25
    15ca:	f6 95       	lsr	r31
    15cc:	87 95       	ror	r24
    15ce:	77 95       	ror	r23
    15d0:	67 95       	ror	r22
    15d2:	b7 95       	ror	r27
    15d4:	f1 11       	cpse	r31, r1
    15d6:	f8 cf       	rjmp	.-16     	; 0x15c8 <__floatsisf+0x1c>
    15d8:	fa f4       	brpl	.+62     	; 0x1618 <__floatsisf+0x6c>
    15da:	bb 0f       	add	r27, r27
    15dc:	11 f4       	brne	.+4      	; 0x15e2 <__floatsisf+0x36>
    15de:	60 ff       	sbrs	r22, 0
    15e0:	1b c0       	rjmp	.+54     	; 0x1618 <__floatsisf+0x6c>
    15e2:	6f 5f       	subi	r22, 0xFF	; 255
    15e4:	7f 4f       	sbci	r23, 0xFF	; 255
    15e6:	8f 4f       	sbci	r24, 0xFF	; 255
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	16 c0       	rjmp	.+44     	; 0x1618 <__floatsisf+0x6c>
    15ec:	88 23       	and	r24, r24
    15ee:	11 f0       	breq	.+4      	; 0x15f4 <__floatsisf+0x48>
    15f0:	96 e9       	ldi	r25, 0x96	; 150
    15f2:	11 c0       	rjmp	.+34     	; 0x1616 <__floatsisf+0x6a>
    15f4:	77 23       	and	r23, r23
    15f6:	21 f0       	breq	.+8      	; 0x1600 <__floatsisf+0x54>
    15f8:	9e e8       	ldi	r25, 0x8E	; 142
    15fa:	87 2f       	mov	r24, r23
    15fc:	76 2f       	mov	r23, r22
    15fe:	05 c0       	rjmp	.+10     	; 0x160a <__floatsisf+0x5e>
    1600:	66 23       	and	r22, r22
    1602:	71 f0       	breq	.+28     	; 0x1620 <__floatsisf+0x74>
    1604:	96 e8       	ldi	r25, 0x86	; 134
    1606:	86 2f       	mov	r24, r22
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	2a f0       	brmi	.+10     	; 0x1618 <__floatsisf+0x6c>
    160e:	9a 95       	dec	r25
    1610:	66 0f       	add	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	88 1f       	adc	r24, r24
    1616:	da f7       	brpl	.-10     	; 0x160e <__floatsisf+0x62>
    1618:	88 0f       	add	r24, r24
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	97 f9       	bld	r25, 7
    1620:	08 95       	ret

00001622 <__fp_inf>:
    1622:	97 f9       	bld	r25, 7
    1624:	9f 67       	ori	r25, 0x7F	; 127
    1626:	80 e8       	ldi	r24, 0x80	; 128
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	08 95       	ret

0000162e <__fp_nan>:
    162e:	9f ef       	ldi	r25, 0xFF	; 255
    1630:	80 ec       	ldi	r24, 0xC0	; 192
    1632:	08 95       	ret

00001634 <__fp_pscA>:
    1634:	00 24       	eor	r0, r0
    1636:	0a 94       	dec	r0
    1638:	16 16       	cp	r1, r22
    163a:	17 06       	cpc	r1, r23
    163c:	18 06       	cpc	r1, r24
    163e:	09 06       	cpc	r0, r25
    1640:	08 95       	ret

00001642 <__fp_pscB>:
    1642:	00 24       	eor	r0, r0
    1644:	0a 94       	dec	r0
    1646:	12 16       	cp	r1, r18
    1648:	13 06       	cpc	r1, r19
    164a:	14 06       	cpc	r1, r20
    164c:	05 06       	cpc	r0, r21
    164e:	08 95       	ret

00001650 <__fp_round>:
    1650:	09 2e       	mov	r0, r25
    1652:	03 94       	inc	r0
    1654:	00 0c       	add	r0, r0
    1656:	11 f4       	brne	.+4      	; 0x165c <__fp_round+0xc>
    1658:	88 23       	and	r24, r24
    165a:	52 f0       	brmi	.+20     	; 0x1670 <__fp_round+0x20>
    165c:	bb 0f       	add	r27, r27
    165e:	40 f4       	brcc	.+16     	; 0x1670 <__fp_round+0x20>
    1660:	bf 2b       	or	r27, r31
    1662:	11 f4       	brne	.+4      	; 0x1668 <__fp_round+0x18>
    1664:	60 ff       	sbrs	r22, 0
    1666:	04 c0       	rjmp	.+8      	; 0x1670 <__fp_round+0x20>
    1668:	6f 5f       	subi	r22, 0xFF	; 255
    166a:	7f 4f       	sbci	r23, 0xFF	; 255
    166c:	8f 4f       	sbci	r24, 0xFF	; 255
    166e:	9f 4f       	sbci	r25, 0xFF	; 255
    1670:	08 95       	ret

00001672 <__fp_split3>:
    1672:	57 fd       	sbrc	r21, 7
    1674:	90 58       	subi	r25, 0x80	; 128
    1676:	44 0f       	add	r20, r20
    1678:	55 1f       	adc	r21, r21
    167a:	59 f0       	breq	.+22     	; 0x1692 <__fp_splitA+0x10>
    167c:	5f 3f       	cpi	r21, 0xFF	; 255
    167e:	71 f0       	breq	.+28     	; 0x169c <__fp_splitA+0x1a>
    1680:	47 95       	ror	r20

00001682 <__fp_splitA>:
    1682:	88 0f       	add	r24, r24
    1684:	97 fb       	bst	r25, 7
    1686:	99 1f       	adc	r25, r25
    1688:	61 f0       	breq	.+24     	; 0x16a2 <__fp_splitA+0x20>
    168a:	9f 3f       	cpi	r25, 0xFF	; 255
    168c:	79 f0       	breq	.+30     	; 0x16ac <__fp_splitA+0x2a>
    168e:	87 95       	ror	r24
    1690:	08 95       	ret
    1692:	12 16       	cp	r1, r18
    1694:	13 06       	cpc	r1, r19
    1696:	14 06       	cpc	r1, r20
    1698:	55 1f       	adc	r21, r21
    169a:	f2 cf       	rjmp	.-28     	; 0x1680 <__fp_split3+0xe>
    169c:	46 95       	lsr	r20
    169e:	f1 df       	rcall	.-30     	; 0x1682 <__fp_splitA>
    16a0:	08 c0       	rjmp	.+16     	; 0x16b2 <__fp_splitA+0x30>
    16a2:	16 16       	cp	r1, r22
    16a4:	17 06       	cpc	r1, r23
    16a6:	18 06       	cpc	r1, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	f1 cf       	rjmp	.-30     	; 0x168e <__fp_splitA+0xc>
    16ac:	86 95       	lsr	r24
    16ae:	71 05       	cpc	r23, r1
    16b0:	61 05       	cpc	r22, r1
    16b2:	08 94       	sec
    16b4:	08 95       	ret

000016b6 <__fp_zero>:
    16b6:	e8 94       	clt

000016b8 <__fp_szero>:
    16b8:	bb 27       	eor	r27, r27
    16ba:	66 27       	eor	r22, r22
    16bc:	77 27       	eor	r23, r23
    16be:	cb 01       	movw	r24, r22
    16c0:	97 f9       	bld	r25, 7
    16c2:	08 95       	ret

000016c4 <__divmodsi4>:
    16c4:	05 2e       	mov	r0, r21
    16c6:	97 fb       	bst	r25, 7
    16c8:	1e f4       	brtc	.+6      	; 0x16d0 <__divmodsi4+0xc>
    16ca:	00 94       	com	r0
    16cc:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__negsi2>
    16d0:	57 fd       	sbrc	r21, 7
    16d2:	07 d0       	rcall	.+14     	; 0x16e2 <__divmodsi4_neg2>
    16d4:	0e 94 90 0b 	call	0x1720	; 0x1720 <__udivmodsi4>
    16d8:	07 fc       	sbrc	r0, 7
    16da:	03 d0       	rcall	.+6      	; 0x16e2 <__divmodsi4_neg2>
    16dc:	4e f4       	brtc	.+18     	; 0x16f0 <__divmodsi4_exit>
    16de:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__negsi2>

000016e2 <__divmodsi4_neg2>:
    16e2:	50 95       	com	r21
    16e4:	40 95       	com	r20
    16e6:	30 95       	com	r19
    16e8:	21 95       	neg	r18
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	4f 4f       	sbci	r20, 0xFF	; 255
    16ee:	5f 4f       	sbci	r21, 0xFF	; 255

000016f0 <__divmodsi4_exit>:
    16f0:	08 95       	ret

000016f2 <__negsi2>:
    16f2:	90 95       	com	r25
    16f4:	80 95       	com	r24
    16f6:	70 95       	com	r23
    16f8:	61 95       	neg	r22
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	8f 4f       	sbci	r24, 0xFF	; 255
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	08 95       	ret

00001702 <__umulhisi3>:
    1702:	a2 9f       	mul	r26, r18
    1704:	b0 01       	movw	r22, r0
    1706:	b3 9f       	mul	r27, r19
    1708:	c0 01       	movw	r24, r0
    170a:	a3 9f       	mul	r26, r19
    170c:	70 0d       	add	r23, r0
    170e:	81 1d       	adc	r24, r1
    1710:	11 24       	eor	r1, r1
    1712:	91 1d       	adc	r25, r1
    1714:	b2 9f       	mul	r27, r18
    1716:	70 0d       	add	r23, r0
    1718:	81 1d       	adc	r24, r1
    171a:	11 24       	eor	r1, r1
    171c:	91 1d       	adc	r25, r1
    171e:	08 95       	ret

00001720 <__udivmodsi4>:
    1720:	a1 e2       	ldi	r26, 0x21	; 33
    1722:	1a 2e       	mov	r1, r26
    1724:	aa 1b       	sub	r26, r26
    1726:	bb 1b       	sub	r27, r27
    1728:	fd 01       	movw	r30, r26
    172a:	0d c0       	rjmp	.+26     	; 0x1746 <__udivmodsi4_ep>

0000172c <__udivmodsi4_loop>:
    172c:	aa 1f       	adc	r26, r26
    172e:	bb 1f       	adc	r27, r27
    1730:	ee 1f       	adc	r30, r30
    1732:	ff 1f       	adc	r31, r31
    1734:	a2 17       	cp	r26, r18
    1736:	b3 07       	cpc	r27, r19
    1738:	e4 07       	cpc	r30, r20
    173a:	f5 07       	cpc	r31, r21
    173c:	20 f0       	brcs	.+8      	; 0x1746 <__udivmodsi4_ep>
    173e:	a2 1b       	sub	r26, r18
    1740:	b3 0b       	sbc	r27, r19
    1742:	e4 0b       	sbc	r30, r20
    1744:	f5 0b       	sbc	r31, r21

00001746 <__udivmodsi4_ep>:
    1746:	66 1f       	adc	r22, r22
    1748:	77 1f       	adc	r23, r23
    174a:	88 1f       	adc	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	1a 94       	dec	r1
    1750:	69 f7       	brne	.-38     	; 0x172c <__udivmodsi4_loop>
    1752:	60 95       	com	r22
    1754:	70 95       	com	r23
    1756:	80 95       	com	r24
    1758:	90 95       	com	r25
    175a:	9b 01       	movw	r18, r22
    175c:	ac 01       	movw	r20, r24
    175e:	bd 01       	movw	r22, r26
    1760:	cf 01       	movw	r24, r30
    1762:	08 95       	ret

00001764 <_exit>:
    1764:	f8 94       	cli

00001766 <__stop_program>:
    1766:	ff cf       	rjmp	.-2      	; 0x1766 <__stop_program>
