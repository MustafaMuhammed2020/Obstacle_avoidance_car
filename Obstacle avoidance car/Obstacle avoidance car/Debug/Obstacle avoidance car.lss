
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00001634  000016c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800094  00800094  000016fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000034c4  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101e  00000000  00000000  00004f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f93  00000000  00000000  00005f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00007ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000efd  00000000  00000000  000084d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143e  00000000  00000000  000093cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000a80b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fe 06 	call	0xdfc	; 0xdfc <main>
      8a:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint32_t u32_g_tick = 0 ;            /** GLOBAL VARIABLE TO BE COMPARED WITH DELAY TICKS **/   

/** FUNCTION TO INITIALIZE APPLICATION MODULES **/
void APP_init()
{
    ICU_init(); /** INITIALIZE ICU **/
      92:	0e 94 50 03 	call	0x6a0	; 0x6a0 <ICU_init>

	US_init(); /** INITILAIZATION ULTRASONIC MODULE **/
      96:	0e 94 e7 06 	call	0xdce	; 0xdce <US_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
      9a:	0e 94 8b 08 	call	0x1116	; 0x1116 <TMR0_init>
	
	TMR2_init() ; /** INITIALIZE TIMER 2 **/
      9e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <TMR2_init>
	
	KEYPAD_init() ; /** INITIALIZE KEYPAD **/
      a2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <KEYPAD_init>
	
	Button_init(); /** INITIALIZATION OF BUTTON **/
      a6:	0e 94 2b 03 	call	0x656	; 0x656 <Button_init>
	
	LCD_init(); /** INITIALIZE LCD **/
      aa:	0e 94 9b 04 	call	0x936	; 0x936 <LCD_init>
	
	TMR0_delayms(MS_DELAY_50); /** DELAY FOR LCD INITIALIZATION **/
      ae:	62 e3       	ldi	r22, 0x32	; 50
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>

	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 27 06 	call	0xc4e	; 0xc4e <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 27 06 	call	0xc4e	; 0xc4e <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 27 06 	call	0xc4e	; 0xc4e <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 27 06 	call	0xc4e	; 0xc4e <MOTOR_rotateclkdir>
      ea:	08 95       	ret

000000ec <APP_setentry>:

}

/** FUNCTION TO SET DEFAULTS **/
void APP_setentry()
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <APP_setentry+0x6>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_a_btnstatus = 0 , u8_a_pressednum = 0 ;
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	1a 82       	std	Y+2, r1	; 0x02
	
 	u32_g_tick = 0 ;
      fa:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
      fe:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x1>
     102:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end+0x2>
     106:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__data_end+0x3>
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     10a:	88 e8       	ldi	r24, 0x88	; 136
     10c:	93 e1       	ldi	r25, 0x13	; 19
     10e:	0e 94 8b 09 	call	0x1316	; 0x1316 <TMR2_getovs>
     112:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <u32_g_delay>
     116:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <u32_g_delay+0x1>
     11a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <u32_g_delay+0x2>
     11e:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <u32_g_delay+0x3>

 	TMR2_start() ; /** START TIMER 2 **/
     122:	0e 94 75 09 	call	0x12ea	; 0x12ea <TMR2_start>

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     126:	39 c0       	rjmp	.+114    	; 0x19a <APP_setentry+0xae>
	{
 		LCD_goto(LCD_POS_0 , LCD_POS_1);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 36 05 	call	0xa6c	; 0xa6c <LCD_goto>
 		LCD_writestr("Set Def. Rot");
     130:	80 e6       	ldi	r24, 0x60	; 96
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 23 05 	call	0xa46	; 0xa46 <LCD_writestr>

 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON PRESSED **/
     138:	ae 01       	movw	r20, r28
     13a:	4f 5f       	subi	r20, 0xFF	; 255
     13c:	5f 4f       	sbci	r21, 0xFF	; 255
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 31 03 	call	0x662	; 0x662 <Is_pressed>
 		TMR0_delayms(MS_DELAY_100); /** WAIT 100 MS FOR BUTTON TO SETTLE **/
     146:	64 e6       	ldi	r22, 0x64	; 100
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>
 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON IS STILL PRESSED **/
     152:	ae 01       	movw	r20, r28
     154:	4f 5f       	subi	r20, 0xFF	; 255
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 31 03 	call	0x662	; 0x662 <Is_pressed>

		if (u8_a_btnstatus) /** IF THE BUTTON PRESSED **/
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 23       	and	r24, r24
     164:	d1 f0       	breq	.+52     	; 0x19a <APP_setentry+0xae>
 		{
 			u8_g_rotationcounter++ ; /** INCREASE ROTATION COUNTER BY 1 **/
     166:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <u8_g_rotationcounter>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <u8_g_rotationcounter>

 			if (u8_g_rotationcounter == LEFT_ROTATION) /** LEFT ROTATION **/
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	41 f4       	brne	.+16     	; 0x184 <APP_setentry+0x98>
 			{
				LCD_goto(LCD_POS_1 , LCD_POS_1);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	0e 94 36 05 	call	0xa6c	; 0xa6c <LCD_goto>
				LCD_writestr("LEFT ROTATION");
     17a:	8d e6       	ldi	r24, 0x6D	; 109
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 23 05 	call	0xa46	; 0xa46 <LCD_writestr>
     182:	0a c0       	rjmp	.+20     	; 0x198 <APP_setentry+0xac>
			}
	 		else if(u8_g_rotationcounter == RIGHT_ROTATION) /** RIGHT ROTATION **/
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	41 f4       	brne	.+16     	; 0x198 <APP_setentry+0xac>
	 		{
 				LCD_goto(LCD_POS_1 , LCD_POS_1);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 36 05 	call	0xa6c	; 0xa6c <LCD_goto>
 				LCD_writestr("RIGHT ROTATION");
     190:	8b e7       	ldi	r24, 0x7B	; 123
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 23 05 	call	0xa46	; 0xa46 <LCD_writestr>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
     198:	19 82       	std	Y+1, r1	; 0x01
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

 	TMR2_start() ; /** START TIMER 2 **/

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     19a:	40 91 94 00 	lds	r20, 0x0094	; 0x800094 <__data_end>
     19e:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <__data_end+0x1>
     1a2:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <__data_end+0x2>
     1a6:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <__data_end+0x3>
     1aa:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <u32_g_delay>
     1ae:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <u32_g_delay+0x1>
     1b2:	a0 91 9a 00 	lds	r26, 0x009A	; 0x80009a <u32_g_delay+0x2>
     1b6:	b0 91 9b 00 	lds	r27, 0x009B	; 0x80009b <u32_g_delay+0x3>
     1ba:	48 17       	cp	r20, r24
     1bc:	59 07       	cpc	r21, r25
     1be:	6a 07       	cpc	r22, r26
     1c0:	7b 07       	cpc	r23, r27
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <APP_setentry+0xda>
     1c4:	b1 cf       	rjmp	.-158    	; 0x128 <APP_setentry+0x3c>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
 		}
 	}
	
 	TMR2_stop(); /** STOP TIMER 2 **/
     1c6:	0e 94 80 09 	call	0x1300	; 0x1300 <TMR2_stop>
		
	do /** ACCEPT KEYPAD BUTTON 1 FROM USER **/
	{
 		KEYPAD_read(&u8_a_pressednum);
     1ca:	ce 01       	movw	r24, r28
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	0e 94 af 03 	call	0x75e	; 0x75e <KEYPAD_read>
 	} while (u8_a_pressednum != START_BTN);
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	81 33       	cpi	r24, 0x31	; 49
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <APP_setentry+0xde>

 	 LCD_sendcmd(LCD_CLEAR);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     1de:	64 e1       	ldi	r22, 0x14	; 20
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>
	 
	 LCD_goto(LCD_POS_0 , LCD_POS_2);
     1ea:	62 e0       	ldi	r22, 0x02	; 2
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	0e 94 36 05 	call	0xa6c	; 0xa6c <LCD_goto>
	 LCD_writestr("WAITING..");
     1f2:	8a e8       	ldi	r24, 0x8A	; 138
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 23 05 	call	0xa46	; 0xa46 <LCD_writestr>
	 
	 TMR0_delayms(MS_DELAY_2000); /** WAIT 2 SECONDS **/
     1fa:	60 ed       	ldi	r22, 0xD0	; 208
     1fc:	77 e0       	ldi	r23, 0x07	; 7
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>
	 
	 LCD_sendcmd(LCD_CLEAR);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     20c:	64 e1       	ldi	r22, 0x14	; 20
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>
	 
}
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	08 95       	ret

00000222 <APP_start>:

void APP_start()
{	
	u32_g_tick = 0 , u32_g_delay = 0 ; /** VARIABLES TO HANDLE THE DELAY **/
     222:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
     226:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x1>
     22a:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end+0x2>
     22e:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__data_end+0x3>
     232:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <u32_g_delay>
     236:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <u32_g_delay+0x1>
     23a:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <u32_g_delay+0x2>
     23e:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <u32_g_delay+0x3>
	
	US_sendtrigger(); /** SEND TRIGGER **/
     242:	0e 94 ed 06 	call	0xdda	; 0xdda <US_sendtrigger>
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     246:	88 e8       	ldi	r24, 0x88	; 136
     248:	93 e1       	ldi	r25, 0x13	; 19
     24a:	0e 94 8b 09 	call	0x1316	; 0x1316 <TMR2_getovs>
     24e:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <u32_g_delay>
     252:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <u32_g_delay+0x1>
     256:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <u32_g_delay+0x2>
     25a:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     25e:	86 c0       	rjmp	.+268    	; 0x36c <APP_start+0x14a>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
     260:	af e9       	ldi	r26, 0x9F	; 159
     262:	b6 e4       	ldi	r27, 0x46	; 70
     264:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__umulhisi3>
     268:	88 0f       	add	r24, r24
     26a:	89 2f       	mov	r24, r25
     26c:	88 1f       	adc	r24, r24
     26e:	99 0b       	sbc	r25, r25
     270:	91 95       	neg	r25
     272:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <u8_g_distance>
			
			TMR2_start() ; /** START TIMER 2 **/
     276:	0e 94 75 09 	call	0x12ea	; 0x12ea <TMR2_start>
		
			while (u32_g_tick < u32_g_delay)
     27a:	2f c0       	rjmp	.+94     	; 0x2da <APP_start+0xb8>
			{
				/** MOVE WITH 50% SPEED FOR 5 MIN **/
				MOTOR_turnon(MOTOR1_ID);
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
				LCD_goto(LCD_POS_0, LCD_POS_1) ;
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	0e 94 36 05 	call	0xa6c	; 0xa6c <LCD_goto>
				TMR0_delaymicros(SPEED_50_ON_TIME);
     29c:	60 ee       	ldi	r22, 0xE0	; 224
     29e:	74 ec       	ldi	r23, 0xC4	; 196
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
				LCD_writechar('D');
     2c0:	84 e4       	ldi	r24, 0x44	; 68
     2c2:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
				LCD_writechar(':');
     2c6:	8a e3       	ldi	r24, 0x3A	; 58
     2c8:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
				LCD_writeint(u8_g_distance);
     2cc:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <u8_g_distance>
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 4e 05 	call	0xa9c	; 0xa9c <LCD_writeint>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
			
			TMR2_start() ; /** START TIMER 2 **/
		
			while (u32_g_tick < u32_g_delay)
     2da:	40 91 94 00 	lds	r20, 0x0094	; 0x800094 <__data_end>
     2de:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <__data_end+0x1>
     2e2:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <__data_end+0x2>
     2e6:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <__data_end+0x3>
     2ea:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <u32_g_delay>
     2ee:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <u32_g_delay+0x1>
     2f2:	a0 91 9a 00 	lds	r26, 0x009A	; 0x80009a <u32_g_delay+0x2>
     2f6:	b0 91 9b 00 	lds	r27, 0x009B	; 0x80009b <u32_g_delay+0x3>
     2fa:	48 17       	cp	r20, r24
     2fc:	59 07       	cpc	r21, r25
     2fe:	6a 07       	cpc	r22, r26
     300:	7b 07       	cpc	r23, r27
     302:	08 f4       	brcc	.+2      	; 0x306 <APP_start+0xe4>
     304:	bb cf       	rjmp	.-138    	; 0x27c <APP_start+0x5a>
				LCD_writechar('D');
				LCD_writechar(':');
				LCD_writeint(u8_g_distance);
			}
					
			TMR2_stop() ; /** STOP TIMER2 AFTER THE 5 SECONDS **/
     306:	0e 94 80 09 	call	0x1300	; 0x1300 <TMR2_stop>
					
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
			LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	0e 94 36 05 	call	0xa6c	; 0xa6c <LCD_goto>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     32a:	60 e5       	ldi	r22, 0x50	; 80
     32c:	70 e5       	ldi	r23, 0x50	; 80
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
			LCD_writechar('D');
     34e:	84 e4       	ldi	r24, 0x44	; 68
     350:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
			LCD_writechar(':');
     354:	8a e3       	ldi	r24, 0x3A	; 58
     356:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
			LCD_writeint(u8_g_distance);
     35a:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <u8_g_distance>
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 4e 05 	call	0xa9c	; 0xa9c <LCD_writeint>
			
			US_sendtrigger(); /** SEND TRIGGER **/
     368:	0e 94 ed 06 	call	0xdda	; 0xdda <US_sendtrigger>
	
	US_sendtrigger(); /** SEND TRIGGER **/
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     36c:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <u16_g_time>
     370:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <u16_g_time+0x1>
     374:	20 3b       	cpi	r18, 0xB0	; 176
     376:	80 e8       	ldi	r24, 0x80	; 128
     378:	38 07       	cpc	r19, r24
     37a:	08 f0       	brcs	.+2      	; 0x37e <APP_start+0x15c>
     37c:	71 cf       	rjmp	.-286    	; 0x260 <APP_start+0x3e>
     37e:	31 c0       	rjmp	.+98     	; 0x3e2 <APP_start+0x1c0>
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
	{
		/** CONTINUE WITH 30% **/
		MOTOR_turnon(MOTOR1_ID);
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     392:	83 e0       	ldi	r24, 0x03	; 3
     394:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
		LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 36 05 	call	0xa6c	; 0xa6c <LCD_goto>
		TMR0_delaymicros(SPEED_30_ON_TIME);
     3a0:	60 e5       	ldi	r22, 0x50	; 80
     3a2:	70 e5       	ldi	r23, 0x50	; 80
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
		LCD_writechar('D');
     3c4:	84 e4       	ldi	r24, 0x44	; 68
     3c6:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
		LCD_writechar(':');
     3ca:	8a e3       	ldi	r24, 0x3A	; 58
     3cc:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
		LCD_writeint(u8_g_distance);
     3d0:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <u8_g_distance>
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	0e 94 4e 05 	call	0xa9c	; 0xa9c <LCD_writeint>
		US_sendtrigger(); /** SEND TRIGGER **/
     3de:	0e 94 ed 06 	call	0xdda	; 0xdda <US_sendtrigger>
			LCD_writeint(u8_g_distance);
			
			US_sendtrigger(); /** SEND TRIGGER **/
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
     3e2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <u16_g_time>
     3e6:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <u16_g_time+0x1>
     3ea:	80 36       	cpi	r24, 0x60	; 96
     3ec:	96 43       	sbci	r25, 0x36	; 54
     3ee:	40 f6       	brcc	.-112    	; 0x380 <APP_start+0x15e>
		LCD_writechar(':');
		LCD_writeint(u8_g_distance);
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	
	u32_g_tick = 0 ;
     3f0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end>
     3f4:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x1>
     3f8:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end+0x2>
     3fc:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <__data_end+0x3>
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     400:	84 ef       	ldi	r24, 0xF4	; 244
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	0e 94 8b 09 	call	0x1316	; 0x1316 <TMR2_getovs>
     408:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <u32_g_delay>
     40c:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <u32_g_delay+0x1>
     410:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <u32_g_delay+0x2>
     414:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     418:	3f c0       	rjmp	.+126    	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
	{
		/** STOP THEN ROTATE **/
		MOTOR_turnoff(MOTOR1_ID);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
		
		LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 36 05 	call	0xa6c	; 0xa6c <LCD_goto>
		LCD_writechar('D');
     43a:	84 e4       	ldi	r24, 0x44	; 68
     43c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
		LCD_writechar(':');
     440:	8a e3       	ldi	r24, 0x3A	; 58
     442:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
		LCD_writeint(u8_g_distance);
     446:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <u8_g_distance>
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 4e 05 	call	0xa9c	; 0xa9c <LCD_writeint>
		
		TMR2_start() ; /** START TIMER 2 **/
     454:	0e 94 75 09 	call	0x12ea	; 0x12ea <TMR2_start>
		while (u32_g_tick < u32_g_delay)
     458:	06 c0       	rjmp	.+12     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
		LCD_writechar('D');
		LCD_writechar(':');
		LCD_writeint(u8_g_distance);
		
		TMR2_start() ; /** START TIMER 2 **/
		while (u32_g_tick < u32_g_delay)
     466:	40 91 94 00 	lds	r20, 0x0094	; 0x800094 <__data_end>
     46a:	50 91 95 00 	lds	r21, 0x0095	; 0x800095 <__data_end+0x1>
     46e:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <__data_end+0x2>
     472:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <__data_end+0x3>
     476:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <u32_g_delay>
     47a:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <u32_g_delay+0x1>
     47e:	a0 91 9a 00 	lds	r26, 0x009A	; 0x80009a <u32_g_delay+0x2>
     482:	b0 91 9b 00 	lds	r27, 0x009B	; 0x80009b <u32_g_delay+0x3>
     486:	48 17       	cp	r20, r24
     488:	59 07       	cpc	r21, r25
     48a:	6a 07       	cpc	r22, r26
     48c:	7b 07       	cpc	r23, r27
     48e:	28 f3       	brcs	.-54     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop(); /** STOP TIMER 2 **/
     490:	0e 94 80 09 	call	0x1300	; 0x1300 <TMR2_stop>
			
		US_sendtrigger(); /** SEND TRIGGER **/
     494:	0e 94 ed 06 	call	0xdda	; 0xdda <US_sendtrigger>
	}
	
	u32_g_tick = 0 ;
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     498:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <u16_g_time>
     49c:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <u16_g_time+0x1>
     4a0:	80 54       	subi	r24, 0x40	; 64
     4a2:	94 42       	sbci	r25, 0x24	; 36
     4a4:	80 32       	cpi	r24, 0x20	; 32
     4a6:	92 41       	sbci	r25, 0x12	; 18
     4a8:	08 f4       	brcc	.+2      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4aa:	b7 cf       	rjmp	.-146    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     4ac:	51 c0       	rjmp	.+162    	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
	{
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR2_ID);
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR3_ID);
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	0e 94 61 06 	call	0xcc2	; 0xcc2 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR4_ID);
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <MOTOR_rotateanticlkdir>
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     4c6:	31 c0       	rjmp	.+98     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
		   {
			  /** GO BACKWARDS WITH 30% SPEED **/
			  MOTOR_turnon(MOTOR1_ID);
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
			  MOTOR_turnon(MOTOR2_ID);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
		      MOTOR_turnon(MOTOR3_ID);
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
			  MOTOR_turnon(MOTOR4_ID);
     4da:	83 e0       	ldi	r24, 0x03	; 3
     4dc:	0e 94 c1 06 	call	0xd82	; 0xd82 <MOTOR_turnon>
			  LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 36 05 	call	0xa6c	; 0xa6c <LCD_goto>
			  TMR0_delaymicros(SPEED_30_ON_TIME);
     4e8:	60 e5       	ldi	r22, 0x50	; 80
     4ea:	70 e5       	ldi	r23, 0x50	; 80
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TMR0_delaymicros>
			
			  MOTOR_turnoff(MOTOR1_ID);
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR2_ID);
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR3_ID);
     500:	82 e0       	ldi	r24, 0x02	; 2
     502:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR4_ID);
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	0e 94 9b 06 	call	0xd36	; 0xd36 <MOTOR_turnoff>
			  LCD_writechar('D');
     50c:	84 e4       	ldi	r24, 0x44	; 68
     50e:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
			  LCD_writechar(':');
     512:	8a e3       	ldi	r24, 0x3A	; 58
     514:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
			  LCD_writeint(u8_g_distance);
     518:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <u8_g_distance>
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 4e 05 	call	0xa9c	; 0xa9c <LCD_writeint>
			  US_sendtrigger(); /** SEND TRIGGER **/
     526:	0e 94 ed 06 	call	0xdda	; 0xdda <US_sendtrigger>
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
		MOTOR_rotateanticlkdir(MOTOR2_ID);
		MOTOR_rotateanticlkdir(MOTOR3_ID);
		MOTOR_rotateanticlkdir(MOTOR4_ID);
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     52a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <u16_g_time>
     52e:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <u16_g_time+0x1>
     532:	80 31       	cpi	r24, 0x10	; 16
     534:	96 42       	sbci	r25, 0x26	; 38
     536:	40 f2       	brcs	.-112    	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
			  LCD_writechar(':');
			  LCD_writeint(u8_g_distance);
			  US_sendtrigger(); /** SEND TRIGGER **/
		   }
		
			MOTOR_rotateclkdir(MOTOR1_ID); /** RETURN TO DEFAULT DIRECTION  **/
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 27 06 	call	0xc4e	; 0xc4e <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR2_ID);
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	0e 94 27 06 	call	0xc4e	; 0xc4e <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR3_ID);
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	0e 94 27 06 	call	0xc4e	; 0xc4e <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR4_ID);
     54a:	83 e0       	ldi	r24, 0x03	; 3
     54c:	0e 94 27 06 	call	0xc4e	; 0xc4e <MOTOR_rotateclkdir>
		TMR2_stop(); /** STOP TIMER 2 **/
			
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
     550:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <u16_g_time>
     554:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <u16_g_time+0x1>
     558:	80 34       	cpi	r24, 0x40	; 64
     55a:	94 42       	sbci	r25, 0x24	; 36
     55c:	08 f4       	brcc	.+2      	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
     55e:	a7 cf       	rjmp	.-178    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			MOTOR_rotateclkdir(MOTOR2_ID);
			MOTOR_rotateclkdir(MOTOR3_ID);
			MOTOR_rotateclkdir(MOTOR4_ID);
		
	}
}
     560:	08 95       	ret

00000562 <__vector_1>:



/** EXTI0 **/
ISR(INT0_vect)
{
     562:	1f 92       	push	r1
     564:	0f 92       	push	r0
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	0f 92       	push	r0
     56a:	11 24       	eor	r1, r1
     56c:	2f 93       	push	r18
     56e:	3f 93       	push	r19
     570:	4f 93       	push	r20
     572:	5f 93       	push	r21
     574:	6f 93       	push	r22
     576:	7f 93       	push	r23
     578:	8f 93       	push	r24
     57a:	9f 93       	push	r25
     57c:	af 93       	push	r26
     57e:	bf 93       	push	r27
     580:	ef 93       	push	r30
     582:	ff 93       	push	r31
	u8_echoedge++ ; /** INCREASE THE ECHO BY 1 **/
     584:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <u8_echoedge>
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <u8_echoedge>
	
	if(u8_echoedge == FIRST_EDGE ) /** FIRST CHANGE (RISING EDGE) **/
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	19 f4       	brne	.+6      	; 0x598 <__vector_1+0x36>
	{
		ICU_start(); /** START ICU / COUNTING **/
     592:	0e 94 68 03 	call	0x6d0	; 0x6d0 <ICU_start>
     596:	1f c0       	rjmp	.+62     	; 0x5d6 <__vector_1+0x74>
	}
	
	else if(u8_echoedge == SECOND_EDGE) /** SECOND CHANGE (FALLING EDGE) **/
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	e9 f4       	brne	.+58     	; 0x5d6 <__vector_1+0x74>
	{
		ICU_stop(); /** STOP ICU / COUNTING **/
     59c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <ICU_stop>
		
		u16_g_time = ICU_getvalue(); /** GET PULSE LENGTH **/
     5a0:	0e 94 56 03 	call	0x6ac	; 0x6ac <ICU_getvalue>
     5a4:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <u16_g_time+0x1>
     5a8:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <u16_g_time>
		
		ICU_setcounterval(INITIATE_COUNTER_VAL); /** START COUNTING FROM ZERO **/
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <ICU_setcounterval>
				
		u8_echoedge = 0 ;     /** REINITIALIZE ECHO EDGE TO 0 TO REPEAT IN ANY CHANGE AGAIN **/
     5b4:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <u8_echoedge>
		
		u8_g_distance = (u16_g_time / US_DIVIDER) ; /** CALCULATE THE DISTANCE **/
     5b8:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <u16_g_time>
     5bc:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <u16_g_time+0x1>
     5c0:	af e9       	ldi	r26, 0x9F	; 159
     5c2:	b6 e4       	ldi	r27, 0x46	; 70
     5c4:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <__umulhisi3>
     5c8:	88 0f       	add	r24, r24
     5ca:	89 2f       	mov	r24, r25
     5cc:	88 1f       	adc	r24, r24
     5ce:	99 0b       	sbc	r25, r25
     5d0:	91 95       	neg	r25
     5d2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <u8_g_distance>
	}
}
     5d6:	ff 91       	pop	r31
     5d8:	ef 91       	pop	r30
     5da:	bf 91       	pop	r27
     5dc:	af 91       	pop	r26
     5de:	9f 91       	pop	r25
     5e0:	8f 91       	pop	r24
     5e2:	7f 91       	pop	r23
     5e4:	6f 91       	pop	r22
     5e6:	5f 91       	pop	r21
     5e8:	4f 91       	pop	r20
     5ea:	3f 91       	pop	r19
     5ec:	2f 91       	pop	r18
     5ee:	0f 90       	pop	r0
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	0f 90       	pop	r0
     5f4:	1f 90       	pop	r1
     5f6:	18 95       	reti

000005f8 <__vector_9>:


/** TIMER 1 OVERFLOW **/ 
ISR(TIMER1_OVF_vect)
{
     5f8:	1f 92       	push	r1
     5fa:	0f 92       	push	r0
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	0f 92       	push	r0
     600:	11 24       	eor	r1, r1
	/** DO NOTHING **/ 
}
     602:	0f 90       	pop	r0
     604:	0f be       	out	0x3f, r0	; 63
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <__vector_5>:

/** TIMER 0 OVERFLOW  **/
ISR(TIMER2_OVF_vect)
{
     60c:	1f 92       	push	r1
     60e:	0f 92       	push	r0
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	0f 92       	push	r0
     614:	11 24       	eor	r1, r1
     616:	8f 93       	push	r24
     618:	9f 93       	push	r25
     61a:	af 93       	push	r26
     61c:	bf 93       	push	r27
	u32_g_tick++ ; /** INCREASE TICKS **/  
     61e:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
     622:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__data_end+0x1>
     626:	a0 91 96 00 	lds	r26, 0x0096	; 0x800096 <__data_end+0x2>
     62a:	b0 91 97 00 	lds	r27, 0x0097	; 0x800097 <__data_end+0x3>
     62e:	01 96       	adiw	r24, 0x01	; 1
     630:	a1 1d       	adc	r26, r1
     632:	b1 1d       	adc	r27, r1
     634:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
     638:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__data_end+0x1>
     63c:	a0 93 96 00 	sts	0x0096, r26	; 0x800096 <__data_end+0x2>
     640:	b0 93 97 00 	sts	0x0097, r27	; 0x800097 <__data_end+0x3>
}
     644:	bf 91       	pop	r27
     646:	af 91       	pop	r26
     648:	9f 91       	pop	r25
     64a:	8f 91       	pop	r24
     64c:	0f 90       	pop	r0
     64e:	0f be       	out	0x3f, r0	; 63
     650:	0f 90       	pop	r0
     652:	1f 90       	pop	r1
     654:	18 95       	reti

00000656 <Button_init>:
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     660:	08 95       	ret

00000662 <Is_pressed>:
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	1f 92       	push	r1
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	8a 01       	movw	r16, r20
     672:	19 82       	std	Y+1, r1	; 0x01
     674:	ae 01       	movw	r20, r28
     676:	4f 5f       	subi	r20, 0xFF	; 255
     678:	5f 4f       	sbci	r21, 0xFF	; 255
     67a:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_readpin>
     67e:	81 11       	cpse	r24, r1
     680:	05 c0       	rjmp	.+10     	; 0x68c <Is_pressed+0x2a>
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	f8 01       	movw	r30, r16
     686:	80 83       	st	Z, r24
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	04 c0       	rjmp	.+8      	; 0x694 <Is_pressed+0x32>
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	f8 01       	movw	r30, r16
     690:	80 83       	st	Z, r24
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0f 90       	pop	r0
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	1f 91       	pop	r17
     69c:	0f 91       	pop	r16
     69e:	08 95       	ret

000006a0 <ICU_init>:
/**************************************************************/
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	TMR1_init(); /** INITIALIZE TIMER 1 MODULE **/
     6a0:	0e 94 22 09 	call	0x1244	; 0x1244 <TMR1_init>
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
     6a4:	0e 94 7f 08 	call	0x10fe	; 0x10fe <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	08 95       	ret

000006ac <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	00 d0       	rcall	.+0      	; 0x6b2 <ICU_getvalue+0x6>
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
     6b6:	1a 82       	std	Y+2, r1	; 0x02
     6b8:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
     6ba:	ce 01       	movw	r24, r28
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	0e 94 55 09 	call	0x12aa	; 0x12aa <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <ICU_start>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_start(void)
{
	TMR1_start(); /** START TIMER1 COUNTING **/
     6d0:	0e 94 3d 09 	call	0x127a	; 0x127a <TMR1_start>
     6d4:	08 95       	ret

000006d6 <ICU_setcounterval>:
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_setcounterval(uint16t u16_a_counterval)
{
	TMR1_setcounterval(u16_a_counterval);
     6d6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <TMR1_setcounterval>
     6da:	08 95       	ret

000006dc <ICU_stop>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_stop(void)
{
	TMR1_stop();  /** STOP TIMER1 COUNTING **/
     6dc:	0e 94 4a 09 	call	0x1294	; 0x1294 <TMR1_stop>
     6e0:	08 95       	ret

000006e2 <KEYPAD_init>:
     6e2:	41 e0       	ldi	r20, 0x01	; 1
     6e4:	65 e0       	ldi	r22, 0x05	; 5
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     6ec:	41 e0       	ldi	r20, 0x01	; 1
     6ee:	66 e0       	ldi	r22, 0x06	; 6
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	67 e0       	ldi	r22, 0x07	; 7
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	61 e0       	ldi	r22, 0x01	; 1
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	64 e0       	ldi	r22, 0x04	; 4
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     71e:	41 e0       	ldi	r20, 0x01	; 1
     720:	65 e0       	ldi	r22, 0x05	; 5
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     728:	41 e0       	ldi	r20, 0x01	; 1
     72a:	66 e0       	ldi	r22, 0x06	; 6
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     732:	41 e0       	ldi	r20, 0x01	; 1
     734:	67 e0       	ldi	r22, 0x07	; 7
     736:	83 e0       	ldi	r24, 0x03	; 3
     738:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     73c:	41 e0       	ldi	r20, 0x01	; 1
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     746:	41 e0       	ldi	r20, 0x01	; 1
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     750:	41 e0       	ldi	r20, 0x01	; 1
     752:	64 e0       	ldi	r22, 0x04	; 4
     754:	83 e0       	ldi	r24, 0x03	; 3
     756:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	08 95       	ret

0000075e <KEYPAD_read>:
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	00 d0       	rcall	.+0      	; 0x76c <KEYPAD_read+0xe>
     76c:	00 d0       	rcall	.+0      	; 0x76e <KEYPAD_read+0x10>
     76e:	00 d0       	rcall	.+0      	; 0x770 <KEYPAD_read+0x12>
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	7c 01       	movw	r14, r24
     776:	85 e0       	ldi	r24, 0x05	; 5
     778:	89 83       	std	Y+1, r24	; 0x01
     77a:	86 e0       	ldi	r24, 0x06	; 6
     77c:	8a 83       	std	Y+2, r24	; 0x02
     77e:	87 e0       	ldi	r24, 0x07	; 7
     780:	8b 83       	std	Y+3, r24	; 0x03
     782:	1c 82       	std	Y+4, r1	; 0x04
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	8d 83       	std	Y+5, r24	; 0x05
     788:	84 e0       	ldi	r24, 0x04	; 4
     78a:	8e 83       	std	Y+6, r24	; 0x06
     78c:	00 e0       	ldi	r16, 0x00	; 0
     78e:	79 c0       	rjmp	.+242    	; 0x882 <__stack+0x23>
     790:	03 30       	cpi	r16, 0x03	; 3
     792:	39 f4       	brne	.+14     	; 0x7a2 <KEYPAD_read+0x44>
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	83 e0       	ldi	r24, 0x03	; 3
     79a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     79e:	10 e0       	ldi	r17, 0x00	; 0
     7a0:	62 c0       	rjmp	.+196    	; 0x866 <__stack+0x7>
     7a2:	e1 e0       	ldi	r30, 0x01	; 1
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	ec 0f       	add	r30, r28
     7a8:	fd 1f       	adc	r31, r29
     7aa:	e0 0f       	add	r30, r16
     7ac:	f1 1d       	adc	r31, r1
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	60 81       	ld	r22, Z
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     7b8:	f2 cf       	rjmp	.-28     	; 0x79e <KEYPAD_read+0x40>
     7ba:	e4 e0       	ldi	r30, 0x04	; 4
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	ec 0f       	add	r30, r28
     7c0:	fd 1f       	adc	r31, r29
     7c2:	e1 0f       	add	r30, r17
     7c4:	f1 1d       	adc	r31, r1
     7c6:	a7 01       	movw	r20, r14
     7c8:	60 81       	ld	r22, Z
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	0e 94 03 08 	call	0x1006	; 0x1006 <DIO_readpin>
     7d0:	f7 01       	movw	r30, r14
     7d2:	80 81       	ld	r24, Z
     7d4:	81 11       	cpse	r24, r1
     7d6:	46 c0       	rjmp	.+140    	; 0x864 <__stack+0x5>
     7d8:	01 11       	cpse	r16, r1
     7da:	11 c0       	rjmp	.+34     	; 0x7fe <KEYPAD_read+0xa0>
     7dc:	11 11       	cpse	r17, r1
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <KEYPAD_read+0x88>
     7e0:	81 e3       	ldi	r24, 0x31	; 49
     7e2:	80 83       	st	Z, r24
     7e4:	33 c0       	rjmp	.+102    	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     7e6:	11 30       	cpi	r17, 0x01	; 1
     7e8:	21 f4       	brne	.+8      	; 0x7f2 <KEYPAD_read+0x94>
     7ea:	82 e3       	ldi	r24, 0x32	; 50
     7ec:	f7 01       	movw	r30, r14
     7ee:	80 83       	st	Z, r24
     7f0:	2d c0       	rjmp	.+90     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     7f2:	12 30       	cpi	r17, 0x02	; 2
     7f4:	59 f5       	brne	.+86     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     7f6:	83 e3       	ldi	r24, 0x33	; 51
     7f8:	f7 01       	movw	r30, r14
     7fa:	80 83       	st	Z, r24
     7fc:	27 c0       	rjmp	.+78     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     7fe:	01 30       	cpi	r16, 0x01	; 1
     800:	91 f4       	brne	.+36     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     802:	11 11       	cpse	r17, r1
     804:	04 c0       	rjmp	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     806:	84 e3       	ldi	r24, 0x34	; 52
     808:	f7 01       	movw	r30, r14
     80a:	80 83       	st	Z, r24
     80c:	1f c0       	rjmp	.+62     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     80e:	11 30       	cpi	r17, 0x01	; 1
     810:	21 f4       	brne	.+8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     812:	85 e3       	ldi	r24, 0x35	; 53
     814:	f7 01       	movw	r30, r14
     816:	80 83       	st	Z, r24
     818:	19 c0       	rjmp	.+50     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     81a:	12 30       	cpi	r17, 0x02	; 2
     81c:	b9 f4       	brne	.+46     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     81e:	86 e3       	ldi	r24, 0x36	; 54
     820:	f7 01       	movw	r30, r14
     822:	80 83       	st	Z, r24
     824:	13 c0       	rjmp	.+38     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     826:	02 30       	cpi	r16, 0x02	; 2
     828:	89 f4       	brne	.+34     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     82a:	11 11       	cpse	r17, r1
     82c:	04 c0       	rjmp	.+8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     82e:	87 e3       	ldi	r24, 0x37	; 55
     830:	f7 01       	movw	r30, r14
     832:	80 83       	st	Z, r24
     834:	0b c0       	rjmp	.+22     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     836:	11 30       	cpi	r17, 0x01	; 1
     838:	21 f4       	brne	.+8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     83a:	88 e3       	ldi	r24, 0x38	; 56
     83c:	f7 01       	movw	r30, r14
     83e:	80 83       	st	Z, r24
     840:	05 c0       	rjmp	.+10     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     842:	12 30       	cpi	r17, 0x02	; 2
     844:	19 f4       	brne	.+6      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
     846:	89 e3       	ldi	r24, 0x39	; 57
     848:	f7 01       	movw	r30, r14
     84a:	80 83       	st	Z, r24
     84c:	e1 e0       	ldi	r30, 0x01	; 1
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	ec 0f       	add	r30, r28
     852:	fd 1f       	adc	r31, r29
     854:	e0 0f       	add	r30, r16
     856:	f1 1d       	adc	r31, r1
     858:	60 81       	ld	r22, Z
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_togglepin>
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	13 c0       	rjmp	.+38     	; 0x88a <__stack+0x2b>
     864:	1f 5f       	subi	r17, 0xFF	; 255
     866:	13 30       	cpi	r17, 0x03	; 3
     868:	08 f4       	brcc	.+2      	; 0x86c <__stack+0xd>
     86a:	a7 cf       	rjmp	.-178    	; 0x7ba <KEYPAD_read+0x5c>
     86c:	e1 e0       	ldi	r30, 0x01	; 1
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	ec 0f       	add	r30, r28
     872:	fd 1f       	adc	r31, r29
     874:	e0 0f       	add	r30, r16
     876:	f1 1d       	adc	r31, r1
     878:	60 81       	ld	r22, Z
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	0e 94 41 08 	call	0x1082	; 0x1082 <DIO_togglepin>
     880:	0f 5f       	subi	r16, 0xFF	; 255
     882:	03 30       	cpi	r16, 0x03	; 3
     884:	08 f4       	brcc	.+2      	; 0x888 <__stack+0x29>
     886:	84 cf       	rjmp	.-248    	; 0x790 <KEYPAD_read+0x32>
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	26 96       	adiw	r28, 0x06	; 6
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	08 95       	ret

000008a4 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     8a4:	cf 93       	push	r28
     8a6:	c8 2f       	mov	r28, r24
     8a8:	0e 94 8b 08 	call	0x1116	; 0x1116 <TMR0_init>
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	62 e0       	ldi	r22, 0x02	; 2
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	63 e0       	ldi	r22, 0x03	; 3
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     8ca:	8b b3       	in	r24, 0x1b	; 27
     8cc:	9c 2f       	mov	r25, r28
     8ce:	90 7f       	andi	r25, 0xF0	; 240
     8d0:	8f 70       	andi	r24, 0x0F	; 15
     8d2:	89 2b       	or	r24, r25
     8d4:	8b bb       	out	0x1b, r24	; 27
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	63 e0       	ldi	r22, 0x03	; 3
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	63 e0       	ldi	r22, 0x03	; 3
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     8f6:	20 e1       	ldi	r18, 0x10	; 16
     8f8:	c2 9f       	mul	r28, r18
     8fa:	c0 01       	movw	r24, r0
     8fc:	11 24       	eor	r1, r1
     8fe:	9b b3       	in	r25, 0x1b	; 27
     900:	9f 70       	andi	r25, 0x0F	; 15
     902:	89 2b       	or	r24, r25
     904:	8b bb       	out	0x1b, r24	; 27
     906:	41 e0       	ldi	r20, 0x01	; 1
     908:	63 e0       	ldi	r22, 0x03	; 3
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>
     91c:	40 e0       	ldi	r20, 0x00	; 0
     91e:	63 e0       	ldi	r22, 0x03	; 3
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     926:	65 e0       	ldi	r22, 0x05	; 5
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <LCD_init>:
     936:	0e 94 8b 08 	call	0x1116	; 0x1116 <TMR0_init>
     93a:	41 e0       	ldi	r20, 0x01	; 1
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     944:	41 e0       	ldi	r20, 0x01	; 1
     946:	62 e0       	ldi	r22, 0x02	; 2
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     94e:	41 e0       	ldi	r20, 0x01	; 1
     950:	63 e0       	ldi	r22, 0x03	; 3
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	64 e0       	ldi	r22, 0x04	; 4
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	65 e0       	ldi	r22, 0x05	; 5
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     96c:	41 e0       	ldi	r20, 0x01	; 1
     96e:	66 e0       	ldi	r22, 0x06	; 6
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	67 e0       	ldi	r22, 0x07	; 7
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     980:	64 e1       	ldi	r22, 0x14	; 20
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>
     98c:	83 e3       	ldi	r24, 0x33	; 51
     98e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_sendcmd>
     992:	82 e3       	ldi	r24, 0x32	; 50
     994:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_sendcmd>
     998:	88 e2       	ldi	r24, 0x28	; 40
     99a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_sendcmd>
     99e:	8c e0       	ldi	r24, 0x0C	; 12
     9a0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_sendcmd>
     9a4:	86 e0       	ldi	r24, 0x06	; 6
     9a6:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_sendcmd>
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_sendcmd>
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_sendcmd>
     9b6:	08 95       	ret

000009b8 <LCD_writechar>:
     9b8:	cf 93       	push	r28
     9ba:	c8 2f       	mov	r28, r24
     9bc:	41 e0       	ldi	r20, 0x01	; 1
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	62 e0       	ldi	r22, 0x02	; 2
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	63 e0       	ldi	r22, 0x03	; 3
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     9da:	8b b3       	in	r24, 0x1b	; 27
     9dc:	9c 2f       	mov	r25, r28
     9de:	90 7f       	andi	r25, 0xF0	; 240
     9e0:	8f 70       	andi	r24, 0x0F	; 15
     9e2:	89 2b       	or	r24, r25
     9e4:	8b bb       	out	0x1b, r24	; 27
     9e6:	41 e0       	ldi	r20, 0x01	; 1
     9e8:	63 e0       	ldi	r22, 0x03	; 3
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	63 e0       	ldi	r22, 0x03	; 3
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     a06:	20 e1       	ldi	r18, 0x10	; 16
     a08:	c2 9f       	mul	r28, r18
     a0a:	c0 01       	movw	r24, r0
     a0c:	11 24       	eor	r1, r1
     a0e:	9b b3       	in	r25, 0x1b	; 27
     a10:	9f 70       	andi	r25, 0x0F	; 15
     a12:	89 2b       	or	r24, r25
     a14:	8b bb       	out	0x1b, r24	; 27
     a16:	41 e0       	ldi	r20, 0x01	; 1
     a18:	63 e0       	ldi	r22, 0x03	; 3
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     a20:	61 e0       	ldi	r22, 0x01	; 1
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	63 e0       	ldi	r22, 0x03	; 3
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
     a36:	65 e0       	ldi	r22, 0x05	; 5
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 b2 08 	call	0x1164	; 0x1164 <TMR0_delayms>
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <LCD_writestr>:
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	8c 01       	movw	r16, r24
     a4e:	c0 e0       	ldi	r28, 0x00	; 0
     a50:	03 c0       	rjmp	.+6      	; 0xa58 <LCD_writestr+0x12>
     a52:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
     a56:	cf 5f       	subi	r28, 0xFF	; 255
     a58:	f8 01       	movw	r30, r16
     a5a:	ec 0f       	add	r30, r28
     a5c:	f1 1d       	adc	r31, r1
     a5e:	80 81       	ld	r24, Z
     a60:	81 11       	cpse	r24, r1
     a62:	f7 cf       	rjmp	.-18     	; 0xa52 <LCD_writestr+0xc>
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	08 95       	ret

00000a6c <LCD_goto>:
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	00 d0       	rcall	.+0      	; 0xa72 <LCD_goto+0x6>
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	90 e8       	ldi	r25, 0x80	; 128
     a78:	99 83       	std	Y+1, r25	; 0x01
     a7a:	90 ec       	ldi	r25, 0xC0	; 192
     a7c:	9a 83       	std	Y+2, r25	; 0x02
     a7e:	e1 e0       	ldi	r30, 0x01	; 1
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	ec 0f       	add	r30, r28
     a84:	fd 1f       	adc	r31, r29
     a86:	e8 0f       	add	r30, r24
     a88:	f1 1d       	adc	r31, r1
     a8a:	80 81       	ld	r24, Z
     a8c:	86 0f       	add	r24, r22
     a8e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <LCD_sendcmd>
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	2a 97       	sbiw	r28, 0x0a	; 10
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	de bf       	out	0x3e, r29	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     ab2:	99 23       	and	r25, r25
     ab4:	dc f5       	brge	.+118    	; 0xb2c <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
     ab6:	90 95       	com	r25
     ab8:	80 95       	com	r24
     aba:	70 95       	com	r23
     abc:	61 95       	neg	r22
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	8f 4f       	sbci	r24, 0xFF	; 255
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     ac4:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     ac6:	13 c0       	rjmp	.+38     	; 0xaee <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     ac8:	2a e0       	ldi	r18, 0x0A	; 10
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__divmodsi4>
     ad4:	e1 e0       	ldi	r30, 0x01	; 1
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	ec 0f       	add	r30, r28
     ada:	fd 1f       	adc	r31, r29
     adc:	e1 0f       	add	r30, r17
     ade:	f1 1d       	adc	r31, r1
     ae0:	60 5d       	subi	r22, 0xD0	; 208
     ae2:	60 83       	st	Z, r22
			s32_a_num /= 10;
     ae4:	62 2f       	mov	r22, r18
     ae6:	73 2f       	mov	r23, r19
     ae8:	84 2f       	mov	r24, r20
     aea:	95 2f       	mov	r25, r21
			i++;
     aec:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     aee:	16 16       	cp	r1, r22
     af0:	17 06       	cpc	r1, r23
     af2:	18 06       	cpc	r1, r24
     af4:	19 06       	cpc	r1, r25
     af6:	44 f3       	brlt	.-48     	; 0xac8 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     af8:	e1 e0       	ldi	r30, 0x01	; 1
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	ec 0f       	add	r30, r28
     afe:	fd 1f       	adc	r31, r29
     b00:	e1 0f       	add	r30, r17
     b02:	f1 1d       	adc	r31, r1
     b04:	8d e2       	ldi	r24, 0x2D	; 45
     b06:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     b08:	1f 5f       	subi	r17, 0xFF	; 255
     b0a:	0d c0       	rjmp	.+26     	; 0xb26 <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
     b0c:	e1 2f       	mov	r30, r17
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	8c 0f       	add	r24, r28
     b18:	9d 1f       	adc	r25, r29
     b1a:	e8 0f       	add	r30, r24
     b1c:	f9 1f       	adc	r31, r25
     b1e:	80 81       	ld	r24, Z
     b20:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     b24:	11 50       	subi	r17, 0x01	; 1
     b26:	11 11       	cpse	r17, r1
     b28:	f1 cf       	rjmp	.-30     	; 0xb0c <LCD_writeint+0x70>
     b2a:	39 c0       	rjmp	.+114    	; 0xb9e <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     b2c:	61 15       	cp	r22, r1
     b2e:	71 05       	cpc	r23, r1
     b30:	81 05       	cpc	r24, r1
     b32:	91 05       	cpc	r25, r1
     b34:	21 f4       	brne	.+8      	; 0xb3e <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
     b36:	80 e3       	ldi	r24, 0x30	; 48
     b38:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
     b3c:	30 c0       	rjmp	.+96     	; 0xb9e <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     b3e:	16 16       	cp	r1, r22
     b40:	17 06       	cpc	r1, r23
     b42:	18 06       	cpc	r1, r24
     b44:	19 06       	cpc	r1, r25
     b46:	ac f0       	brlt	.+42     	; 0xb72 <LCD_writeint+0xd6>
     b48:	2a c0       	rjmp	.+84     	; 0xb9e <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     b4a:	2a e0       	ldi	r18, 0x0A	; 10
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	0e 94 c8 0a 	call	0x1590	; 0x1590 <__divmodsi4>
     b56:	e1 e0       	ldi	r30, 0x01	; 1
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	ec 0f       	add	r30, r28
     b5c:	fd 1f       	adc	r31, r29
     b5e:	e1 0f       	add	r30, r17
     b60:	f1 1d       	adc	r31, r1
     b62:	60 5d       	subi	r22, 0xD0	; 208
     b64:	60 83       	st	Z, r22
			s32_a_num /= 10;
     b66:	62 2f       	mov	r22, r18
     b68:	73 2f       	mov	r23, r19
     b6a:	84 2f       	mov	r24, r20
     b6c:	95 2f       	mov	r25, r21
			i++;
     b6e:	1f 5f       	subi	r17, 0xFF	; 255
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <LCD_writeint+0xd8>
     b72:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     b74:	16 16       	cp	r1, r22
     b76:	17 06       	cpc	r1, r23
     b78:	18 06       	cpc	r1, r24
     b7a:	19 06       	cpc	r1, r25
     b7c:	34 f3       	brlt	.-52     	; 0xb4a <LCD_writeint+0xae>
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     b80:	e1 2f       	mov	r30, r17
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	31 97       	sbiw	r30, 0x01	; 1
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	8c 0f       	add	r24, r28
     b8c:	9d 1f       	adc	r25, r29
     b8e:	e8 0f       	add	r30, r24
     b90:	f9 1f       	adc	r31, r25
     b92:	80 81       	ld	r24, Z
     b94:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     b98:	11 50       	subi	r17, 0x01	; 1
     b9a:	11 11       	cpse	r17, r1
     b9c:	f1 cf       	rjmp	.-30     	; 0xb80 <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     b9e:	2a 96       	adiw	r28, 0x0a	; 10
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	08 95       	ret

00000bb2 <MOTOR_init>:
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
	
	switch(u8_a_motorid)
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	b9 f0       	breq	.+46     	; 0xbe4 <MOTOR_init+0x32>
     bb6:	28 f0       	brcs	.+10     	; 0xbc2 <MOTOR_init+0x10>
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	29 f1       	breq	.+74     	; 0xc06 <MOTOR_init+0x54>
     bbc:	83 30       	cpi	r24, 0x03	; 3
     bbe:	a1 f1       	breq	.+104    	; 0xc28 <MOTOR_init+0x76>
     bc0:	44 c0       	rjmp	.+136    	; 0xc4a <MOTOR_init+0x98>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
     bc2:	41 e0       	ldi	r20, 0x01	; 1
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
     bcc:	41 e0       	ldi	r20, 0x01	; 1
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
     bd6:	41 e0       	ldi	r20, 0x01	; 1
     bd8:	62 e0       	ldi	r22, 0x02	; 2
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     be0:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
		break;
     be2:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	63 e0       	ldi	r22, 0x03	; 3
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	64 e0       	ldi	r22, 0x04	; 4
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	65 e0       	ldi	r22, 0x05	; 5
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     c02:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     c04:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
     c06:	41 e0       	ldi	r20, 0x01	; 1
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
     c10:	41 e0       	ldi	r20, 0x01	; 1
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     c1a:	41 e0       	ldi	r20, 0x01	; 1
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     c24:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     c26:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	63 e0       	ldi	r22, 0x03	; 3
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
     c32:	41 e0       	ldi	r20, 0x01	; 1
     c34:	64 e0       	ldi	r22, 0x04	; 4
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	65 e0       	ldi	r22, 0x05	; 5
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     c46:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     c48:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_initstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     c4a:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_initstatus ; /** RETURN THE FINAL STATUS **/
}
     c4c:	08 95       	ret

00000c4e <MOTOR_rotateclkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	91 f0       	breq	.+36     	; 0xc76 <MOTOR_rotateclkdir+0x28>
     c52:	28 f0       	brcs	.+10     	; 0xc5e <MOTOR_rotateclkdir+0x10>
     c54:	82 30       	cpi	r24, 0x02	; 2
     c56:	d9 f0       	breq	.+54     	; 0xc8e <MOTOR_rotateclkdir+0x40>
     c58:	83 30       	cpi	r24, 0x03	; 3
     c5a:	29 f1       	breq	.+74     	; 0xca6 <MOTOR_rotateclkdir+0x58>
     c5c:	30 c0       	rjmp	.+96     	; 0xcbe <MOTOR_rotateclkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     c5e:	41 e0       	ldi	r20, 0x01	; 1
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c72:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     c74:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	63 e0       	ldi	r22, 0x03	; 3
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	64 e0       	ldi	r22, 0x04	; 4
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c8a:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     c8c:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ca2:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     ca4:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	63 e0       	ldi	r22, 0x03	; 3
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	64 e0       	ldi	r22, 0x04	; 4
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     cba:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     cbc:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motordirectionstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     cbe:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motordirectionstatus ; /** RETURN THE FINAL STATUS **/
}
     cc0:	08 95       	ret

00000cc2 <MOTOR_rotateanticlkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	91 f0       	breq	.+36     	; 0xcea <MOTOR_rotateanticlkdir+0x28>
     cc6:	28 f0       	brcs	.+10     	; 0xcd2 <MOTOR_rotateanticlkdir+0x10>
     cc8:	82 30       	cpi	r24, 0x02	; 2
     cca:	d9 f0       	breq	.+54     	; 0xd02 <MOTOR_rotateanticlkdir+0x40>
     ccc:	83 30       	cpi	r24, 0x03	; 3
     cce:	29 f1       	breq	.+74     	; 0xd1a <MOTOR_rotateanticlkdir+0x58>
     cd0:	30 c0       	rjmp	.+96     	; 0xd32 <MOTOR_rotateanticlkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	61 e0       	ldi	r22, 0x01	; 1
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ce6:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     ce8:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	63 e0       	ldi	r22, 0x03	; 3
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	64 e0       	ldi	r22, 0x04	; 4
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     cfe:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     d00:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	61 e0       	ldi	r22, 0x01	; 1
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d16:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     d18:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	63 e0       	ldi	r22, 0x03	; 3
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     d24:	41 e0       	ldi	r20, 0x01	; 1
     d26:	64 e0       	ldi	r22, 0x04	; 4
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d2e:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     d30:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motorrotatestatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d32:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
     d34:	08 95       	ret

00000d36 <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	69 f0       	breq	.+26     	; 0xd54 <MOTOR_turnoff+0x1e>
     d3a:	28 f0       	brcs	.+10     	; 0xd46 <MOTOR_turnoff+0x10>
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	89 f0       	breq	.+34     	; 0xd62 <MOTOR_turnoff+0x2c>
     d40:	83 30       	cpi	r24, 0x03	; 3
     d42:	b1 f0       	breq	.+44     	; 0xd70 <MOTOR_turnoff+0x3a>
     d44:	1c c0       	rjmp	.+56     	; 0xd7e <MOTOR_turnoff+0x48>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	62 e0       	ldi	r22, 0x02	; 2
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d50:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     d52:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	65 e0       	ldi	r22, 0x05	; 5
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d5e:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     d60:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	62 e0       	ldi	r22, 0x02	; 2
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d6c:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     d6e:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	65 e0       	ldi	r22, 0x05	; 5
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d7a:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     d7c:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d7e:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     d80:	08 95       	ret

00000d82 <MOTOR_turnon>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d82:	81 30       	cpi	r24, 0x01	; 1
     d84:	69 f0       	breq	.+26     	; 0xda0 <MOTOR_turnon+0x1e>
     d86:	28 f0       	brcs	.+10     	; 0xd92 <MOTOR_turnon+0x10>
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	89 f0       	breq	.+34     	; 0xdae <MOTOR_turnon+0x2c>
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	b1 f0       	breq	.+44     	; 0xdbc <MOTOR_turnon+0x3a>
     d90:	1c c0       	rjmp	.+56     	; 0xdca <MOTOR_turnon+0x48>
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	62 e0       	ldi	r22, 0x02	; 2
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d9c:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     d9e:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     da0:	41 e0       	ldi	r20, 0x01	; 1
     da2:	65 e0       	ldi	r22, 0x05	; 5
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     daa:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     dac:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     dae:	41 e0       	ldi	r20, 0x01	; 1
     db0:	62 e0       	ldi	r22, 0x02	; 2
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     db8:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     dba:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     dbc:	41 e0       	ldi	r20, 0x01	; 1
     dbe:	65 e0       	ldi	r22, 0x05	; 5
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dc6:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     dc8:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     dca:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     dcc:	08 95       	ret

00000dce <US_init>:
/** RETURNS : VOID                                                **/
/*******************************************************************/
void US_init(void)
{
	/** INITIALIZE THE TRIGGER PIN AS OUTPUT PIN **/
	DIO_setpindir(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_OUTPUT);
     dce:	41 e0       	ldi	r20, 0x01	; 1
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 05 07 	call	0xe0a	; 0xe0a <DIO_setpindir>
     dd8:	08 95       	ret

00000dda <US_sendtrigger>:
/** RETURNS : EN_ultrasonicreturn                                 **/
/*******************************************************************/
EN_ultrasonicreturn US_sendtrigger(void)
{
	/** SEND PULSE OF 15 MICROSECOND **/
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_HIGH);
     dda:	41 e0       	ldi	r20, 0x01	; 1
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
	TMR0_delaymicros(15);
     de4:	6f e0       	ldi	r22, 0x0F	; 15
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 ee 08 	call	0x11dc	; 0x11dc <TMR0_delaymicros>
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_LOW);
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	0e 94 84 07 	call	0xf08	; 0xf08 <DIO_setpinvalue>
}
     dfa:	08 95       	ret

00000dfc <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZE APPLICATION MODULES **/
     dfc:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_setentry(); /** SET THE ENTRY DATA **/
     e00:	0e 94 76 00 	call	0xec	; 0xec <APP_setentry>
	
    while (1) 
    {	
		APP_start(); /** SUPER LOOP **/	
     e04:	0e 94 11 01 	call	0x222	; 0x222 <APP_start>
     e08:	fd cf       	rjmp	.-6      	; 0xe04 <main+0x8>

00000e0a <DIO_setpindir>:
     e0a:	44 23       	and	r20, r20
     e0c:	19 f0       	breq	.+6      	; 0xe14 <DIO_setpindir+0xa>
     e0e:	41 30       	cpi	r20, 0x01	; 1
     e10:	e9 f1       	breq	.+122    	; 0xe8c <DIO_setpindir+0x82>
     e12:	74 c0       	rjmp	.+232    	; 0xefc <DIO_setpindir+0xf2>
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	99 f0       	breq	.+38     	; 0xe3e <DIO_setpindir+0x34>
     e18:	28 f0       	brcs	.+10     	; 0xe24 <DIO_setpindir+0x1a>
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	e9 f0       	breq	.+58     	; 0xe58 <DIO_setpindir+0x4e>
     e1e:	83 30       	cpi	r24, 0x03	; 3
     e20:	41 f1       	breq	.+80     	; 0xe72 <DIO_setpindir+0x68>
     e22:	6e c0       	rjmp	.+220    	; 0xf00 <DIO_setpindir+0xf6>
     e24:	2a b3       	in	r18, 0x1a	; 26
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_setpindir+0x26>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	6a 95       	dec	r22
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_setpindir+0x22>
     e34:	80 95       	com	r24
     e36:	82 23       	and	r24, r18
     e38:	8a bb       	out	0x1a, r24	; 26
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	08 95       	ret
     e3e:	27 b3       	in	r18, 0x17	; 23
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <DIO_setpindir+0x40>
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	6a 95       	dec	r22
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <DIO_setpindir+0x3c>
     e4e:	80 95       	com	r24
     e50:	82 23       	and	r24, r18
     e52:	87 bb       	out	0x17, r24	; 23
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	08 95       	ret
     e58:	24 b3       	in	r18, 0x14	; 20
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_setpindir+0x5a>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	6a 95       	dec	r22
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_setpindir+0x56>
     e68:	80 95       	com	r24
     e6a:	82 23       	and	r24, r18
     e6c:	84 bb       	out	0x14, r24	; 20
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	08 95       	ret
     e72:	21 b3       	in	r18, 0x11	; 17
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <DIO_setpindir+0x74>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	6a 95       	dec	r22
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <DIO_setpindir+0x70>
     e82:	80 95       	com	r24
     e84:	82 23       	and	r24, r18
     e86:	81 bb       	out	0x11, r24	; 17
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	08 95       	ret
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	91 f0       	breq	.+36     	; 0xeb4 <DIO_setpindir+0xaa>
     e90:	28 f0       	brcs	.+10     	; 0xe9c <DIO_setpindir+0x92>
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	d9 f0       	breq	.+54     	; 0xecc <DIO_setpindir+0xc2>
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	29 f1       	breq	.+74     	; 0xee4 <DIO_setpindir+0xda>
     e9a:	34 c0       	rjmp	.+104    	; 0xf04 <DIO_setpindir+0xfa>
     e9c:	2a b3       	in	r18, 0x1a	; 26
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_setpindir+0x9e>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	6a 95       	dec	r22
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_setpindir+0x9a>
     eac:	82 2b       	or	r24, r18
     eae:	8a bb       	out	0x1a, r24	; 26
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	08 95       	ret
     eb4:	27 b3       	in	r18, 0x17	; 23
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <DIO_setpindir+0xb6>
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	6a 95       	dec	r22
     ec2:	e2 f7       	brpl	.-8      	; 0xebc <DIO_setpindir+0xb2>
     ec4:	82 2b       	or	r24, r18
     ec6:	87 bb       	out	0x17, r24	; 23
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	08 95       	ret
     ecc:	24 b3       	in	r18, 0x14	; 20
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_setpindir+0xce>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	6a 95       	dec	r22
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_setpindir+0xca>
     edc:	82 2b       	or	r24, r18
     ede:	84 bb       	out	0x14, r24	; 20
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	08 95       	ret
     ee4:	21 b3       	in	r18, 0x11	; 17
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_setpindir+0xe6>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	6a 95       	dec	r22
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_setpindir+0xe2>
     ef4:	82 2b       	or	r24, r18
     ef6:	81 bb       	out	0x11, r24	; 17
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	08 95       	ret
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	08 95       	ret
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	08 95       	ret
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	08 95       	ret

00000f08 <DIO_setpinvalue>:
     f08:	44 23       	and	r20, r20
     f0a:	19 f0       	breq	.+6      	; 0xf12 <DIO_setpinvalue+0xa>
     f0c:	41 30       	cpi	r20, 0x01	; 1
     f0e:	e9 f1       	breq	.+122    	; 0xf8a <DIO_setpinvalue+0x82>
     f10:	74 c0       	rjmp	.+232    	; 0xffa <DIO_setpinvalue+0xf2>
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	99 f0       	breq	.+38     	; 0xf3c <DIO_setpinvalue+0x34>
     f16:	28 f0       	brcs	.+10     	; 0xf22 <DIO_setpinvalue+0x1a>
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	e9 f0       	breq	.+58     	; 0xf56 <DIO_setpinvalue+0x4e>
     f1c:	83 30       	cpi	r24, 0x03	; 3
     f1e:	41 f1       	breq	.+80     	; 0xf70 <DIO_setpinvalue+0x68>
     f20:	6e c0       	rjmp	.+220    	; 0xffe <DIO_setpinvalue+0xf6>
     f22:	2b b3       	in	r18, 0x1b	; 27
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_setpinvalue+0x26>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	6a 95       	dec	r22
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_setpinvalue+0x22>
     f32:	80 95       	com	r24
     f34:	82 23       	and	r24, r18
     f36:	8b bb       	out	0x1b, r24	; 27
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	08 95       	ret
     f3c:	28 b3       	in	r18, 0x18	; 24
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_setpinvalue+0x40>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	6a 95       	dec	r22
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_setpinvalue+0x3c>
     f4c:	80 95       	com	r24
     f4e:	82 23       	and	r24, r18
     f50:	88 bb       	out	0x18, r24	; 24
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	08 95       	ret
     f56:	25 b3       	in	r18, 0x15	; 21
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_setpinvalue+0x5a>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	6a 95       	dec	r22
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_setpinvalue+0x56>
     f66:	80 95       	com	r24
     f68:	82 23       	and	r24, r18
     f6a:	85 bb       	out	0x15, r24	; 21
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	08 95       	ret
     f70:	22 b3       	in	r18, 0x12	; 18
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_setpinvalue+0x74>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	6a 95       	dec	r22
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_setpinvalue+0x70>
     f80:	80 95       	com	r24
     f82:	82 23       	and	r24, r18
     f84:	82 bb       	out	0x12, r24	; 18
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	08 95       	ret
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	91 f0       	breq	.+36     	; 0xfb2 <DIO_setpinvalue+0xaa>
     f8e:	28 f0       	brcs	.+10     	; 0xf9a <DIO_setpinvalue+0x92>
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	d9 f0       	breq	.+54     	; 0xfca <DIO_setpinvalue+0xc2>
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	29 f1       	breq	.+74     	; 0xfe2 <DIO_setpinvalue+0xda>
     f98:	34 c0       	rjmp	.+104    	; 0x1002 <DIO_setpinvalue+0xfa>
     f9a:	2b b3       	in	r18, 0x1b	; 27
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_setpinvalue+0x9e>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	6a 95       	dec	r22
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_setpinvalue+0x9a>
     faa:	82 2b       	or	r24, r18
     fac:	8b bb       	out	0x1b, r24	; 27
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	08 95       	ret
     fb2:	28 b3       	in	r18, 0x18	; 24
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_setpinvalue+0xb6>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	6a 95       	dec	r22
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_setpinvalue+0xb2>
     fc2:	82 2b       	or	r24, r18
     fc4:	88 bb       	out	0x18, r24	; 24
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	08 95       	ret
     fca:	25 b3       	in	r18, 0x15	; 21
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_setpinvalue+0xce>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	6a 95       	dec	r22
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_setpinvalue+0xca>
     fda:	82 2b       	or	r24, r18
     fdc:	85 bb       	out	0x15, r24	; 21
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	08 95       	ret
     fe2:	22 b3       	in	r18, 0x12	; 18
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_setpinvalue+0xe6>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	6a 95       	dec	r22
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_setpinvalue+0xe2>
     ff2:	82 2b       	or	r24, r18
     ff4:	82 bb       	out	0x12, r24	; 18
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	08 95       	ret
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	08 95       	ret
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	08 95       	ret
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	08 95       	ret

00001006 <DIO_readpin>:
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	99 f0       	breq	.+38     	; 0x1030 <DIO_readpin+0x2a>
    100a:	28 f0       	brcs	.+10     	; 0x1016 <DIO_readpin+0x10>
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	e9 f0       	breq	.+58     	; 0x104a <DIO_readpin+0x44>
    1010:	83 30       	cpi	r24, 0x03	; 3
    1012:	41 f1       	breq	.+80     	; 0x1064 <DIO_readpin+0x5e>
    1014:	34 c0       	rjmp	.+104    	; 0x107e <DIO_readpin+0x78>
    1016:	89 b3       	in	r24, 0x19	; 25
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_readpin+0x1a>
    101c:	95 95       	asr	r25
    101e:	87 95       	ror	r24
    1020:	6a 95       	dec	r22
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_readpin+0x16>
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	89 bb       	out	0x19, r24	; 25
    1028:	fa 01       	movw	r30, r20
    102a:	80 83       	st	Z, r24
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	08 95       	ret
    1030:	86 b3       	in	r24, 0x16	; 22
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_readpin+0x34>
    1036:	95 95       	asr	r25
    1038:	87 95       	ror	r24
    103a:	6a 95       	dec	r22
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_readpin+0x30>
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	86 bb       	out	0x16, r24	; 22
    1042:	fa 01       	movw	r30, r20
    1044:	80 83       	st	Z, r24
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	08 95       	ret
    104a:	83 b3       	in	r24, 0x13	; 19
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_readpin+0x4e>
    1050:	95 95       	asr	r25
    1052:	87 95       	ror	r24
    1054:	6a 95       	dec	r22
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_readpin+0x4a>
    1058:	81 70       	andi	r24, 0x01	; 1
    105a:	83 bb       	out	0x13, r24	; 19
    105c:	fa 01       	movw	r30, r20
    105e:	80 83       	st	Z, r24
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	08 95       	ret
    1064:	80 b3       	in	r24, 0x10	; 16
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 c0       	rjmp	.+4      	; 0x106e <DIO_readpin+0x68>
    106a:	95 95       	asr	r25
    106c:	87 95       	ror	r24
    106e:	6a 95       	dec	r22
    1070:	e2 f7       	brpl	.-8      	; 0x106a <DIO_readpin+0x64>
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	80 bb       	out	0x10, r24	; 16
    1076:	fa 01       	movw	r30, r20
    1078:	80 83       	st	Z, r24
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	08 95       	ret
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	08 95       	ret

00001082 <DIO_togglepin>:
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	91 f0       	breq	.+36     	; 0x10aa <DIO_togglepin+0x28>
    1086:	28 f0       	brcs	.+10     	; 0x1092 <DIO_togglepin+0x10>
    1088:	82 30       	cpi	r24, 0x02	; 2
    108a:	d9 f0       	breq	.+54     	; 0x10c2 <DIO_togglepin+0x40>
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	29 f1       	breq	.+74     	; 0x10da <DIO_togglepin+0x58>
    1090:	30 c0       	rjmp	.+96     	; 0x10f2 <DIO_togglepin+0x70>
    1092:	2b b3       	in	r18, 0x1b	; 27
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_togglepin+0x1c>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	6a 95       	dec	r22
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_togglepin+0x18>
    10a2:	82 27       	eor	r24, r18
    10a4:	8b bb       	out	0x1b, r24	; 27
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	08 95       	ret
    10aa:	28 b3       	in	r18, 0x18	; 24
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_togglepin+0x34>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	6a 95       	dec	r22
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_togglepin+0x30>
    10ba:	82 27       	eor	r24, r18
    10bc:	88 bb       	out	0x18, r24	; 24
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	08 95       	ret
    10c2:	25 b3       	in	r18, 0x15	; 21
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_togglepin+0x4c>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	6a 95       	dec	r22
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_togglepin+0x48>
    10d2:	82 27       	eor	r24, r18
    10d4:	85 bb       	out	0x15, r24	; 21
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	08 95       	ret
    10da:	22 b3       	in	r18, 0x12	; 18
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_togglepin+0x64>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	6a 95       	dec	r22
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_togglepin+0x60>
    10ea:	82 27       	eor	r24, r18
    10ec:	82 bb       	out	0x12, r24	; 18
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	08 95       	ret
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	08 95       	ret

000010f6 <SET_GLOBALINTERRUPT>:
/** RETURNS    : VOID                                   */
/********************************************************/
void SET_GLOBALINTERRUPT(void)
{
	#if GLOBAL_INTERRUPT_STATE  ==  GLOBAL_INTERRUPT_STATE_ENABLE /** ENABLE GLOBAL INTERRUPTS **/
	  set_bit(SREG , 7);
    10f6:	8f b7       	in	r24, 0x3f	; 63
    10f8:	80 68       	ori	r24, 0x80	; 128
    10fa:	8f bf       	out	0x3f, r24	; 63
    10fc:	08 95       	ret

000010fe <INT0_init>:
/** ARGUMENTS  : VOID                                   */
/** RETURNS    : VOID                                   */
/********************************************************/
void INT0_init(void)
{
	SET_GLOBALINTERRUPT(); /** ENABLE GLOBAL INTERRUPTS */
    10fe:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <SET_GLOBALINTERRUPT>
	  clear_bit(MCUCR , 0);
	  clear_bit(MCUCR , 1);
	  
	#elif EXTERNAL_INT0_TRIGGER  == INT_TRIGGER_ANY_CHANGE
	
	  set_bit(MCUCR , 0);
    1102:	85 b7       	in	r24, 0x35	; 53
    1104:	81 60       	ori	r24, 0x01	; 1
    1106:	85 bf       	out	0x35, r24	; 53
	  clear_bit(MCUCR ,1);
    1108:	85 b7       	in	r24, 0x35	; 53
    110a:	8d 7f       	andi	r24, 0xFD	; 253
    110c:	85 bf       	out	0x35, r24	; 53
	  
	#endif
	
	/* Enable INT0 */
	set_bit(GICR , 6);	
    110e:	8b b7       	in	r24, 0x3b	; 59
    1110:	80 64       	ori	r24, 0x40	; 64
    1112:	8b bf       	out	0x3b, r24	; 59
    1114:	08 95       	ret

00001116 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
    1116:	83 b7       	in	r24, 0x33	; 51
    1118:	8f 77       	andi	r24, 0x7F	; 127
    111a:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
    111c:	83 b7       	in	r24, 0x33	; 51
    111e:	8f 7b       	andi	r24, 0xBF	; 191
    1120:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
    1122:	83 b7       	in	r24, 0x33	; 51
    1124:	87 7f       	andi	r24, 0xF7	; 247
    1126:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
    1128:	83 b7       	in	r24, 0x33	; 51
    112a:	8f 7e       	andi	r24, 0xEF	; 239
    112c:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
    112e:	83 b7       	in	r24, 0x33	; 51
    1130:	8f 7d       	andi	r24, 0xDF	; 223
    1132:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	08 95       	ret

00001138 <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
    1138:	83 b7       	in	r24, 0x33	; 51
    113a:	81 60       	ori	r24, 0x01	; 1
    113c:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
    113e:	83 b7       	in	r24, 0x33	; 51
    1140:	8d 7f       	andi	r24, 0xFD	; 253
    1142:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
    1144:	83 b7       	in	r24, 0x33	; 51
    1146:	8b 7f       	andi	r24, 0xFB	; 251
    1148:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret

0000114e <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
    114e:	83 b7       	in	r24, 0x33	; 51
    1150:	8e 7f       	andi	r24, 0xFE	; 254
    1152:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
    1154:	83 b7       	in	r24, 0x33	; 51
    1156:	8d 7f       	andi	r24, 0xFD	; 253
    1158:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
    115a:	83 b7       	in	r24, 0x33	; 51
    115c:	8b 7f       	andi	r24, 0xFB	; 251
    115e:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	08 95       	ret

00001164 <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    1164:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatunsisf>
    1168:	2f e6       	ldi	r18, 0x6F	; 111
    116a:	32 e1       	ldi	r19, 0x12	; 18
    116c:	43 e0       	ldi	r20, 0x03	; 3
    116e:	5d e3       	ldi	r21, 0x3D	; 61
    1170:	0e 94 99 09 	call	0x1332	; 0x1332 <__divsf3>
    1174:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fixunssfsi>
    1178:	60 93 a1 00 	sts	0x00A1, r22	; 0x8000a1 <u32_gs_tmr0nuofovs>
    117c:	70 93 a2 00 	sts	0x00A2, r23	; 0x8000a2 <u32_gs_tmr0nuofovs+0x1>
    1180:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <u32_gs_tmr0nuofovs+0x2>
    1184:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <u32_gs_tmr0nuofovs+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
    1188:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
    118a:	0e 94 9c 08 	call	0x1138	; 0x1138 <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    1194:	0a c0       	rjmp	.+20     	; 0x11aa <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
    1196:	08 b6       	in	r0, 0x38	; 56
    1198:	00 fe       	sbrs	r0, 0
    119a:	fd cf       	rjmp	.-6      	; 0x1196 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
    119c:	88 b7       	in	r24, 0x38	; 56
    119e:	81 60       	ori	r24, 0x01	; 1
    11a0:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
    11a2:	4f 5f       	subi	r20, 0xFF	; 255
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255
    11a6:	6f 4f       	sbci	r22, 0xFF	; 255
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    11aa:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <u32_gs_tmr0nuofovs>
    11ae:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <u32_gs_tmr0nuofovs+0x1>
    11b2:	a0 91 a3 00 	lds	r26, 0x00A3	; 0x8000a3 <u32_gs_tmr0nuofovs+0x2>
    11b6:	b0 91 a4 00 	lds	r27, 0x00A4	; 0x8000a4 <u32_gs_tmr0nuofovs+0x3>
    11ba:	48 17       	cp	r20, r24
    11bc:	59 07       	cpc	r21, r25
    11be:	6a 07       	cpc	r22, r26
    11c0:	7b 07       	cpc	r23, r27
    11c2:	48 f3       	brcs	.-46     	; 0x1196 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
    11c4:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <u32_gs_tmr0nuofovs>
    11c8:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <u32_gs_tmr0nuofovs+0x1>
    11cc:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <u32_gs_tmr0nuofovs+0x2>
    11d0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
    11d4:	0e 94 a7 08 	call	0x114e	; 0x114e <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	08 95       	ret

000011dc <TMR0_delaymicros>:
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	u32_gs_tmr0nuofovs = (u32_a_delaymicros / 32);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	68 94       	set
    11e2:	14 f8       	bld	r1, 4
    11e4:	b6 95       	lsr	r27
    11e6:	a7 95       	ror	r26
    11e8:	97 95       	ror	r25
    11ea:	87 95       	ror	r24
    11ec:	16 94       	lsr	r1
    11ee:	d1 f7       	brne	.-12     	; 0x11e4 <TMR0_delaymicros+0x8>
    11f0:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u32_gs_tmr0nuofovs>
    11f4:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <u32_gs_tmr0nuofovs+0x1>
    11f8:	a0 93 a3 00 	sts	0x00A3, r26	; 0x8000a3 <u32_gs_tmr0nuofovs+0x2>
    11fc:	b0 93 a4 00 	sts	0x00A4, r27	; 0x8000a4 <u32_gs_tmr0nuofovs+0x3>
	
	TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
    1200:	12 be       	out	0x32, r1	; 50
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
    1202:	0e 94 9c 08 	call	0x1138	; 0x1138 <TMR0_start>
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delaymicros(uint32_t u32_a_delaymicros)
{
	uint32_t u32_a_overflowcounter = 0 ;
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    120c:	0a c0       	rjmp	.+20     	; 0x1222 <TMR0_delaymicros+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
    120e:	08 b6       	in	r0, 0x38	; 56
    1210:	00 fe       	sbrs	r0, 0
    1212:	fd cf       	rjmp	.-6      	; 0x120e <TMR0_delaymicros+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
    1214:	88 b7       	in	r24, 0x38	; 56
    1216:	81 60       	ori	r24, 0x01	; 1
    1218:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
    121a:	4f 5f       	subi	r20, 0xFF	; 255
    121c:	5f 4f       	sbci	r21, 0xFF	; 255
    121e:	6f 4f       	sbci	r22, 0xFF	; 255
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    1222:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <u32_gs_tmr0nuofovs>
    1226:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <u32_gs_tmr0nuofovs+0x1>
    122a:	a0 91 a3 00 	lds	r26, 0x00A3	; 0x8000a3 <u32_gs_tmr0nuofovs+0x2>
    122e:	b0 91 a4 00 	lds	r27, 0x00A4	; 0x8000a4 <u32_gs_tmr0nuofovs+0x3>
    1232:	48 17       	cp	r20, r24
    1234:	59 07       	cpc	r21, r25
    1236:	6a 07       	cpc	r22, r26
    1238:	7b 07       	cpc	r23, r27
    123a:	48 f3       	brcs	.-46     	; 0x120e <TMR0_delaymicros+0x32>
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_a_overflowcounter = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop(); /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
    123c:	0e 94 a7 08 	call	0x114e	; 0x114e <TMR0_stop>
	
	return en_a_delaystatus ; 
}
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	08 95       	ret

00001244 <TMR1_init>:
	 
	#elif TMR1_CLK_SOURCE == TMR1_INTERNAL_CLK_SOURCE
	
	 #if TMR1_MODE == NORMAL_MODE
	  
	  clear_bit(TCCR1A , 0);
    1244:	8f b5       	in	r24, 0x2f	; 47
    1246:	8e 7f       	andi	r24, 0xFE	; 254
    1248:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1A , 1);
    124a:	8f b5       	in	r24, 0x2f	; 47
    124c:	8d 7f       	andi	r24, 0xFD	; 253
    124e:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1B , 3);
    1250:	8e b5       	in	r24, 0x2e	; 46
    1252:	87 7f       	andi	r24, 0xF7	; 247
    1254:	8e bd       	out	0x2e, r24	; 46
	  clear_bit(TCCR1B , 4);
    1256:	8e b5       	in	r24, 0x2e	; 46
    1258:	8f 7e       	andi	r24, 0xEF	; 239
    125a:	8e bd       	out	0x2e, r24	; 46
	  
	  /* NON PWM MODE */
	  set_bit(TCCR1A , 2);
    125c:	8f b5       	in	r24, 0x2f	; 47
    125e:	84 60       	ori	r24, 0x04	; 4
    1260:	8f bd       	out	0x2f, r24	; 47
	  set_bit(TCCR1A , 3);
    1262:	8f b5       	in	r24, 0x2f	; 47
    1264:	88 60       	ori	r24, 0x08	; 8
    1266:	8f bd       	out	0x2f, r24	; 47
	  
	  /* ENABLE INTERRUPT */
	  set_bit(SREG , 7);   /** ENABLE GLOBAL INTTERUPTS **/
    1268:	8f b7       	in	r24, 0x3f	; 63
    126a:	80 68       	ori	r24, 0x80	; 128
    126c:	8f bf       	out	0x3f, r24	; 63
	  set_bit(TIMSK , 2);  /** NABLE TMR1 INTERRUPT **/
    126e:	89 b7       	in	r24, 0x39	; 57
    1270:	9a b7       	in	r25, 0x3a	; 58
    1272:	84 60       	ori	r24, 0x04	; 4
    1274:	9a bf       	out	0x3a, r25	; 58
    1276:	89 bf       	out	0x39, r24	; 57
	 /* SET THE OC1B BIT AS OUTPUT */
	 DIO_setpindir(DIO_PORTD , DIO_PIN4 , DIO_PIN_OUTPUT);
	#endif
	#endif
#endif
}
    1278:	08 95       	ret

0000127a <TMR1_start>:
/******************************************************************************/
TMR1_start_status TMR1_start(void)
{
  TMR1_start_status en_a_startstatus = TMR1_NOT_VALID_START ; /** VARIABLE TO HOLD THE RETURN STATUS **/
  
  TCNT1 = 0 ;   /** SET THE INITIAL VALUE IN TCNT1 REGISTER **/
    127a:	1d bc       	out	0x2d, r1	; 45
    127c:	1c bc       	out	0x2c, r1	; 44

         en_a_startstatus = TMR1_VALID_START ; /** STATUS IS VALID **/
	 
	 #elif TMR1_PRESCALLER_VALUE == NO_PRESCALER
	 
	 set_bit(TCCR1B , 0);
    127e:	8e b5       	in	r24, 0x2e	; 46
    1280:	81 60       	ori	r24, 0x01	; 1
    1282:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 1);
    1284:	8e b5       	in	r24, 0x2e	; 46
    1286:	8d 7f       	andi	r24, 0xFD	; 253
    1288:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 2);
    128a:	8e b5       	in	r24, 0x2e	; 46
    128c:	8b 7f       	andi	r24, 0xFB	; 251
    128e:	8e bd       	out	0x2e, r24	; 46

	 #endif
	#endif

  return en_a_startstatus ; /** RETURN THE FINAL STATUS **/
}
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	08 95       	ret

00001294 <TMR1_stop>:
TMR1_stop_status TMR1_stop(void)
{
     TMR1_stop_status en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** VARIABLE TO HOLD THE RETURN STATUS  **/
	
     /* TURN THE CLOCK OFF */
     clear_bit(TCCR1B , 0);
    1294:	8e b5       	in	r24, 0x2e	; 46
    1296:	8e 7f       	andi	r24, 0xFE	; 254
    1298:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 1);
    129a:	8e b5       	in	r24, 0x2e	; 46
    129c:	8d 7f       	andi	r24, 0xFD	; 253
    129e:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 2);
    12a0:	8e b5       	in	r24, 0x2e	; 46
    12a2:	8b 7f       	andi	r24, 0xFB	; 251
    12a4:	8e bd       	out	0x2e, r24	; 46

     en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** UPDATE THE STOP STATUS **/

     return en_a_stopstatus ; /** RETURN THE FINAL STATUS **/

}
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	08 95       	ret

000012aa <TMR1_getvalue>:
/** ARGUMENTS  : u16_a_value                                                 **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR1_getvalue(uint16t * u16_a_value)
{
	*u16_a_value = TCNT1 ; /** GET THE VALUE FROM TIMER1 COUNTING REGISTER **/
    12aa:	2c b5       	in	r18, 0x2c	; 44
    12ac:	3d b5       	in	r19, 0x2d	; 45
    12ae:	fc 01       	movw	r30, r24
    12b0:	31 83       	std	Z+1, r19	; 0x01
    12b2:	20 83       	st	Z, r18
    12b4:	08 95       	ret

000012b6 <TMR1_setcounterval>:
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
void TMR1_setcounterval(uint16t u16_a_tmrval)
{
	TCNT1 = u16_a_tmrval ; /** SET THE PASSED VALUE IN TIMER COUNTING REGISTER **/
    12b6:	9d bd       	out	0x2d, r25	; 45
    12b8:	8c bd       	out	0x2c, r24	; 44
    12ba:	08 95       	ret

000012bc <TMR2_init>:
	/* TIMER MODE OF TMR0 */
	#elif TIMER2_CLK_SRC == INTERNAL_CLK_SRC
	
	#if TIMER2_MODE == TMR2_NORMAL_MODE
	
	clear_bit(TCCR2 , 7);
    12bc:	85 b5       	in	r24, 0x25	; 37
    12be:	8f 77       	andi	r24, 0x7F	; 127
    12c0:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 6);
    12c2:	85 b5       	in	r24, 0x25	; 37
    12c4:	8f 7b       	andi	r24, 0xBF	; 191
    12c6:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 3);
    12c8:	85 b5       	in	r24, 0x25	; 37
    12ca:	87 7f       	andi	r24, 0xF7	; 247
    12cc:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 4);
    12ce:	85 b5       	in	r24, 0x25	; 37
    12d0:	8f 7e       	andi	r24, 0xEF	; 239
    12d2:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 5);
    12d4:	85 b5       	in	r24, 0x25	; 37
    12d6:	8f 7d       	andi	r24, 0xDF	; 223
    12d8:	85 bd       	out	0x25, r24	; 37
	
	/* ENABLE INTERRUPT */
	set_bit(SREG , 7);
    12da:	8f b7       	in	r24, 0x3f	; 63
    12dc:	80 68       	ori	r24, 0x80	; 128
    12de:	8f bf       	out	0x3f, r24	; 63
	set_bit(TIMSK , 6);
    12e0:	89 b7       	in	r24, 0x39	; 57
    12e2:	80 64       	ori	r24, 0x40	; 64
    12e4:	89 bf       	out	0x39, r24	; 57
	#endif
	#endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	08 95       	ret

000012ea <TMR2_start>:
	
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR2 , 0);
    12ea:	85 b5       	in	r24, 0x25	; 37
    12ec:	81 60       	ori	r24, 0x01	; 1
    12ee:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    12f0:	85 b5       	in	r24, 0x25	; 37
    12f2:	8d 7f       	andi	r24, 0xFD	; 253
    12f4:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    12f6:	85 b5       	in	r24, 0x25	; 37
    12f8:	8b 7f       	andi	r24, 0xFB	; 251
    12fa:	85 bd       	out	0x25, r24	; 37
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	08 95       	ret

00001300 <TMR2_stop>:
TMR2_stop_error TMR2_stop(void)
{
	TMR2_stop_error en_a_stopStatus = TMR2_VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR2 , 0);
    1300:	85 b5       	in	r24, 0x25	; 37
    1302:	8e 7f       	andi	r24, 0xFE	; 254
    1304:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    1306:	85 b5       	in	r24, 0x25	; 37
    1308:	8d 7f       	andi	r24, 0xFD	; 253
    130a:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    130c:	85 b5       	in	r24, 0x25	; 37
    130e:	8b 7f       	andi	r24, 0xFB	; 251
    1310:	85 bd       	out	0x25, r24	; 37
	
	en_a_stopStatus = TMR2_VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	08 95       	ret

00001316 <TMR2_getovs>:
	u32_a_ovs = (u16_a_delay / 0.256);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
	

	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	u32_a_ovs = (u16_a_delay / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    1316:	bc 01       	movw	r22, r24
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__floatunsisf>
    1320:	2f e6       	ldi	r18, 0x6F	; 111
    1322:	32 e1       	ldi	r19, 0x12	; 18
    1324:	43 e0       	ldi	r20, 0x03	; 3
    1326:	5d e3       	ldi	r21, 0x3D	; 61
    1328:	0e 94 99 09 	call	0x1332	; 0x1332 <__divsf3>
    132c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <__fixunssfsi>
	
	#endif
	
	return u32_a_ovs ;  /** RETURN THE CALCULATED NUMBER OF OVERFLOWS **/
}
    1330:	08 95       	ret

00001332 <__divsf3>:
    1332:	0e 94 ad 09 	call	0x135a	; 0x135a <__divsf3x>
    1336:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__fp_round>
    133a:	0e 94 87 0a 	call	0x150e	; 0x150e <__fp_pscB>
    133e:	58 f0       	brcs	.+22     	; 0x1356 <__divsf3+0x24>
    1340:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fp_pscA>
    1344:	40 f0       	brcs	.+16     	; 0x1356 <__divsf3+0x24>
    1346:	29 f4       	brne	.+10     	; 0x1352 <__divsf3+0x20>
    1348:	5f 3f       	cpi	r21, 0xFF	; 255
    134a:	29 f0       	breq	.+10     	; 0x1356 <__divsf3+0x24>
    134c:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__fp_inf>
    1350:	51 11       	cpse	r21, r1
    1352:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__fp_szero>
    1356:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_nan>

0000135a <__divsf3x>:
    135a:	0e 94 9f 0a 	call	0x153e	; 0x153e <__fp_split3>
    135e:	68 f3       	brcs	.-38     	; 0x133a <__divsf3+0x8>

00001360 <__divsf3_pse>:
    1360:	99 23       	and	r25, r25
    1362:	b1 f3       	breq	.-20     	; 0x1350 <__divsf3+0x1e>
    1364:	55 23       	and	r21, r21
    1366:	91 f3       	breq	.-28     	; 0x134c <__divsf3+0x1a>
    1368:	95 1b       	sub	r25, r21
    136a:	55 0b       	sbc	r21, r21
    136c:	bb 27       	eor	r27, r27
    136e:	aa 27       	eor	r26, r26
    1370:	62 17       	cp	r22, r18
    1372:	73 07       	cpc	r23, r19
    1374:	84 07       	cpc	r24, r20
    1376:	38 f0       	brcs	.+14     	; 0x1386 <__divsf3_pse+0x26>
    1378:	9f 5f       	subi	r25, 0xFF	; 255
    137a:	5f 4f       	sbci	r21, 0xFF	; 255
    137c:	22 0f       	add	r18, r18
    137e:	33 1f       	adc	r19, r19
    1380:	44 1f       	adc	r20, r20
    1382:	aa 1f       	adc	r26, r26
    1384:	a9 f3       	breq	.-22     	; 0x1370 <__divsf3_pse+0x10>
    1386:	35 d0       	rcall	.+106    	; 0x13f2 <__divsf3_pse+0x92>
    1388:	0e 2e       	mov	r0, r30
    138a:	3a f0       	brmi	.+14     	; 0x139a <__divsf3_pse+0x3a>
    138c:	e0 e8       	ldi	r30, 0x80	; 128
    138e:	32 d0       	rcall	.+100    	; 0x13f4 <__divsf3_pse+0x94>
    1390:	91 50       	subi	r25, 0x01	; 1
    1392:	50 40       	sbci	r21, 0x00	; 0
    1394:	e6 95       	lsr	r30
    1396:	00 1c       	adc	r0, r0
    1398:	ca f7       	brpl	.-14     	; 0x138c <__divsf3_pse+0x2c>
    139a:	2b d0       	rcall	.+86     	; 0x13f2 <__divsf3_pse+0x92>
    139c:	fe 2f       	mov	r31, r30
    139e:	29 d0       	rcall	.+82     	; 0x13f2 <__divsf3_pse+0x92>
    13a0:	66 0f       	add	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	bb 1f       	adc	r27, r27
    13a8:	26 17       	cp	r18, r22
    13aa:	37 07       	cpc	r19, r23
    13ac:	48 07       	cpc	r20, r24
    13ae:	ab 07       	cpc	r26, r27
    13b0:	b0 e8       	ldi	r27, 0x80	; 128
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <__divsf3_pse+0x56>
    13b4:	bb 0b       	sbc	r27, r27
    13b6:	80 2d       	mov	r24, r0
    13b8:	bf 01       	movw	r22, r30
    13ba:	ff 27       	eor	r31, r31
    13bc:	93 58       	subi	r25, 0x83	; 131
    13be:	5f 4f       	sbci	r21, 0xFF	; 255
    13c0:	3a f0       	brmi	.+14     	; 0x13d0 <__divsf3_pse+0x70>
    13c2:	9e 3f       	cpi	r25, 0xFE	; 254
    13c4:	51 05       	cpc	r21, r1
    13c6:	78 f0       	brcs	.+30     	; 0x13e6 <__divsf3_pse+0x86>
    13c8:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__fp_inf>
    13cc:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__fp_szero>
    13d0:	5f 3f       	cpi	r21, 0xFF	; 255
    13d2:	e4 f3       	brlt	.-8      	; 0x13cc <__divsf3_pse+0x6c>
    13d4:	98 3e       	cpi	r25, 0xE8	; 232
    13d6:	d4 f3       	brlt	.-12     	; 0x13cc <__divsf3_pse+0x6c>
    13d8:	86 95       	lsr	r24
    13da:	77 95       	ror	r23
    13dc:	67 95       	ror	r22
    13de:	b7 95       	ror	r27
    13e0:	f7 95       	ror	r31
    13e2:	9f 5f       	subi	r25, 0xFF	; 255
    13e4:	c9 f7       	brne	.-14     	; 0x13d8 <__divsf3_pse+0x78>
    13e6:	88 0f       	add	r24, r24
    13e8:	91 1d       	adc	r25, r1
    13ea:	96 95       	lsr	r25
    13ec:	87 95       	ror	r24
    13ee:	97 f9       	bld	r25, 7
    13f0:	08 95       	ret
    13f2:	e1 e0       	ldi	r30, 0x01	; 1
    13f4:	66 0f       	add	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	88 1f       	adc	r24, r24
    13fa:	bb 1f       	adc	r27, r27
    13fc:	62 17       	cp	r22, r18
    13fe:	73 07       	cpc	r23, r19
    1400:	84 07       	cpc	r24, r20
    1402:	ba 07       	cpc	r27, r26
    1404:	20 f0       	brcs	.+8      	; 0x140e <__divsf3_pse+0xae>
    1406:	62 1b       	sub	r22, r18
    1408:	73 0b       	sbc	r23, r19
    140a:	84 0b       	sbc	r24, r20
    140c:	ba 0b       	sbc	r27, r26
    140e:	ee 1f       	adc	r30, r30
    1410:	88 f7       	brcc	.-30     	; 0x13f4 <__divsf3_pse+0x94>
    1412:	e0 95       	com	r30
    1414:	08 95       	ret

00001416 <__fixunssfsi>:
    1416:	0e 94 a7 0a 	call	0x154e	; 0x154e <__fp_splitA>
    141a:	88 f0       	brcs	.+34     	; 0x143e <__fixunssfsi+0x28>
    141c:	9f 57       	subi	r25, 0x7F	; 127
    141e:	98 f0       	brcs	.+38     	; 0x1446 <__fixunssfsi+0x30>
    1420:	b9 2f       	mov	r27, r25
    1422:	99 27       	eor	r25, r25
    1424:	b7 51       	subi	r27, 0x17	; 23
    1426:	b0 f0       	brcs	.+44     	; 0x1454 <__fixunssfsi+0x3e>
    1428:	e1 f0       	breq	.+56     	; 0x1462 <__fixunssfsi+0x4c>
    142a:	66 0f       	add	r22, r22
    142c:	77 1f       	adc	r23, r23
    142e:	88 1f       	adc	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	1a f0       	brmi	.+6      	; 0x143a <__fixunssfsi+0x24>
    1434:	ba 95       	dec	r27
    1436:	c9 f7       	brne	.-14     	; 0x142a <__fixunssfsi+0x14>
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <__fixunssfsi+0x4c>
    143a:	b1 30       	cpi	r27, 0x01	; 1
    143c:	91 f0       	breq	.+36     	; 0x1462 <__fixunssfsi+0x4c>
    143e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__fp_zero>
    1442:	b1 e0       	ldi	r27, 0x01	; 1
    1444:	08 95       	ret
    1446:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__fp_zero>
    144a:	67 2f       	mov	r22, r23
    144c:	78 2f       	mov	r23, r24
    144e:	88 27       	eor	r24, r24
    1450:	b8 5f       	subi	r27, 0xF8	; 248
    1452:	39 f0       	breq	.+14     	; 0x1462 <__fixunssfsi+0x4c>
    1454:	b9 3f       	cpi	r27, 0xF9	; 249
    1456:	cc f3       	brlt	.-14     	; 0x144a <__fixunssfsi+0x34>
    1458:	86 95       	lsr	r24
    145a:	77 95       	ror	r23
    145c:	67 95       	ror	r22
    145e:	b3 95       	inc	r27
    1460:	d9 f7       	brne	.-10     	; 0x1458 <__fixunssfsi+0x42>
    1462:	3e f4       	brtc	.+14     	; 0x1472 <__fixunssfsi+0x5c>
    1464:	90 95       	com	r25
    1466:	80 95       	com	r24
    1468:	70 95       	com	r23
    146a:	61 95       	neg	r22
    146c:	7f 4f       	sbci	r23, 0xFF	; 255
    146e:	8f 4f       	sbci	r24, 0xFF	; 255
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	08 95       	ret

00001474 <__floatunsisf>:
    1474:	e8 94       	clt
    1476:	09 c0       	rjmp	.+18     	; 0x148a <__floatsisf+0x12>

00001478 <__floatsisf>:
    1478:	97 fb       	bst	r25, 7
    147a:	3e f4       	brtc	.+14     	; 0x148a <__floatsisf+0x12>
    147c:	90 95       	com	r25
    147e:	80 95       	com	r24
    1480:	70 95       	com	r23
    1482:	61 95       	neg	r22
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	8f 4f       	sbci	r24, 0xFF	; 255
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	99 23       	and	r25, r25
    148c:	a9 f0       	breq	.+42     	; 0x14b8 <__floatsisf+0x40>
    148e:	f9 2f       	mov	r31, r25
    1490:	96 e9       	ldi	r25, 0x96	; 150
    1492:	bb 27       	eor	r27, r27
    1494:	93 95       	inc	r25
    1496:	f6 95       	lsr	r31
    1498:	87 95       	ror	r24
    149a:	77 95       	ror	r23
    149c:	67 95       	ror	r22
    149e:	b7 95       	ror	r27
    14a0:	f1 11       	cpse	r31, r1
    14a2:	f8 cf       	rjmp	.-16     	; 0x1494 <__floatsisf+0x1c>
    14a4:	fa f4       	brpl	.+62     	; 0x14e4 <__floatsisf+0x6c>
    14a6:	bb 0f       	add	r27, r27
    14a8:	11 f4       	brne	.+4      	; 0x14ae <__floatsisf+0x36>
    14aa:	60 ff       	sbrs	r22, 0
    14ac:	1b c0       	rjmp	.+54     	; 0x14e4 <__floatsisf+0x6c>
    14ae:	6f 5f       	subi	r22, 0xFF	; 255
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	8f 4f       	sbci	r24, 0xFF	; 255
    14b4:	9f 4f       	sbci	r25, 0xFF	; 255
    14b6:	16 c0       	rjmp	.+44     	; 0x14e4 <__floatsisf+0x6c>
    14b8:	88 23       	and	r24, r24
    14ba:	11 f0       	breq	.+4      	; 0x14c0 <__floatsisf+0x48>
    14bc:	96 e9       	ldi	r25, 0x96	; 150
    14be:	11 c0       	rjmp	.+34     	; 0x14e2 <__floatsisf+0x6a>
    14c0:	77 23       	and	r23, r23
    14c2:	21 f0       	breq	.+8      	; 0x14cc <__floatsisf+0x54>
    14c4:	9e e8       	ldi	r25, 0x8E	; 142
    14c6:	87 2f       	mov	r24, r23
    14c8:	76 2f       	mov	r23, r22
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <__floatsisf+0x5e>
    14cc:	66 23       	and	r22, r22
    14ce:	71 f0       	breq	.+28     	; 0x14ec <__floatsisf+0x74>
    14d0:	96 e8       	ldi	r25, 0x86	; 134
    14d2:	86 2f       	mov	r24, r22
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	2a f0       	brmi	.+10     	; 0x14e4 <__floatsisf+0x6c>
    14da:	9a 95       	dec	r25
    14dc:	66 0f       	add	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	da f7       	brpl	.-10     	; 0x14da <__floatsisf+0x62>
    14e4:	88 0f       	add	r24, r24
    14e6:	96 95       	lsr	r25
    14e8:	87 95       	ror	r24
    14ea:	97 f9       	bld	r25, 7
    14ec:	08 95       	ret

000014ee <__fp_inf>:
    14ee:	97 f9       	bld	r25, 7
    14f0:	9f 67       	ori	r25, 0x7F	; 127
    14f2:	80 e8       	ldi	r24, 0x80	; 128
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	08 95       	ret

000014fa <__fp_nan>:
    14fa:	9f ef       	ldi	r25, 0xFF	; 255
    14fc:	80 ec       	ldi	r24, 0xC0	; 192
    14fe:	08 95       	ret

00001500 <__fp_pscA>:
    1500:	00 24       	eor	r0, r0
    1502:	0a 94       	dec	r0
    1504:	16 16       	cp	r1, r22
    1506:	17 06       	cpc	r1, r23
    1508:	18 06       	cpc	r1, r24
    150a:	09 06       	cpc	r0, r25
    150c:	08 95       	ret

0000150e <__fp_pscB>:
    150e:	00 24       	eor	r0, r0
    1510:	0a 94       	dec	r0
    1512:	12 16       	cp	r1, r18
    1514:	13 06       	cpc	r1, r19
    1516:	14 06       	cpc	r1, r20
    1518:	05 06       	cpc	r0, r21
    151a:	08 95       	ret

0000151c <__fp_round>:
    151c:	09 2e       	mov	r0, r25
    151e:	03 94       	inc	r0
    1520:	00 0c       	add	r0, r0
    1522:	11 f4       	brne	.+4      	; 0x1528 <__fp_round+0xc>
    1524:	88 23       	and	r24, r24
    1526:	52 f0       	brmi	.+20     	; 0x153c <__fp_round+0x20>
    1528:	bb 0f       	add	r27, r27
    152a:	40 f4       	brcc	.+16     	; 0x153c <__fp_round+0x20>
    152c:	bf 2b       	or	r27, r31
    152e:	11 f4       	brne	.+4      	; 0x1534 <__fp_round+0x18>
    1530:	60 ff       	sbrs	r22, 0
    1532:	04 c0       	rjmp	.+8      	; 0x153c <__fp_round+0x20>
    1534:	6f 5f       	subi	r22, 0xFF	; 255
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	8f 4f       	sbci	r24, 0xFF	; 255
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	08 95       	ret

0000153e <__fp_split3>:
    153e:	57 fd       	sbrc	r21, 7
    1540:	90 58       	subi	r25, 0x80	; 128
    1542:	44 0f       	add	r20, r20
    1544:	55 1f       	adc	r21, r21
    1546:	59 f0       	breq	.+22     	; 0x155e <__fp_splitA+0x10>
    1548:	5f 3f       	cpi	r21, 0xFF	; 255
    154a:	71 f0       	breq	.+28     	; 0x1568 <__fp_splitA+0x1a>
    154c:	47 95       	ror	r20

0000154e <__fp_splitA>:
    154e:	88 0f       	add	r24, r24
    1550:	97 fb       	bst	r25, 7
    1552:	99 1f       	adc	r25, r25
    1554:	61 f0       	breq	.+24     	; 0x156e <__fp_splitA+0x20>
    1556:	9f 3f       	cpi	r25, 0xFF	; 255
    1558:	79 f0       	breq	.+30     	; 0x1578 <__fp_splitA+0x2a>
    155a:	87 95       	ror	r24
    155c:	08 95       	ret
    155e:	12 16       	cp	r1, r18
    1560:	13 06       	cpc	r1, r19
    1562:	14 06       	cpc	r1, r20
    1564:	55 1f       	adc	r21, r21
    1566:	f2 cf       	rjmp	.-28     	; 0x154c <__fp_split3+0xe>
    1568:	46 95       	lsr	r20
    156a:	f1 df       	rcall	.-30     	; 0x154e <__fp_splitA>
    156c:	08 c0       	rjmp	.+16     	; 0x157e <__fp_splitA+0x30>
    156e:	16 16       	cp	r1, r22
    1570:	17 06       	cpc	r1, r23
    1572:	18 06       	cpc	r1, r24
    1574:	99 1f       	adc	r25, r25
    1576:	f1 cf       	rjmp	.-30     	; 0x155a <__fp_splitA+0xc>
    1578:	86 95       	lsr	r24
    157a:	71 05       	cpc	r23, r1
    157c:	61 05       	cpc	r22, r1
    157e:	08 94       	sec
    1580:	08 95       	ret

00001582 <__fp_zero>:
    1582:	e8 94       	clt

00001584 <__fp_szero>:
    1584:	bb 27       	eor	r27, r27
    1586:	66 27       	eor	r22, r22
    1588:	77 27       	eor	r23, r23
    158a:	cb 01       	movw	r24, r22
    158c:	97 f9       	bld	r25, 7
    158e:	08 95       	ret

00001590 <__divmodsi4>:
    1590:	05 2e       	mov	r0, r21
    1592:	97 fb       	bst	r25, 7
    1594:	1e f4       	brtc	.+6      	; 0x159c <__divmodsi4+0xc>
    1596:	00 94       	com	r0
    1598:	0e 94 df 0a 	call	0x15be	; 0x15be <__negsi2>
    159c:	57 fd       	sbrc	r21, 7
    159e:	07 d0       	rcall	.+14     	; 0x15ae <__divmodsi4_neg2>
    15a0:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <__udivmodsi4>
    15a4:	07 fc       	sbrc	r0, 7
    15a6:	03 d0       	rcall	.+6      	; 0x15ae <__divmodsi4_neg2>
    15a8:	4e f4       	brtc	.+18     	; 0x15bc <__divmodsi4_exit>
    15aa:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__negsi2>

000015ae <__divmodsi4_neg2>:
    15ae:	50 95       	com	r21
    15b0:	40 95       	com	r20
    15b2:	30 95       	com	r19
    15b4:	21 95       	neg	r18
    15b6:	3f 4f       	sbci	r19, 0xFF	; 255
    15b8:	4f 4f       	sbci	r20, 0xFF	; 255
    15ba:	5f 4f       	sbci	r21, 0xFF	; 255

000015bc <__divmodsi4_exit>:
    15bc:	08 95       	ret

000015be <__negsi2>:
    15be:	90 95       	com	r25
    15c0:	80 95       	com	r24
    15c2:	70 95       	com	r23
    15c4:	61 95       	neg	r22
    15c6:	7f 4f       	sbci	r23, 0xFF	; 255
    15c8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ca:	9f 4f       	sbci	r25, 0xFF	; 255
    15cc:	08 95       	ret

000015ce <__umulhisi3>:
    15ce:	a2 9f       	mul	r26, r18
    15d0:	b0 01       	movw	r22, r0
    15d2:	b3 9f       	mul	r27, r19
    15d4:	c0 01       	movw	r24, r0
    15d6:	a3 9f       	mul	r26, r19
    15d8:	70 0d       	add	r23, r0
    15da:	81 1d       	adc	r24, r1
    15dc:	11 24       	eor	r1, r1
    15de:	91 1d       	adc	r25, r1
    15e0:	b2 9f       	mul	r27, r18
    15e2:	70 0d       	add	r23, r0
    15e4:	81 1d       	adc	r24, r1
    15e6:	11 24       	eor	r1, r1
    15e8:	91 1d       	adc	r25, r1
    15ea:	08 95       	ret

000015ec <__udivmodsi4>:
    15ec:	a1 e2       	ldi	r26, 0x21	; 33
    15ee:	1a 2e       	mov	r1, r26
    15f0:	aa 1b       	sub	r26, r26
    15f2:	bb 1b       	sub	r27, r27
    15f4:	fd 01       	movw	r30, r26
    15f6:	0d c0       	rjmp	.+26     	; 0x1612 <__udivmodsi4_ep>

000015f8 <__udivmodsi4_loop>:
    15f8:	aa 1f       	adc	r26, r26
    15fa:	bb 1f       	adc	r27, r27
    15fc:	ee 1f       	adc	r30, r30
    15fe:	ff 1f       	adc	r31, r31
    1600:	a2 17       	cp	r26, r18
    1602:	b3 07       	cpc	r27, r19
    1604:	e4 07       	cpc	r30, r20
    1606:	f5 07       	cpc	r31, r21
    1608:	20 f0       	brcs	.+8      	; 0x1612 <__udivmodsi4_ep>
    160a:	a2 1b       	sub	r26, r18
    160c:	b3 0b       	sbc	r27, r19
    160e:	e4 0b       	sbc	r30, r20
    1610:	f5 0b       	sbc	r31, r21

00001612 <__udivmodsi4_ep>:
    1612:	66 1f       	adc	r22, r22
    1614:	77 1f       	adc	r23, r23
    1616:	88 1f       	adc	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	1a 94       	dec	r1
    161c:	69 f7       	brne	.-38     	; 0x15f8 <__udivmodsi4_loop>
    161e:	60 95       	com	r22
    1620:	70 95       	com	r23
    1622:	80 95       	com	r24
    1624:	90 95       	com	r25
    1626:	9b 01       	movw	r18, r22
    1628:	ac 01       	movw	r20, r24
    162a:	bd 01       	movw	r22, r26
    162c:	cf 01       	movw	r24, r30
    162e:	08 95       	ret

00001630 <_exit>:
    1630:	f8 94       	cli

00001632 <__stop_program>:
    1632:	ff cf       	rjmp	.-2      	; 0x1632 <__stop_program>
