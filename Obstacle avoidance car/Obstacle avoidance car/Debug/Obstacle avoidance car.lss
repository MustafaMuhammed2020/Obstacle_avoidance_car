
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001704  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00001704  00001798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000a6  008000a6  000017de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001810  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003701  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101e  00000000  00000000  0000525d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000201d  00000000  00000000  0000627b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00008298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000efd  00000000  00000000  00008878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143e  00000000  00000000  00009775  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000abb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 66 07 	call	0xecc	; 0xecc <main>
      8a:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint32_t u32_g_tick = 0 ;            /** GLOBAL VARIABLE TO BE COMPARED WITH DELAY TICKS **/   

/** FUNCTION TO INITIALIZE APPLICATION MODULES **/
void APP_init()
{
    ICU_init(); /** INITIALIZE ICU **/
      92:	0e 94 b8 03 	call	0x770	; 0x770 <ICU_init>

	US_init(); /** INITILAIZATION ULTRASONIC MODULE **/
      96:	0e 94 4f 07 	call	0xe9e	; 0xe9e <US_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
      9a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <TMR0_init>
	
	TMR2_init() ; /** INITIALIZE TIMER 2 **/
      9e:	0e 94 c6 09 	call	0x138c	; 0x138c <TMR2_init>
	
	KEYPAD_init() ; /** INITIALIZE KEYPAD **/
      a2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <KEYPAD_init>
	
	Button_init(); /** INITIALIZATION OF BUTTON **/
      a6:	0e 94 93 03 	call	0x726	; 0x726 <Button_init>
	
	LCD_init(); /** INITIALIZE LCD **/
      aa:	0e 94 03 05 	call	0xa06	; 0xa06 <LCD_init>
	
	TMR0_delayms(MS_DELAY_50); /** DELAY FOR LCD INITIALIZATION **/
      ae:	62 e3       	ldi	r22, 0x32	; 50
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>

	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 41 06 	call	0xc82	; 0xc82 <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 41 06 	call	0xc82	; 0xc82 <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 41 06 	call	0xc82	; 0xc82 <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 41 06 	call	0xc82	; 0xc82 <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MOTOR_rotateclkdir>
      ea:	08 95       	ret

000000ec <APP_setentry>:

}

/** FUNCTION TO SET DEFAULTS **/
void APP_setentry()
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <APP_setentry+0x6>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_a_btnstatus = 0 , u8_a_pressednum = 0 ;
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	1a 82       	std	Y+2, r1	; 0x02
	
 	u32_g_tick = 0 ;
      fa:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
      fe:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     102:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     106:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     10a:	88 e8       	ldi	r24, 0x88	; 136
     10c:	93 e1       	ldi	r25, 0x13	; 19
     10e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <TMR2_getovs>
     112:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     116:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     11a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     11e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>

 	TMR2_start() ; /** START TIMER 2 **/
     122:	0e 94 dd 09 	call	0x13ba	; 0x13ba <TMR2_start>

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     126:	39 c0       	rjmp	.+114    	; 0x19a <APP_setentry+0xae>
	{
 		LCD_goto(LCD_POS_0 , LCD_POS_1);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
 		LCD_writestr("Set Def. Rot");
     130:	80 e6       	ldi	r24, 0x60	; 96
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCD_writestr>

 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON PRESSED **/
     138:	ae 01       	movw	r20, r28
     13a:	4f 5f       	subi	r20, 0xFF	; 255
     13c:	5f 4f       	sbci	r21, 0xFF	; 255
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 99 03 	call	0x732	; 0x732 <Is_pressed>
 		TMR0_delayms(MS_DELAY_100); /** WAIT 100 MS FOR BUTTON TO SETTLE **/
     146:	64 e6       	ldi	r22, 0x64	; 100
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>
 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON IS STILL PRESSED **/
     152:	ae 01       	movw	r20, r28
     154:	4f 5f       	subi	r20, 0xFF	; 255
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 99 03 	call	0x732	; 0x732 <Is_pressed>

		if (u8_a_btnstatus) /** IF THE BUTTON PRESSED **/
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 23       	and	r24, r24
     164:	d1 f0       	breq	.+52     	; 0x19a <APP_setentry+0xae>
 		{
 			u8_g_rotationcounter++ ; /** INCREASE ROTATION COUNTER BY 1 **/
     166:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <u8_g_rotationcounter>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <u8_g_rotationcounter>

 			if (u8_g_rotationcounter == LEFT_ROTATION) /** LEFT ROTATION **/
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	41 f4       	brne	.+16     	; 0x184 <APP_setentry+0x98>
 			{
				LCD_goto(LCD_POS_1 , LCD_POS_1);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
				LCD_writestr("LEFT ROTATION");
     17a:	8d e6       	ldi	r24, 0x6D	; 109
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCD_writestr>
     182:	0a c0       	rjmp	.+20     	; 0x198 <APP_setentry+0xac>
			}
	 		else if(u8_g_rotationcounter == RIGHT_ROTATION) /** RIGHT ROTATION **/
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	41 f4       	brne	.+16     	; 0x198 <APP_setentry+0xac>
	 		{
 				LCD_goto(LCD_POS_1 , LCD_POS_1);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
 				LCD_writestr("RIGHT ROTATION");
     190:	8b e7       	ldi	r24, 0x7B	; 123
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCD_writestr>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
     198:	19 82       	std	Y+1, r1	; 0x01
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

 	TMR2_start() ; /** START TIMER 2 **/

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     19a:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     19e:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     1a2:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     1a6:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     1aa:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     1ae:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     1b2:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     1b6:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     1ba:	48 17       	cp	r20, r24
     1bc:	59 07       	cpc	r21, r25
     1be:	6a 07       	cpc	r22, r26
     1c0:	7b 07       	cpc	r23, r27
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <APP_setentry+0xda>
     1c4:	b1 cf       	rjmp	.-158    	; 0x128 <APP_setentry+0x3c>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
 		}
 	}
	
 	TMR2_stop(); /** STOP TIMER 2 **/
     1c6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <TMR2_stop>
		
	do /** ACCEPT KEYPAD BUTTON 1 FROM USER **/
	{
 		KEYPAD_read(&u8_a_pressednum);
     1ca:	ce 01       	movw	r24, r28
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	0e 94 17 04 	call	0x82e	; 0x82e <KEYPAD_read>
 	} while (u8_a_pressednum != START_BTN);
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	81 33       	cpi	r24, 0x31	; 49
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <APP_setentry+0xde>

 	 LCD_sendcmd(LCD_CLEAR);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     1de:	64 e1       	ldi	r22, 0x14	; 20
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>
	 
	 LCD_goto(LCD_POS_0 , LCD_POS_2);
     1ea:	62 e0       	ldi	r22, 0x02	; 2
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
	 LCD_writestr("WAITING..");
     1f2:	8a e8       	ldi	r24, 0x8A	; 138
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCD_writestr>
	 
	 TMR0_delayms(MS_DELAY_2000); /** WAIT 2 SECONDS **/
     1fa:	60 ed       	ldi	r22, 0xD0	; 208
     1fc:	77 e0       	ldi	r23, 0x07	; 7
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>
	 
	 LCD_sendcmd(LCD_CLEAR);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     20c:	64 e1       	ldi	r22, 0x14	; 20
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>
	 
	 LCD_goto(LCD_POS_0, LCD_POS_1) ; /** DISPLAY THE DISTANCE **/
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
	 LCD_writestr("Dis:");
     220:	84 e9       	ldi	r24, 0x94	; 148
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCD_writestr>
	 
	 LCD_goto(LCD_POS_0, LCD_POS_8) ; /** DISPLAY THE SPEED **/
     228:	68 e0       	ldi	r22, 0x08	; 8
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
	 LCD_writechar('S');
     230:	83 e5       	ldi	r24, 0x53	; 83
     232:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writechar>
	 LCD_writechar(':');
     236:	8a e3       	ldi	r24, 0x3A	; 58
     238:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writechar>
	 
	 LCD_goto(LCD_POS_1, LCD_POS_1) ; /** DISPLAY THE DIRECTION OF MOVEMENT **/
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
	 LCD_writestr("Dir:");
     244:	89 e9       	ldi	r24, 0x99	; 153
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCD_writestr>
	 
}
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <APP_start>:

void APP_start()
{	
	u32_g_tick = 0 , u32_g_delay = 0 ; /** VARIABLES TO HANDLE THE DELAY **/
     256:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
     25a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     25e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     262:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
     266:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <u32_g_delay>
     26a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <u32_g_delay+0x1>
     26e:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <u32_g_delay+0x2>
     272:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <u32_g_delay+0x3>
	
	US_sendtrigger(); /** SEND TRIGGER **/
     276:	0e 94 55 07 	call	0xeaa	; 0xeaa <US_sendtrigger>
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     27a:	88 e8       	ldi	r24, 0x88	; 136
     27c:	93 e1       	ldi	r25, 0x13	; 19
     27e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <TMR2_getovs>
     282:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     286:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     28a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     28e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     292:	a5 c0       	rjmp	.+330    	; 0x3de <APP_start+0x188>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
     294:	af e9       	ldi	r26, 0x9F	; 159
     296:	b6 e4       	ldi	r27, 0x46	; 70
     298:	0e 94 4f 0b 	call	0x169e	; 0x169e <__umulhisi3>
     29c:	88 0f       	add	r24, r24
     29e:	89 2f       	mov	r24, r25
     2a0:	88 1f       	adc	r24, r24
     2a2:	99 0b       	sbc	r25, r25
     2a4:	91 95       	neg	r25
     2a6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <u8_g_distance>
			
			TMR2_start() ; /** START TIMER 2 **/
     2aa:	0e 94 dd 09 	call	0x13ba	; 0x13ba <TMR2_start>
		
			while (u32_g_tick < u32_g_delay && (u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE )
     2ae:	38 c0       	rjmp	.+112    	; 0x320 <APP_start+0xca>
			{
				/** MOVE WITH 50% SPEED FOR 5 MIN **/
				MOTOR_turnon(MOTOR1_ID);
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
				LCD_goto(LCD_POS_0, LCD_POS_10) ;
     2c8:	6a e0       	ldi	r22, 0x0A	; 10
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
				LCD_writestr("50%");
     2d0:	8e e9       	ldi	r24, 0x9E	; 158
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCD_writestr>
				TMR0_delaymicros(SPEED_50_ON_TIME);
     2d8:	60 ef       	ldi	r22, 0xF0	; 240
     2da:	73 e2       	ldi	r23, 0x23	; 35
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 56 09 	call	0x12ac	; 0x12ac <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     2f6:	83 e0       	ldi	r24, 0x03	; 3
     2f8:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
				LCD_goto(LCD_POS_0, LCD_POS_5) ;
     2fc:	65 e0       	ldi	r22, 0x05	; 5
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
				LCD_writeint(u8_g_distance);
     304:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <LCD_writeint>
				LCD_goto(LCD_POS_1, LCD_POS_5) ;
     312:	65 e0       	ldi	r22, 0x05	; 5
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
				LCD_writechar('F');
     31a:	86 e4       	ldi	r24, 0x46	; 70
     31c:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writechar>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
			
			TMR2_start() ; /** START TIMER 2 **/
		
			while (u32_g_tick < u32_g_delay && (u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE )
     320:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     324:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     328:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     32c:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     330:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     334:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     338:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     33c:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     340:	48 17       	cp	r20, r24
     342:	59 07       	cpc	r21, r25
     344:	6a 07       	cpc	r22, r26
     346:	7b 07       	cpc	r23, r27
     348:	40 f4       	brcc	.+16     	; 0x35a <APP_start+0x104>
     34a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     34e:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     352:	80 3b       	cpi	r24, 0xB0	; 176
     354:	90 48       	sbci	r25, 0x80	; 128
     356:	08 f0       	brcs	.+2      	; 0x35a <APP_start+0x104>
     358:	ab cf       	rjmp	.-170    	; 0x2b0 <APP_start+0x5a>
				LCD_writeint(u8_g_distance);
				LCD_goto(LCD_POS_1, LCD_POS_5) ;
				LCD_writechar('F');
			}
					
			TMR2_stop() ; /** STOP TIMER2 AFTER THE 5 SECONDS **/
     35a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <TMR2_stop>
					
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     370:	83 e0       	ldi	r24, 0x03	; 3
     372:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
			LCD_goto(LCD_POS_0, LCD_POS_10) ;
     376:	6a e0       	ldi	r22, 0x0A	; 10
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
			LCD_writestr("30%");
     37e:	82 ea       	ldi	r24, 0xA2	; 162
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCD_writestr>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     386:	64 e6       	ldi	r22, 0x64	; 100
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 56 09 	call	0x12ac	; 0x12ac <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
			
			TMR0_delaymicros(SPEED_30_OFF_TIME);
     3aa:	60 e2       	ldi	r22, 0x20	; 32
     3ac:	7e e4       	ldi	r23, 0x4E	; 78
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 56 09 	call	0x12ac	; 0x12ac <TMR0_delaymicros>
			LCD_goto(LCD_POS_0, LCD_POS_5) ;
     3b6:	65 e0       	ldi	r22, 0x05	; 5
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
			LCD_writeint(u8_g_distance);
     3be:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 b6 05 	call	0xb6c	; 0xb6c <LCD_writeint>
			LCD_goto(LCD_POS_1, LCD_POS_5) ;
     3cc:	65 e0       	ldi	r22, 0x05	; 5
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
			LCD_writechar('F');
     3d4:	86 e4       	ldi	r24, 0x46	; 70
     3d6:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writechar>
			US_sendtrigger(); /** SEND TRIGGER **/
     3da:	0e 94 55 07 	call	0xeaa	; 0xeaa <US_sendtrigger>
	
	US_sendtrigger(); /** SEND TRIGGER **/
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     3de:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <u16_g_time>
     3e2:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     3e6:	20 3b       	cpi	r18, 0xB0	; 176
     3e8:	80 e8       	ldi	r24, 0x80	; 128
     3ea:	38 07       	cpc	r19, r24
     3ec:	08 f0       	brcs	.+2      	; 0x3f0 <APP_start+0x19a>
     3ee:	52 cf       	rjmp	.-348    	; 0x294 <APP_start+0x3e>
     3f0:	40 c0       	rjmp	.+128    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
	{
		/** CONTINUE WITH 30% **/
		MOTOR_turnon(MOTOR1_ID);
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     3fe:	82 e0       	ldi	r24, 0x02	; 2
     400:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
		LCD_goto(LCD_POS_0, LCD_POS_10) ;
     40a:	6a e0       	ldi	r22, 0x0A	; 10
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
		LCD_writestr("30%");
     412:	82 ea       	ldi	r24, 0xA2	; 162
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCD_writestr>
		TMR0_delaymicros(SPEED_30_ON_TIME);
     41a:	64 e6       	ldi	r22, 0x64	; 100
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 56 09 	call	0x12ac	; 0x12ac <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
		
		TMR0_delaymicros(SPEED_30_OFF_TIME);
     43e:	60 e2       	ldi	r22, 0x20	; 32
     440:	7e e4       	ldi	r23, 0x4E	; 78
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 56 09 	call	0x12ac	; 0x12ac <TMR0_delaymicros>
		LCD_goto(LCD_POS_0, LCD_POS_5) ;
     44a:	65 e0       	ldi	r22, 0x05	; 5
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
		LCD_writeint(u8_g_distance);
     452:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <LCD_writeint>
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
     460:	65 e0       	ldi	r22, 0x05	; 5
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
		LCD_writechar('F');
     468:	86 e4       	ldi	r24, 0x46	; 70
     46a:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writechar>
		US_sendtrigger(); /** SEND TRIGGER **/
     46e:	0e 94 55 07 	call	0xeaa	; 0xeaa <US_sendtrigger>
			LCD_goto(LCD_POS_1, LCD_POS_5) ;
			LCD_writechar('F');
			US_sendtrigger(); /** SEND TRIGGER **/
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
     472:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     476:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     47a:	80 36       	cpi	r24, 0x60	; 96
     47c:	96 43       	sbci	r25, 0x36	; 54
     47e:	08 f0       	brcs	.+2      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     480:	b8 cf       	rjmp	.-144    	; 0x3f2 <APP_start+0x19c>
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
		LCD_writechar('F');
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	
	u32_g_tick = 0 ;
     482:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
     486:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     48a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     48e:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     492:	84 ef       	ldi	r24, 0xF4	; 244
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <TMR2_getovs>
     49a:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     49e:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     4a2:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     4a6:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     4aa:	4e c0       	rjmp	.+156    	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
	{
		/** STOP THEN ROTATE **/
		MOTOR_turnoff(MOTOR1_ID);
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
		
		LCD_goto(LCD_POS_0, LCD_POS_10) ;
     4c4:	6a e0       	ldi	r22, 0x0A	; 10
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
		LCD_writestr("30%");
     4cc:	82 ea       	ldi	r24, 0xA2	; 162
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCD_writestr>
		
		TMR0_delaymicros(SPEED_30_OFF_TIME);
     4d4:	60 e2       	ldi	r22, 0x20	; 32
     4d6:	7e e4       	ldi	r23, 0x4E	; 78
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 56 09 	call	0x12ac	; 0x12ac <TMR0_delaymicros>
		LCD_goto(LCD_POS_0, LCD_POS_5) ;
     4e0:	65 e0       	ldi	r22, 0x05	; 5
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
		LCD_writeint(u8_g_distance);
     4e8:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 b6 05 	call	0xb6c	; 0xb6c <LCD_writeint>
		
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
     4f6:	65 e0       	ldi	r22, 0x05	; 5
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
		LCD_writechar('R');
     4fe:	82 e5       	ldi	r24, 0x52	; 82
     500:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writechar>
		
		TMR2_start() ; /** START TIMER 2 **/
     504:	0e 94 dd 09 	call	0x13ba	; 0x13ba <TMR2_start>
		while (u32_g_tick < u32_g_delay)
     508:	06 c0       	rjmp	.+12     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     510:	83 e0       	ldi	r24, 0x03	; 3
     512:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
		
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
		LCD_writechar('R');
		
		TMR2_start() ; /** START TIMER 2 **/
		while (u32_g_tick < u32_g_delay)
     516:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     51a:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     51e:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     522:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     526:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     52a:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     52e:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     532:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     536:	48 17       	cp	r20, r24
     538:	59 07       	cpc	r21, r25
     53a:	6a 07       	cpc	r22, r26
     53c:	7b 07       	cpc	r23, r27
     53e:	28 f3       	brcs	.-54     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop(); /** STOP TIMER 2 **/
     540:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <TMR2_stop>
			
		US_sendtrigger(); /** SEND TRIGGER **/
     544:	0e 94 55 07 	call	0xeaa	; 0xeaa <US_sendtrigger>
	}
	
	u32_g_tick = 0 ;
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     548:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     54c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     550:	80 54       	subi	r24, 0x40	; 64
     552:	94 42       	sbci	r25, 0x24	; 36
     554:	80 32       	cpi	r24, 0x20	; 32
     556:	92 41       	sbci	r25, 0x12	; 18
     558:	08 f4       	brcc	.+2      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
     55a:	a8 cf       	rjmp	.-176    	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     55c:	61 c0       	rjmp	.+194    	; 0x620 <__EEPROM_REGION_LENGTH__+0x220>
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
	{
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0e 94 c9 06 	call	0xd92	; 0xd92 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR2_ID);
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	0e 94 c9 06 	call	0xd92	; 0xd92 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR3_ID);
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	0e 94 c9 06 	call	0xd92	; 0xd92 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR4_ID);
     570:	83 e0       	ldi	r24, 0x03	; 3
     572:	0e 94 c9 06 	call	0xd92	; 0xd92 <MOTOR_rotateanticlkdir>
		
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     576:	40 c0       	rjmp	.+128    	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
		   {
			  /** GO BACKWARDS WITH 30% SPEED **/
			  MOTOR_turnon(MOTOR1_ID);
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
			  MOTOR_turnon(MOTOR2_ID);
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
		      MOTOR_turnon(MOTOR3_ID);
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
			  MOTOR_turnon(MOTOR4_ID);
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	0e 94 29 07 	call	0xe52	; 0xe52 <MOTOR_turnon>
			  LCD_goto(LCD_POS_0, LCD_POS_10) ;
     590:	6a e0       	ldi	r22, 0x0A	; 10
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
			  LCD_writestr("30%");
     598:	82 ea       	ldi	r24, 0xA2	; 162
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 8b 05 	call	0xb16	; 0xb16 <LCD_writestr>
			  TMR0_delaymicros(SPEED_30_ON_TIME);
     5a0:	64 e6       	ldi	r22, 0x64	; 100
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0e 94 56 09 	call	0x12ac	; 0x12ac <TMR0_delaymicros>
			
			  MOTOR_turnoff(MOTOR1_ID);
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR2_ID);
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR3_ID);
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR4_ID);
     5be:	83 e0       	ldi	r24, 0x03	; 3
     5c0:	0e 94 03 07 	call	0xe06	; 0xe06 <MOTOR_turnoff>
			  
			  TMR0_delaymicros(SPEED_30_OFF_TIME);
     5c4:	60 e2       	ldi	r22, 0x20	; 32
     5c6:	7e e4       	ldi	r23, 0x4E	; 78
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 56 09 	call	0x12ac	; 0x12ac <TMR0_delaymicros>
			  LCD_goto(LCD_POS_0, LCD_POS_5) ;
     5d0:	65 e0       	ldi	r22, 0x05	; 5
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
			  LCD_writeint(u8_g_distance);
     5d8:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 b6 05 	call	0xb6c	; 0xb6c <LCD_writeint>
			  LCD_goto(LCD_POS_1, LCD_POS_5) ;
     5e6:	65 e0       	ldi	r22, 0x05	; 5
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_goto>
			  LCD_writechar('B');
     5ee:	82 e4       	ldi	r24, 0x42	; 66
     5f0:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writechar>
			  US_sendtrigger(); /** SEND TRIGGER **/
     5f4:	0e 94 55 07 	call	0xeaa	; 0xeaa <US_sendtrigger>
		MOTOR_rotateanticlkdir(MOTOR2_ID);
		MOTOR_rotateanticlkdir(MOTOR3_ID);
		MOTOR_rotateanticlkdir(MOTOR4_ID);
		
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     5f8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     5fc:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     600:	80 31       	cpi	r24, 0x10	; 16
     602:	96 42       	sbci	r25, 0x26	; 38
     604:	08 f4       	brcc	.+2      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
     606:	b8 cf       	rjmp	.-144    	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
			  LCD_goto(LCD_POS_1, LCD_POS_5) ;
			  LCD_writechar('B');
			  US_sendtrigger(); /** SEND TRIGGER **/
		   }
		
			MOTOR_rotateclkdir(MOTOR1_ID); /** RETURN TO DEFAULT DIRECTION  **/
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR2_ID);
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR3_ID);
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR4_ID);
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	0e 94 8f 06 	call	0xd1e	; 0xd1e <MOTOR_rotateclkdir>
		TMR2_stop(); /** STOP TIMER 2 **/
			
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
     620:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     624:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     628:	80 34       	cpi	r24, 0x40	; 64
     62a:	94 42       	sbci	r25, 0x24	; 36
     62c:	08 f4       	brcc	.+2      	; 0x630 <__EEPROM_REGION_LENGTH__+0x230>
     62e:	97 cf       	rjmp	.-210    	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
			MOTOR_rotateclkdir(MOTOR1_ID); /** RETURN TO DEFAULT DIRECTION  **/
			MOTOR_rotateclkdir(MOTOR2_ID);
			MOTOR_rotateclkdir(MOTOR3_ID);
			MOTOR_rotateclkdir(MOTOR4_ID);
	}
}
     630:	08 95       	ret

00000632 <__vector_1>:



/** EXTI0 **/
ISR(INT0_vect)
{
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	2f 93       	push	r18
     63e:	3f 93       	push	r19
     640:	4f 93       	push	r20
     642:	5f 93       	push	r21
     644:	6f 93       	push	r22
     646:	7f 93       	push	r23
     648:	8f 93       	push	r24
     64a:	9f 93       	push	r25
     64c:	af 93       	push	r26
     64e:	bf 93       	push	r27
     650:	ef 93       	push	r30
     652:	ff 93       	push	r31
	u8_echoedge++ ; /** INCREASE THE ECHO BY 1 **/
     654:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <u8_echoedge>
     658:	8f 5f       	subi	r24, 0xFF	; 255
     65a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <u8_echoedge>
	
	if(u8_echoedge == FIRST_EDGE ) /** FIRST CHANGE (RISING EDGE) **/
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	19 f4       	brne	.+6      	; 0x668 <__vector_1+0x36>
	{
		ICU_start(); /** START ICU / COUNTING **/
     662:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <ICU_start>
     666:	1f c0       	rjmp	.+62     	; 0x6a6 <__vector_1+0x74>
	}
	
	else if(u8_echoedge == SECOND_EDGE) /** SECOND CHANGE (FALLING EDGE) **/
     668:	82 30       	cpi	r24, 0x02	; 2
     66a:	e9 f4       	brne	.+58     	; 0x6a6 <__vector_1+0x74>
	{
		ICU_stop(); /** STOP ICU / COUNTING **/
     66c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <ICU_stop>
		
		u16_g_time = ICU_getvalue(); /** GET PULSE LENGTH **/
     670:	0e 94 be 03 	call	0x77c	; 0x77c <ICU_getvalue>
     674:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <u16_g_time+0x1>
     678:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <u16_g_time>
		
		ICU_setcounterval(INITIATE_COUNTER_VAL); /** START COUNTING FROM ZERO **/
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <ICU_setcounterval>
				
		u8_echoedge = 0 ;     /** REINITIALIZE ECHO EDGE TO 0 TO REPEAT IN ANY CHANGE AGAIN **/
     684:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <u8_echoedge>
		
		u8_g_distance = (u16_g_time / US_DIVIDER) ; /** CALCULATE THE DISTANCE **/
     688:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <u16_g_time>
     68c:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     690:	af e9       	ldi	r26, 0x9F	; 159
     692:	b6 e4       	ldi	r27, 0x46	; 70
     694:	0e 94 4f 0b 	call	0x169e	; 0x169e <__umulhisi3>
     698:	88 0f       	add	r24, r24
     69a:	89 2f       	mov	r24, r25
     69c:	88 1f       	adc	r24, r24
     69e:	99 0b       	sbc	r25, r25
     6a0:	91 95       	neg	r25
     6a2:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <u8_g_distance>
	}
}
     6a6:	ff 91       	pop	r31
     6a8:	ef 91       	pop	r30
     6aa:	bf 91       	pop	r27
     6ac:	af 91       	pop	r26
     6ae:	9f 91       	pop	r25
     6b0:	8f 91       	pop	r24
     6b2:	7f 91       	pop	r23
     6b4:	6f 91       	pop	r22
     6b6:	5f 91       	pop	r21
     6b8:	4f 91       	pop	r20
     6ba:	3f 91       	pop	r19
     6bc:	2f 91       	pop	r18
     6be:	0f 90       	pop	r0
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	0f 90       	pop	r0
     6c4:	1f 90       	pop	r1
     6c6:	18 95       	reti

000006c8 <__vector_9>:


/** TIMER 1 OVERFLOW **/ 
ISR(TIMER1_OVF_vect)
{
     6c8:	1f 92       	push	r1
     6ca:	0f 92       	push	r0
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	0f 92       	push	r0
     6d0:	11 24       	eor	r1, r1
	/** DO NOTHING **/ 
}
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <__vector_5>:

/** TIMER 0 OVERFLOW  **/
ISR(TIMER2_OVF_vect)
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	af 93       	push	r26
     6ec:	bf 93       	push	r27
	u32_g_tick++ ; /** INCREASE TICKS **/  
     6ee:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     6f2:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__data_end+0x1>
     6f6:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <__data_end+0x2>
     6fa:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <__data_end+0x3>
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	a1 1d       	adc	r26, r1
     702:	b1 1d       	adc	r27, r1
     704:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
     708:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__data_end+0x1>
     70c:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <__data_end+0x2>
     710:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <__data_end+0x3>
}
     714:	bf 91       	pop	r27
     716:	af 91       	pop	r26
     718:	9f 91       	pop	r25
     71a:	8f 91       	pop	r24
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(void)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(BUTTON1_PORT , BUTTON1_PIN , DIO_PIN_INPUT);
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	63 e0       	ldi	r22, 0x03	; 3
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
     730:	08 95       	ret

00000732 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
en_a_button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	1f 92       	push	r1
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	8a 01       	movw	r16, r20
	en_a_button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
     742:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
     744:	ae 01       	movw	r20, r28
     746:	4f 5f       	subi	r20, 0xFF	; 255
     748:	5f 4f       	sbci	r21, 0xFF	; 255
     74a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO_readpin>
	
	if (!pin_status) 
     74e:	81 11       	cpse	r24, r1
     750:	05 c0       	rjmp	.+10     	; 0x75c <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	f8 01       	movw	r30, r16
     756:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	04 c0       	rjmp	.+8      	; 0x764 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	f8 01       	movw	r30, r16
     760:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     762:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
     764:	0f 90       	pop	r0
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	08 95       	ret

00000770 <ICU_init>:
/**************************************************************/
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	TMR1_init(); /** INITIALIZE TIMER 1 MODULE **/
     770:	0e 94 8a 09 	call	0x1314	; 0x1314 <TMR1_init>
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
     774:	0e 94 e7 08 	call	0x11ce	; 0x11ce <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	08 95       	ret

0000077c <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	00 d0       	rcall	.+0      	; 0x782 <ICU_getvalue+0x6>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
     786:	1a 82       	std	Y+2, r1	; 0x02
     788:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
     78a:	ce 01       	movw	r24, r28
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	0e 94 bd 09 	call	0x137a	; 0x137a <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	9a 81       	ldd	r25, Y+2	; 0x02
     796:	0f 90       	pop	r0
     798:	0f 90       	pop	r0
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <ICU_start>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_start(void)
{
	TMR1_start(); /** START TIMER1 COUNTING **/
     7a0:	0e 94 a5 09 	call	0x134a	; 0x134a <TMR1_start>
     7a4:	08 95       	ret

000007a6 <ICU_setcounterval>:
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_setcounterval(uint16t u16_a_counterval)
{
	TMR1_setcounterval(u16_a_counterval);
     7a6:	0e 94 c3 09 	call	0x1386	; 0x1386 <TMR1_setcounterval>
     7aa:	08 95       	ret

000007ac <ICU_stop>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_stop(void)
{
	TMR1_stop();  /** STOP TIMER1 COUNTING **/
     7ac:	0e 94 b2 09 	call	0x1364	; 0x1364 <TMR1_stop>
     7b0:	08 95       	ret

000007b2 <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
     7b2:	41 e0       	ldi	r20, 0x01	; 1
     7b4:	65 e0       	ldi	r22, 0x05	; 5
     7b6:	83 e0       	ldi	r24, 0x03	; 3
     7b8:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	66 e0       	ldi	r22, 0x06	; 6
     7c0:	83 e0       	ldi	r24, 0x03	; 3
     7c2:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
     7c6:	41 e0       	ldi	r20, 0x01	; 1
     7c8:	67 e0       	ldi	r22, 0x07	; 7
     7ca:	83 e0       	ldi	r24, 0x03	; 3
     7cc:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>

	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	83 e0       	ldi	r24, 0x03	; 3
     7d6:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	61 e0       	ldi	r22, 0x01	; 1
     7de:	83 e0       	ldi	r24, 0x03	; 3
     7e0:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	64 e0       	ldi	r22, 0x04	; 4
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
	DIO_setpinvalue(ROW_PORT_DATA , R3 ,  DIO_PIN_LOW);


    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
     7ee:	41 e0       	ldi	r20, 0x01	; 1
     7f0:	65 e0       	ldi	r22, 0x05	; 5
     7f2:	83 e0       	ldi	r24, 0x03	; 3
     7f4:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
     7f8:	41 e0       	ldi	r20, 0x01	; 1
     7fa:	66 e0       	ldi	r22, 0x06	; 6
     7fc:	83 e0       	ldi	r24, 0x03	; 3
     7fe:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	67 e0       	ldi	r22, 0x07	; 7
     806:	83 e0       	ldi	r24, 0x03	; 3
     808:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
     80c:	41 e0       	ldi	r20, 0x01	; 1
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
     820:	41 e0       	ldi	r20, 0x01	; 1
     822:	64 e0       	ldi	r22, 0x04	; 4
     824:	83 e0       	ldi	r24, 0x03	; 3
     826:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	08 95       	ret

0000082e <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     82e:	ef 92       	push	r14
     830:	ff 92       	push	r15
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	00 d0       	rcall	.+0      	; 0x83c <KEYPAD_read+0xe>
     83c:	00 d0       	rcall	.+0      	; 0x83e <KEYPAD_read+0x10>
     83e:	00 d0       	rcall	.+0      	; 0x840 <KEYPAD_read+0x12>
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
     846:	85 e0       	ldi	r24, 0x05	; 5
     848:	89 83       	std	Y+1, r24	; 0x01
     84a:	86 e0       	ldi	r24, 0x06	; 6
     84c:	8a 83       	std	Y+2, r24	; 0x02
     84e:	87 e0       	ldi	r24, 0x07	; 7
     850:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
     852:	1c 82       	std	Y+4, r1	; 0x04
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	8d 83       	std	Y+5, r24	; 0x05
     858:	84 e0       	ldi	r24, 0x04	; 4
     85a:	8e 83       	std	Y+6, r24	; 0x06

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     85c:	00 e0       	ldi	r16, 0x00	; 0
     85e:	79 c0       	rjmp	.+242    	; 0x952 <__stack+0xf3>
    {
		if (u8_a_rowiterator == 3 )
     860:	03 30       	cpi	r16, 0x03	; 3
     862:	39 f4       	brne	.+14     	; 0x872 <__stack+0x13>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
     864:	40 e0       	ldi	r20, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	83 e0       	ldi	r24, 0x03	; 3
     86a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     86e:	10 e0       	ldi	r17, 0x00	; 0
     870:	62 c0       	rjmp	.+196    	; 0x936 <__stack+0xd7>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
		}
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
     872:	e1 e0       	ldi	r30, 0x01	; 1
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	ec 0f       	add	r30, r28
     878:	fd 1f       	adc	r31, r29
     87a:	e0 0f       	add	r30, r16
     87c:	f1 1d       	adc	r31, r1
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	60 81       	ld	r22, Z
     882:	83 e0       	ldi	r24, 0x03	; 3
     884:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     888:	f2 cf       	rjmp	.-28     	; 0x86e <__stack+0xf>
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
     88a:	e4 e0       	ldi	r30, 0x04	; 4
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	ec 0f       	add	r30, r28
     890:	fd 1f       	adc	r31, r29
     892:	e1 0f       	add	r30, r17
     894:	f1 1d       	adc	r31, r1
     896:	a7 01       	movw	r20, r14
     898:	60 81       	ld	r22, Z
     89a:	83 e0       	ldi	r24, 0x03	; 3
     89c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
     8a0:	f7 01       	movw	r30, r14
     8a2:	80 81       	ld	r24, Z
     8a4:	81 11       	cpse	r24, r1
     8a6:	46 c0       	rjmp	.+140    	; 0x934 <__stack+0xd5>
            {
                if (u8_a_rowiterator == 0)
     8a8:	01 11       	cpse	r16, r1
     8aa:	11 c0       	rjmp	.+34     	; 0x8ce <__stack+0x6f>
                {
                    if (u8_a_coulumniterator == 0)
     8ac:	11 11       	cpse	r17, r1
     8ae:	03 c0       	rjmp	.+6      	; 0x8b6 <__stack+0x57>
                    {
                        *u8_a_value = '1' ;
     8b0:	81 e3       	ldi	r24, 0x31	; 49
     8b2:	80 83       	st	Z, r24
     8b4:	33 c0       	rjmp	.+102    	; 0x91c <__stack+0xbd>
                    }
                    else if (u8_a_coulumniterator == 1)
     8b6:	11 30       	cpi	r17, 0x01	; 1
     8b8:	21 f4       	brne	.+8      	; 0x8c2 <__stack+0x63>
                    {
                        *u8_a_value = '2' ;
     8ba:	82 e3       	ldi	r24, 0x32	; 50
     8bc:	f7 01       	movw	r30, r14
     8be:	80 83       	st	Z, r24
     8c0:	2d c0       	rjmp	.+90     	; 0x91c <__stack+0xbd>
                    }
                    else if (u8_a_coulumniterator == 2)
     8c2:	12 30       	cpi	r17, 0x02	; 2
     8c4:	59 f5       	brne	.+86     	; 0x91c <__stack+0xbd>
                    {
                        *u8_a_value = '3' ;
     8c6:	83 e3       	ldi	r24, 0x33	; 51
     8c8:	f7 01       	movw	r30, r14
     8ca:	80 83       	st	Z, r24
     8cc:	27 c0       	rjmp	.+78     	; 0x91c <__stack+0xbd>
                    }
                }

                else if (u8_a_rowiterator == 1)
     8ce:	01 30       	cpi	r16, 0x01	; 1
     8d0:	91 f4       	brne	.+36     	; 0x8f6 <__stack+0x97>
                {
                    if (u8_a_coulumniterator == 0)
     8d2:	11 11       	cpse	r17, r1
     8d4:	04 c0       	rjmp	.+8      	; 0x8de <__stack+0x7f>
                    {
                        *u8_a_value = '4' ;
     8d6:	84 e3       	ldi	r24, 0x34	; 52
     8d8:	f7 01       	movw	r30, r14
     8da:	80 83       	st	Z, r24
     8dc:	1f c0       	rjmp	.+62     	; 0x91c <__stack+0xbd>
                    }
                    else if (u8_a_coulumniterator == 1)
     8de:	11 30       	cpi	r17, 0x01	; 1
     8e0:	21 f4       	brne	.+8      	; 0x8ea <__stack+0x8b>
                    {
                        *u8_a_value = '5' ;
     8e2:	85 e3       	ldi	r24, 0x35	; 53
     8e4:	f7 01       	movw	r30, r14
     8e6:	80 83       	st	Z, r24
     8e8:	19 c0       	rjmp	.+50     	; 0x91c <__stack+0xbd>
                    }
                    else if (u8_a_coulumniterator == 2)
     8ea:	12 30       	cpi	r17, 0x02	; 2
     8ec:	b9 f4       	brne	.+46     	; 0x91c <__stack+0xbd>
                    {
                        *u8_a_value = '6' ;
     8ee:	86 e3       	ldi	r24, 0x36	; 54
     8f0:	f7 01       	movw	r30, r14
     8f2:	80 83       	st	Z, r24
     8f4:	13 c0       	rjmp	.+38     	; 0x91c <__stack+0xbd>
                    }
                }

                else if (u8_a_rowiterator == 2)
     8f6:	02 30       	cpi	r16, 0x02	; 2
     8f8:	89 f4       	brne	.+34     	; 0x91c <__stack+0xbd>
                {
                    if (u8_a_coulumniterator == 0)
     8fa:	11 11       	cpse	r17, r1
     8fc:	04 c0       	rjmp	.+8      	; 0x906 <__stack+0xa7>
                    {
                        *u8_a_value = '7' ;
     8fe:	87 e3       	ldi	r24, 0x37	; 55
     900:	f7 01       	movw	r30, r14
     902:	80 83       	st	Z, r24
     904:	0b c0       	rjmp	.+22     	; 0x91c <__stack+0xbd>
                    }
                    else if (u8_a_coulumniterator == 1)
     906:	11 30       	cpi	r17, 0x01	; 1
     908:	21 f4       	brne	.+8      	; 0x912 <__stack+0xb3>
                    {
                        *u8_a_value = '8' ;
     90a:	88 e3       	ldi	r24, 0x38	; 56
     90c:	f7 01       	movw	r30, r14
     90e:	80 83       	st	Z, r24
     910:	05 c0       	rjmp	.+10     	; 0x91c <__stack+0xbd>
                    }
                    else if (u8_a_coulumniterator == 2)
     912:	12 30       	cpi	r17, 0x02	; 2
     914:	19 f4       	brne	.+6      	; 0x91c <__stack+0xbd>
                    {
                        *u8_a_value = '9' ;
     916:	89 e3       	ldi	r24, 0x39	; 57
     918:	f7 01       	movw	r30, r14
     91a:	80 83       	st	Z, r24
                    }
                }
				
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     91c:	e1 e0       	ldi	r30, 0x01	; 1
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	ec 0f       	add	r30, r28
     922:	fd 1f       	adc	r31, r29
     924:	e0 0f       	add	r30, r16
     926:	f1 1d       	adc	r31, r1
     928:	60 81       	ld	r22, Z
     92a:	83 e0       	ldi	r24, 0x03	; 3
     92c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_togglepin>
				return KEYPAD_readSuccess;
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	13 c0       	rjmp	.+38     	; 0x95a <__stack+0xfb>
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     934:	1f 5f       	subi	r17, 0xFF	; 255
     936:	13 30       	cpi	r17, 0x03	; 3
     938:	08 f4       	brcc	.+2      	; 0x93c <__stack+0xdd>
     93a:	a7 cf       	rjmp	.-178    	; 0x88a <__stack+0x2b>
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
				return KEYPAD_readSuccess;
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     93c:	e1 e0       	ldi	r30, 0x01	; 1
     93e:	f0 e0       	ldi	r31, 0x00	; 0
     940:	ec 0f       	add	r30, r28
     942:	fd 1f       	adc	r31, r29
     944:	e0 0f       	add	r30, r16
     946:	f1 1d       	adc	r31, r1
     948:	60 81       	ld	r22, Z
     94a:	83 e0       	ldi	r24, 0x03	; 3
     94c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     950:	0f 5f       	subi	r16, 0xFF	; 255
     952:	03 30       	cpi	r16, 0x03	; 3
     954:	08 f4       	brcc	.+2      	; 0x958 <__stack+0xf9>
     956:	84 cf       	rjmp	.-248    	; 0x860 <__stack+0x1>
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
    }
    return KEYPAD_readFail;
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	26 96       	adiw	r28, 0x06	; 6
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	de bf       	out	0x3e, r29	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	cd bf       	out	0x3d, r28	; 61
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	08 95       	ret

00000974 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     974:	cf 93       	push	r28
     976:	c8 2f       	mov	r28, r24
     978:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <TMR0_init>
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	62 e0       	ldi	r22, 0x02	; 2
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	63 e0       	ldi	r22, 0x03	; 3
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     99a:	8b b3       	in	r24, 0x1b	; 27
     99c:	9c 2f       	mov	r25, r28
     99e:	90 7f       	andi	r25, 0xF0	; 240
     9a0:	8f 70       	andi	r24, 0x0F	; 15
     9a2:	89 2b       	or	r24, r25
     9a4:	8b bb       	out	0x1b, r24	; 27
     9a6:	41 e0       	ldi	r20, 0x01	; 1
     9a8:	63 e0       	ldi	r22, 0x03	; 3
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	63 e0       	ldi	r22, 0x03	; 3
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     9c6:	20 e1       	ldi	r18, 0x10	; 16
     9c8:	c2 9f       	mul	r28, r18
     9ca:	c0 01       	movw	r24, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	9b b3       	in	r25, 0x1b	; 27
     9d0:	9f 70       	andi	r25, 0x0F	; 15
     9d2:	89 2b       	or	r24, r25
     9d4:	8b bb       	out	0x1b, r24	; 27
     9d6:	41 e0       	ldi	r20, 0x01	; 1
     9d8:	63 e0       	ldi	r22, 0x03	; 3
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	63 e0       	ldi	r22, 0x03	; 3
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     9f6:	65 e0       	ldi	r22, 0x05	; 5
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <LCD_init>:
     a06:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <TMR0_init>
     a0a:	41 e0       	ldi	r20, 0x01	; 1
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
     a14:	41 e0       	ldi	r20, 0x01	; 1
     a16:	62 e0       	ldi	r22, 0x02	; 2
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
     a1e:	41 e0       	ldi	r20, 0x01	; 1
     a20:	63 e0       	ldi	r22, 0x03	; 3
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
     a28:	41 e0       	ldi	r20, 0x01	; 1
     a2a:	64 e0       	ldi	r22, 0x04	; 4
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
     a32:	41 e0       	ldi	r20, 0x01	; 1
     a34:	65 e0       	ldi	r22, 0x05	; 5
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
     a3c:	41 e0       	ldi	r20, 0x01	; 1
     a3e:	66 e0       	ldi	r22, 0x06	; 6
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
     a46:	41 e0       	ldi	r20, 0x01	; 1
     a48:	67 e0       	ldi	r22, 0x07	; 7
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
     a50:	64 e1       	ldi	r22, 0x14	; 20
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>
     a5c:	83 e3       	ldi	r24, 0x33	; 51
     a5e:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendcmd>
     a62:	82 e3       	ldi	r24, 0x32	; 50
     a64:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendcmd>
     a68:	88 e2       	ldi	r24, 0x28	; 40
     a6a:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendcmd>
     a6e:	8c e0       	ldi	r24, 0x0C	; 12
     a70:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendcmd>
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendcmd>
     a7a:	82 e0       	ldi	r24, 0x02	; 2
     a7c:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendcmd>
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendcmd>
     a86:	08 95       	ret

00000a88 <LCD_writechar>:
     a88:	cf 93       	push	r28
     a8a:	c8 2f       	mov	r28, r24
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	62 e0       	ldi	r22, 0x02	; 2
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	63 e0       	ldi	r22, 0x03	; 3
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     aaa:	8b b3       	in	r24, 0x1b	; 27
     aac:	9c 2f       	mov	r25, r28
     aae:	90 7f       	andi	r25, 0xF0	; 240
     ab0:	8f 70       	andi	r24, 0x0F	; 15
     ab2:	89 2b       	or	r24, r25
     ab4:	8b bb       	out	0x1b, r24	; 27
     ab6:	41 e0       	ldi	r20, 0x01	; 1
     ab8:	63 e0       	ldi	r22, 0x03	; 3
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	63 e0       	ldi	r22, 0x03	; 3
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     ad6:	20 e1       	ldi	r18, 0x10	; 16
     ad8:	c2 9f       	mul	r28, r18
     ada:	c0 01       	movw	r24, r0
     adc:	11 24       	eor	r1, r1
     ade:	9b b3       	in	r25, 0x1b	; 27
     ae0:	9f 70       	andi	r25, 0x0F	; 15
     ae2:	89 2b       	or	r24, r25
     ae4:	8b bb       	out	0x1b, r24	; 27
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	63 e0       	ldi	r22, 0x03	; 3
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	70 e0       	ldi	r23, 0x00	; 0
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	63 e0       	ldi	r22, 0x03	; 3
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
     b06:	65 e0       	ldi	r22, 0x05	; 5
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_delayms>
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <LCD_writestr>:
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	8c 01       	movw	r16, r24
     b1e:	c0 e0       	ldi	r28, 0x00	; 0
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <LCD_writestr+0x12>
     b22:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writechar>
     b26:	cf 5f       	subi	r28, 0xFF	; 255
     b28:	f8 01       	movw	r30, r16
     b2a:	ec 0f       	add	r30, r28
     b2c:	f1 1d       	adc	r31, r1
     b2e:	80 81       	ld	r24, Z
     b30:	81 11       	cpse	r24, r1
     b32:	f7 cf       	rjmp	.-18     	; 0xb22 <LCD_writestr+0xc>
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	08 95       	ret

00000b3c <LCD_goto>:
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	00 d0       	rcall	.+0      	; 0xb42 <LCD_goto+0x6>
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	90 e8       	ldi	r25, 0x80	; 128
     b48:	99 83       	std	Y+1, r25	; 0x01
     b4a:	90 ec       	ldi	r25, 0xC0	; 192
     b4c:	9a 83       	std	Y+2, r25	; 0x02
     b4e:	e1 e0       	ldi	r30, 0x01	; 1
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	ec 0f       	add	r30, r28
     b54:	fd 1f       	adc	r31, r29
     b56:	e8 0f       	add	r30, r24
     b58:	f1 1d       	adc	r31, r1
     b5a:	80 81       	ld	r24, Z
     b5c:	86 0f       	add	r24, r22
     b5e:	0e 94 ba 04 	call	0x974	; 0x974 <LCD_sendcmd>
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	2a 97       	sbiw	r28, 0x0a	; 10
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     b82:	99 23       	and	r25, r25
     b84:	dc f5       	brge	.+118    	; 0xbfc <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
     b86:	90 95       	com	r25
     b88:	80 95       	com	r24
     b8a:	70 95       	com	r23
     b8c:	61 95       	neg	r22
     b8e:	7f 4f       	sbci	r23, 0xFF	; 255
     b90:	8f 4f       	sbci	r24, 0xFF	; 255
     b92:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     b94:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     b96:	13 c0       	rjmp	.+38     	; 0xbbe <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     b98:	2a e0       	ldi	r18, 0x0A	; 10
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	0e 94 30 0b 	call	0x1660	; 0x1660 <__divmodsi4>
     ba4:	e1 e0       	ldi	r30, 0x01	; 1
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	ec 0f       	add	r30, r28
     baa:	fd 1f       	adc	r31, r29
     bac:	e1 0f       	add	r30, r17
     bae:	f1 1d       	adc	r31, r1
     bb0:	60 5d       	subi	r22, 0xD0	; 208
     bb2:	60 83       	st	Z, r22
			s32_a_num /= 10;
     bb4:	62 2f       	mov	r22, r18
     bb6:	73 2f       	mov	r23, r19
     bb8:	84 2f       	mov	r24, r20
     bba:	95 2f       	mov	r25, r21
			i++;
     bbc:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     bbe:	16 16       	cp	r1, r22
     bc0:	17 06       	cpc	r1, r23
     bc2:	18 06       	cpc	r1, r24
     bc4:	19 06       	cpc	r1, r25
     bc6:	44 f3       	brlt	.-48     	; 0xb98 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     bc8:	e1 e0       	ldi	r30, 0x01	; 1
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	ec 0f       	add	r30, r28
     bce:	fd 1f       	adc	r31, r29
     bd0:	e1 0f       	add	r30, r17
     bd2:	f1 1d       	adc	r31, r1
     bd4:	8d e2       	ldi	r24, 0x2D	; 45
     bd6:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     bd8:	1f 5f       	subi	r17, 0xFF	; 255
     bda:	0d c0       	rjmp	.+26     	; 0xbf6 <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
     bdc:	e1 2f       	mov	r30, r17
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	8c 0f       	add	r24, r28
     be8:	9d 1f       	adc	r25, r29
     bea:	e8 0f       	add	r30, r24
     bec:	f9 1f       	adc	r31, r25
     bee:	80 81       	ld	r24, Z
     bf0:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     bf4:	11 50       	subi	r17, 0x01	; 1
     bf6:	11 11       	cpse	r17, r1
     bf8:	f1 cf       	rjmp	.-30     	; 0xbdc <LCD_writeint+0x70>
     bfa:	39 c0       	rjmp	.+114    	; 0xc6e <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     bfc:	61 15       	cp	r22, r1
     bfe:	71 05       	cpc	r23, r1
     c00:	81 05       	cpc	r24, r1
     c02:	91 05       	cpc	r25, r1
     c04:	21 f4       	brne	.+8      	; 0xc0e <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
     c06:	80 e3       	ldi	r24, 0x30	; 48
     c08:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writechar>
     c0c:	30 c0       	rjmp	.+96     	; 0xc6e <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     c0e:	16 16       	cp	r1, r22
     c10:	17 06       	cpc	r1, r23
     c12:	18 06       	cpc	r1, r24
     c14:	19 06       	cpc	r1, r25
     c16:	ac f0       	brlt	.+42     	; 0xc42 <LCD_writeint+0xd6>
     c18:	2a c0       	rjmp	.+84     	; 0xc6e <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     c1a:	2a e0       	ldi	r18, 0x0A	; 10
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	50 e0       	ldi	r21, 0x00	; 0
     c22:	0e 94 30 0b 	call	0x1660	; 0x1660 <__divmodsi4>
     c26:	e1 e0       	ldi	r30, 0x01	; 1
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	ec 0f       	add	r30, r28
     c2c:	fd 1f       	adc	r31, r29
     c2e:	e1 0f       	add	r30, r17
     c30:	f1 1d       	adc	r31, r1
     c32:	60 5d       	subi	r22, 0xD0	; 208
     c34:	60 83       	st	Z, r22
			s32_a_num /= 10;
     c36:	62 2f       	mov	r22, r18
     c38:	73 2f       	mov	r23, r19
     c3a:	84 2f       	mov	r24, r20
     c3c:	95 2f       	mov	r25, r21
			i++;
     c3e:	1f 5f       	subi	r17, 0xFF	; 255
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <LCD_writeint+0xd8>
     c42:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     c44:	16 16       	cp	r1, r22
     c46:	17 06       	cpc	r1, r23
     c48:	18 06       	cpc	r1, r24
     c4a:	19 06       	cpc	r1, r25
     c4c:	34 f3       	brlt	.-52     	; 0xc1a <LCD_writeint+0xae>
     c4e:	0d c0       	rjmp	.+26     	; 0xc6a <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     c50:	e1 2f       	mov	r30, r17
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	8c 0f       	add	r24, r28
     c5c:	9d 1f       	adc	r25, r29
     c5e:	e8 0f       	add	r30, r24
     c60:	f9 1f       	adc	r31, r25
     c62:	80 81       	ld	r24, Z
     c64:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     c68:	11 50       	subi	r17, 0x01	; 1
     c6a:	11 11       	cpse	r17, r1
     c6c:	f1 cf       	rjmp	.-30     	; 0xc50 <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     c6e:	2a 96       	adiw	r28, 0x0a	; 10
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	08 95       	ret

00000c82 <MOTOR_init>:
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
	
	switch(u8_a_motorid)
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	b9 f0       	breq	.+46     	; 0xcb4 <MOTOR_init+0x32>
     c86:	28 f0       	brcs	.+10     	; 0xc92 <MOTOR_init+0x10>
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	29 f1       	breq	.+74     	; 0xcd6 <MOTOR_init+0x54>
     c8c:	83 30       	cpi	r24, 0x03	; 3
     c8e:	a1 f1       	breq	.+104    	; 0xcf8 <MOTOR_init+0x76>
     c90:	44 c0       	rjmp	.+136    	; 0xd1a <MOTOR_init+0x98>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	62 e0       	ldi	r22, 0x02	; 2
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     cb0:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
		break;
     cb2:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	63 e0       	ldi	r22, 0x03	; 3
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
     cbe:	41 e0       	ldi	r20, 0x01	; 1
     cc0:	64 e0       	ldi	r22, 0x04	; 4
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	65 e0       	ldi	r22, 0x05	; 5
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     cd2:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     cd4:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
     ce0:	41 e0       	ldi	r20, 0x01	; 1
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	62 e0       	ldi	r22, 0x02	; 2
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     cf4:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     cf6:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	63 e0       	ldi	r22, 0x03	; 3
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
     d02:	41 e0       	ldi	r20, 0x01	; 1
     d04:	64 e0       	ldi	r22, 0x04	; 4
     d06:	82 e0       	ldi	r24, 0x02	; 2
     d08:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	65 e0       	ldi	r22, 0x05	; 5
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d16:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d18:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_initstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d1a:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_initstatus ; /** RETURN THE FINAL STATUS **/
}
     d1c:	08 95       	ret

00000d1e <MOTOR_rotateclkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 f0       	breq	.+36     	; 0xd46 <MOTOR_rotateclkdir+0x28>
     d22:	28 f0       	brcs	.+10     	; 0xd2e <MOTOR_rotateclkdir+0x10>
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	d9 f0       	breq	.+54     	; 0xd5e <MOTOR_rotateclkdir+0x40>
     d28:	83 30       	cpi	r24, 0x03	; 3
     d2a:	29 f1       	breq	.+74     	; 0xd76 <MOTOR_rotateclkdir+0x58>
     d2c:	30 c0       	rjmp	.+96     	; 0xd8e <MOTOR_rotateclkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d2e:	41 e0       	ldi	r20, 0x01	; 1
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d42:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d44:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	63 e0       	ldi	r22, 0x03	; 3
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	64 e0       	ldi	r22, 0x04	; 4
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d5a:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d5c:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d72:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d74:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	63 e0       	ldi	r22, 0x03	; 3
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	64 e0       	ldi	r22, 0x04	; 4
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d8a:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d8c:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motordirectionstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d8e:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motordirectionstatus ; /** RETURN THE FINAL STATUS **/
}
     d90:	08 95       	ret

00000d92 <MOTOR_rotateanticlkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d92:	81 30       	cpi	r24, 0x01	; 1
     d94:	91 f0       	breq	.+36     	; 0xdba <MOTOR_rotateanticlkdir+0x28>
     d96:	28 f0       	brcs	.+10     	; 0xda2 <MOTOR_rotateanticlkdir+0x10>
     d98:	82 30       	cpi	r24, 0x02	; 2
     d9a:	d9 f0       	breq	.+54     	; 0xdd2 <MOTOR_rotateanticlkdir+0x40>
     d9c:	83 30       	cpi	r24, 0x03	; 3
     d9e:	29 f1       	breq	.+74     	; 0xdea <MOTOR_rotateanticlkdir+0x58>
     da0:	30 c0       	rjmp	.+96     	; 0xe02 <MOTOR_rotateanticlkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     dac:	41 e0       	ldi	r20, 0x01	; 1
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     db6:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     db8:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	63 e0       	ldi	r22, 0x03	; 3
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     dc4:	41 e0       	ldi	r20, 0x01	; 1
     dc6:	64 e0       	ldi	r22, 0x04	; 4
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dce:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     dd0:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     de6:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     de8:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     dea:	40 e0       	ldi	r20, 0x00	; 0
     dec:	63 e0       	ldi	r22, 0x03	; 3
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	64 e0       	ldi	r22, 0x04	; 4
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dfe:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e00:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motorrotatestatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e02:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
     e04:	08 95       	ret

00000e06 <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	69 f0       	breq	.+26     	; 0xe24 <MOTOR_turnoff+0x1e>
     e0a:	28 f0       	brcs	.+10     	; 0xe16 <MOTOR_turnoff+0x10>
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	89 f0       	breq	.+34     	; 0xe32 <MOTOR_turnoff+0x2c>
     e10:	83 30       	cpi	r24, 0x03	; 3
     e12:	b1 f0       	breq	.+44     	; 0xe40 <MOTOR_turnoff+0x3a>
     e14:	1c c0       	rjmp	.+56     	; 0xe4e <MOTOR_turnoff+0x48>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	62 e0       	ldi	r22, 0x02	; 2
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e20:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e22:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	65 e0       	ldi	r22, 0x05	; 5
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e2e:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e30:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	62 e0       	ldi	r22, 0x02	; 2
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e3c:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e3e:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	65 e0       	ldi	r22, 0x05	; 5
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e4a:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e4c:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e4e:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     e50:	08 95       	ret

00000e52 <MOTOR_turnon>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	69 f0       	breq	.+26     	; 0xe70 <MOTOR_turnon+0x1e>
     e56:	28 f0       	brcs	.+10     	; 0xe62 <MOTOR_turnon+0x10>
     e58:	82 30       	cpi	r24, 0x02	; 2
     e5a:	89 f0       	breq	.+34     	; 0xe7e <MOTOR_turnon+0x2c>
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	b1 f0       	breq	.+44     	; 0xe8c <MOTOR_turnon+0x3a>
     e60:	1c c0       	rjmp	.+56     	; 0xe9a <MOTOR_turnon+0x48>
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	62 e0       	ldi	r22, 0x02	; 2
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e6c:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e6e:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e70:	41 e0       	ldi	r20, 0x01	; 1
     e72:	65 e0       	ldi	r22, 0x05	; 5
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e7a:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e7c:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	62 e0       	ldi	r22, 0x02	; 2
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e88:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e8a:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	65 e0       	ldi	r22, 0x05	; 5
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e96:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e98:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e9a:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     e9c:	08 95       	ret

00000e9e <US_init>:
/** RETURNS : VOID                                                **/
/*******************************************************************/
void US_init(void)
{
	/** INITIALIZE THE TRIGGER PIN AS OUTPUT PIN **/
	DIO_setpindir(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_OUTPUT);
     e9e:	41 e0       	ldi	r20, 0x01	; 1
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	0e 94 6d 07 	call	0xeda	; 0xeda <DIO_setpindir>
     ea8:	08 95       	ret

00000eaa <US_sendtrigger>:
/** RETURNS : EN_ultrasonicreturn                                 **/
/*******************************************************************/
EN_ultrasonicreturn US_sendtrigger(void)
{
	/** SEND PULSE OF 15 MICROSECOND **/
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_HIGH);
     eaa:	41 e0       	ldi	r20, 0x01	; 1
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
	TMR0_delaymicros(15);
     eb4:	6f e0       	ldi	r22, 0x0F	; 15
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 56 09 	call	0x12ac	; 0x12ac <TMR0_delaymicros>
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_LOW);
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <DIO_setpinvalue>
}
     eca:	08 95       	ret

00000ecc <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZE APPLICATION MODULES **/
     ecc:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_setentry(); /** SET THE ENTRY DATA **/
     ed0:	0e 94 76 00 	call	0xec	; 0xec <APP_setentry>
	
    while (1) 
    {	
		APP_start(); /** SUPER LOOP **/	
     ed4:	0e 94 2b 01 	call	0x256	; 0x256 <APP_start>
     ed8:	fd cf       	rjmp	.-6      	; 0xed4 <main+0x8>

00000eda <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
     eda:	44 23       	and	r20, r20
     edc:	19 f0       	breq	.+6      	; 0xee4 <DIO_setpindir+0xa>
     ede:	41 30       	cpi	r20, 0x01	; 1
     ee0:	e9 f1       	breq	.+122    	; 0xf5c <DIO_setpindir+0x82>
     ee2:	74 c0       	rjmp	.+232    	; 0xfcc <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	99 f0       	breq	.+38     	; 0xf0e <DIO_setpindir+0x34>
     ee8:	28 f0       	brcs	.+10     	; 0xef4 <DIO_setpindir+0x1a>
     eea:	82 30       	cpi	r24, 0x02	; 2
     eec:	e9 f0       	breq	.+58     	; 0xf28 <DIO_setpindir+0x4e>
     eee:	83 30       	cpi	r24, 0x03	; 3
     ef0:	41 f1       	breq	.+80     	; 0xf42 <DIO_setpindir+0x68>
     ef2:	6e c0       	rjmp	.+220    	; 0xfd0 <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     ef4:	2a b3       	in	r18, 0x1a	; 26
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_setpindir+0x26>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	6a 95       	dec	r22
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_setpindir+0x22>
     f04:	80 95       	com	r24
     f06:	82 23       	and	r24, r18
     f08:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f0a:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
     f0c:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     f0e:	27 b3       	in	r18, 0x17	; 23
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_setpindir+0x40>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	6a 95       	dec	r22
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_setpindir+0x3c>
     f1e:	80 95       	com	r24
     f20:	82 23       	and	r24, r18
     f22:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f24:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
     f26:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     f28:	24 b3       	in	r18, 0x14	; 20
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_setpindir+0x5a>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	6a 95       	dec	r22
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_setpindir+0x56>
     f38:	80 95       	com	r24
     f3a:	82 23       	and	r24, r18
     f3c:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f3e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
     f40:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     f42:	21 b3       	in	r18, 0x11	; 17
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_setpindir+0x74>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	6a 95       	dec	r22
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_setpindir+0x70>
     f52:	80 95       	com	r24
     f54:	82 23       	and	r24, r18
     f56:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f58:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
     f5a:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	91 f0       	breq	.+36     	; 0xf84 <DIO_setpindir+0xaa>
     f60:	28 f0       	brcs	.+10     	; 0xf6c <DIO_setpindir+0x92>
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	d9 f0       	breq	.+54     	; 0xf9c <DIO_setpindir+0xc2>
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	29 f1       	breq	.+74     	; 0xfb4 <DIO_setpindir+0xda>
     f6a:	34 c0       	rjmp	.+104    	; 0xfd4 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     f6c:	2a b3       	in	r18, 0x1a	; 26
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_setpindir+0x9e>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	6a 95       	dec	r22
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_setpindir+0x9a>
     f7c:	82 2b       	or	r24, r18
     f7e:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f80:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     f82:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     f84:	27 b3       	in	r18, 0x17	; 23
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_setpindir+0xb6>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	6a 95       	dec	r22
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_setpindir+0xb2>
     f94:	82 2b       	or	r24, r18
     f96:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f98:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     f9a:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     f9c:	24 b3       	in	r18, 0x14	; 20
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <DIO_setpindir+0xce>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	6a 95       	dec	r22
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <DIO_setpindir+0xca>
     fac:	82 2b       	or	r24, r18
     fae:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     fb0:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     fb2:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     fb4:	21 b3       	in	r18, 0x11	; 17
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_setpindir+0xe6>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	6a 95       	dec	r22
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_setpindir+0xe2>
     fc4:	82 2b       	or	r24, r18
     fc6:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     fc8:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     fca:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     fd4:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
     fd6:	08 95       	ret

00000fd8 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
     fd8:	44 23       	and	r20, r20
     fda:	19 f0       	breq	.+6      	; 0xfe2 <DIO_setpinvalue+0xa>
     fdc:	41 30       	cpi	r20, 0x01	; 1
     fde:	e9 f1       	breq	.+122    	; 0x105a <DIO_setpinvalue+0x82>
     fe0:	74 c0       	rjmp	.+232    	; 0x10ca <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	99 f0       	breq	.+38     	; 0x100c <DIO_setpinvalue+0x34>
     fe6:	28 f0       	brcs	.+10     	; 0xff2 <DIO_setpinvalue+0x1a>
     fe8:	82 30       	cpi	r24, 0x02	; 2
     fea:	e9 f0       	breq	.+58     	; 0x1026 <DIO_setpinvalue+0x4e>
     fec:	83 30       	cpi	r24, 0x03	; 3
     fee:	41 f1       	breq	.+80     	; 0x1040 <DIO_setpinvalue+0x68>
     ff0:	6e c0       	rjmp	.+220    	; 0x10ce <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     ff2:	2b b3       	in	r18, 0x1b	; 27
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_setpinvalue+0x26>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	6a 95       	dec	r22
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_setpinvalue+0x22>
    1002:	80 95       	com	r24
    1004:	82 23       	and	r24, r18
    1006:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1008:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    100a:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    100c:	28 b3       	in	r18, 0x18	; 24
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_setpinvalue+0x40>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	6a 95       	dec	r22
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_setpinvalue+0x3c>
    101c:	80 95       	com	r24
    101e:	82 23       	and	r24, r18
    1020:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1022:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    1024:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    1026:	25 b3       	in	r18, 0x15	; 21
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_setpinvalue+0x5a>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	6a 95       	dec	r22
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_setpinvalue+0x56>
    1036:	80 95       	com	r24
    1038:	82 23       	and	r24, r18
    103a:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    103c:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    103e:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    1040:	22 b3       	in	r18, 0x12	; 18
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_setpinvalue+0x74>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	6a 95       	dec	r22
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_setpinvalue+0x70>
    1050:	80 95       	com	r24
    1052:	82 23       	and	r24, r18
    1054:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1056:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    1058:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	91 f0       	breq	.+36     	; 0x1082 <DIO_setpinvalue+0xaa>
    105e:	28 f0       	brcs	.+10     	; 0x106a <DIO_setpinvalue+0x92>
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	d9 f0       	breq	.+54     	; 0x109a <DIO_setpinvalue+0xc2>
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	29 f1       	breq	.+74     	; 0x10b2 <DIO_setpinvalue+0xda>
    1068:	34 c0       	rjmp	.+104    	; 0x10d2 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    106a:	2b b3       	in	r18, 0x1b	; 27
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_setpinvalue+0x9e>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	6a 95       	dec	r22
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_setpinvalue+0x9a>
    107a:	82 2b       	or	r24, r18
    107c:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    107e:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1080:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1082:	28 b3       	in	r18, 0x18	; 24
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_setpinvalue+0xb6>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	6a 95       	dec	r22
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_setpinvalue+0xb2>
    1092:	82 2b       	or	r24, r18
    1094:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1096:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1098:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    109a:	25 b3       	in	r18, 0x15	; 21
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_setpinvalue+0xce>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	6a 95       	dec	r22
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_setpinvalue+0xca>
    10aa:	82 2b       	or	r24, r18
    10ac:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10ae:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    10b0:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    10b2:	22 b3       	in	r18, 0x12	; 18
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_setpinvalue+0xe6>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	6a 95       	dec	r22
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_setpinvalue+0xe2>
    10c2:	82 2b       	or	r24, r18
    10c4:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10c6:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    10c8:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    10d2:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
    10d4:	08 95       	ret

000010d6 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	99 f0       	breq	.+38     	; 0x1100 <DIO_readpin+0x2a>
    10da:	28 f0       	brcs	.+10     	; 0x10e6 <DIO_readpin+0x10>
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	e9 f0       	breq	.+58     	; 0x111a <DIO_readpin+0x44>
    10e0:	83 30       	cpi	r24, 0x03	; 3
    10e2:	41 f1       	breq	.+80     	; 0x1134 <DIO_readpin+0x5e>
    10e4:	34 c0       	rjmp	.+104    	; 0x114e <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    10e6:	89 b3       	in	r24, 0x19	; 25
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_readpin+0x1a>
    10ec:	95 95       	asr	r25
    10ee:	87 95       	ror	r24
    10f0:	6a 95       	dec	r22
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_readpin+0x16>
    10f4:	81 70       	andi	r24, 0x01	; 1
    10f6:	89 bb       	out	0x19, r24	; 25
    10f8:	fa 01       	movw	r30, r20
    10fa:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    10fc:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    10fe:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    1100:	86 b3       	in	r24, 0x16	; 22
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_readpin+0x34>
    1106:	95 95       	asr	r25
    1108:	87 95       	ror	r24
    110a:	6a 95       	dec	r22
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_readpin+0x30>
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	86 bb       	out	0x16, r24	; 22
    1112:	fa 01       	movw	r30, r20
    1114:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1116:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    1118:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    111a:	83 b3       	in	r24, 0x13	; 19
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_readpin+0x4e>
    1120:	95 95       	asr	r25
    1122:	87 95       	ror	r24
    1124:	6a 95       	dec	r22
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_readpin+0x4a>
    1128:	81 70       	andi	r24, 0x01	; 1
    112a:	83 bb       	out	0x13, r24	; 19
    112c:	fa 01       	movw	r30, r20
    112e:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1130:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    1132:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    1134:	80 b3       	in	r24, 0x10	; 16
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_readpin+0x68>
    113a:	95 95       	asr	r25
    113c:	87 95       	ror	r24
    113e:	6a 95       	dec	r22
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_readpin+0x64>
    1142:	81 70       	andi	r24, 0x01	; 1
    1144:	80 bb       	out	0x10, r24	; 16
    1146:	fa 01       	movw	r30, r20
    1148:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    114a:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    114c:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
    114e:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
    1150:	08 95       	ret

00001152 <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 f0       	breq	.+36     	; 0x117a <DIO_togglepin+0x28>
    1156:	28 f0       	brcs	.+10     	; 0x1162 <DIO_togglepin+0x10>
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	d9 f0       	breq	.+54     	; 0x1192 <DIO_togglepin+0x40>
    115c:	83 30       	cpi	r24, 0x03	; 3
    115e:	29 f1       	breq	.+74     	; 0x11aa <DIO_togglepin+0x58>
    1160:	30 c0       	rjmp	.+96     	; 0x11c2 <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
    1162:	2b b3       	in	r18, 0x1b	; 27
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_togglepin+0x1c>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	6a 95       	dec	r22
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_togglepin+0x18>
    1172:	82 27       	eor	r24, r18
    1174:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1176:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
    1178:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
    117a:	28 b3       	in	r18, 0x18	; 24
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_togglepin+0x34>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	6a 95       	dec	r22
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_togglepin+0x30>
    118a:	82 27       	eor	r24, r18
    118c:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    118e:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
    1190:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
    1192:	25 b3       	in	r18, 0x15	; 21
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_togglepin+0x4c>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	6a 95       	dec	r22
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_togglepin+0x48>
    11a2:	82 27       	eor	r24, r18
    11a4:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    11a6:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
    11a8:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
    11aa:	22 b3       	in	r18, 0x12	; 18
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_togglepin+0x64>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	6a 95       	dec	r22
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_togglepin+0x60>
    11ba:	82 27       	eor	r24, r18
    11bc:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    11be:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
    11c0:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
    11c2:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
    11c4:	08 95       	ret

000011c6 <SET_GLOBALINTERRUPT>:
    11c6:	8f b7       	in	r24, 0x3f	; 63
    11c8:	80 68       	ori	r24, 0x80	; 128
    11ca:	8f bf       	out	0x3f, r24	; 63
    11cc:	08 95       	ret

000011ce <INT0_init>:
    11ce:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <SET_GLOBALINTERRUPT>
    11d2:	85 b7       	in	r24, 0x35	; 53
    11d4:	81 60       	ori	r24, 0x01	; 1
    11d6:	85 bf       	out	0x35, r24	; 53
    11d8:	85 b7       	in	r24, 0x35	; 53
    11da:	8d 7f       	andi	r24, 0xFD	; 253
    11dc:	85 bf       	out	0x35, r24	; 53
    11de:	8b b7       	in	r24, 0x3b	; 59
    11e0:	80 64       	ori	r24, 0x40	; 64
    11e2:	8b bf       	out	0x3b, r24	; 59
    11e4:	08 95       	ret

000011e6 <TMR0_init>:
    11e6:	83 b7       	in	r24, 0x33	; 51
    11e8:	8f 77       	andi	r24, 0x7F	; 127
    11ea:	83 bf       	out	0x33, r24	; 51
    11ec:	83 b7       	in	r24, 0x33	; 51
    11ee:	8f 7b       	andi	r24, 0xBF	; 191
    11f0:	83 bf       	out	0x33, r24	; 51
    11f2:	83 b7       	in	r24, 0x33	; 51
    11f4:	87 7f       	andi	r24, 0xF7	; 247
    11f6:	83 bf       	out	0x33, r24	; 51
    11f8:	83 b7       	in	r24, 0x33	; 51
    11fa:	8f 7e       	andi	r24, 0xEF	; 239
    11fc:	83 bf       	out	0x33, r24	; 51
    11fe:	83 b7       	in	r24, 0x33	; 51
    1200:	8f 7d       	andi	r24, 0xDF	; 223
    1202:	83 bf       	out	0x33, r24	; 51
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	08 95       	ret

00001208 <TMR0_start>:
    1208:	83 b7       	in	r24, 0x33	; 51
    120a:	81 60       	ori	r24, 0x01	; 1
    120c:	83 bf       	out	0x33, r24	; 51
    120e:	83 b7       	in	r24, 0x33	; 51
    1210:	8d 7f       	andi	r24, 0xFD	; 253
    1212:	83 bf       	out	0x33, r24	; 51
    1214:	83 b7       	in	r24, 0x33	; 51
    1216:	8b 7f       	andi	r24, 0xFB	; 251
    1218:	83 bf       	out	0x33, r24	; 51
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	08 95       	ret

0000121e <TMR0_stop>:
    121e:	83 b7       	in	r24, 0x33	; 51
    1220:	8e 7f       	andi	r24, 0xFE	; 254
    1222:	83 bf       	out	0x33, r24	; 51
    1224:	83 b7       	in	r24, 0x33	; 51
    1226:	8d 7f       	andi	r24, 0xFD	; 253
    1228:	83 bf       	out	0x33, r24	; 51
    122a:	83 b7       	in	r24, 0x33	; 51
    122c:	8b 7f       	andi	r24, 0xFB	; 251
    122e:	83 bf       	out	0x33, r24	; 51
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	08 95       	ret

00001234 <TMR0_delayms>:
    1234:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__floatunsisf>
    1238:	2f e6       	ldi	r18, 0x6F	; 111
    123a:	32 e1       	ldi	r19, 0x12	; 18
    123c:	43 e0       	ldi	r20, 0x03	; 3
    123e:	5d e3       	ldi	r21, 0x3D	; 61
    1240:	0e 94 01 0a 	call	0x1402	; 0x1402 <__divsf3>
    1244:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__fixunssfsi>
    1248:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <u32_gs_tmr0nuofovs>
    124c:	70 93 b4 00 	sts	0x00B4, r23	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    1250:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    1254:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    1258:	12 be       	out	0x32, r1	; 50
    125a:	0e 94 04 09 	call	0x1208	; 0x1208 <TMR0_start>
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	ba 01       	movw	r22, r20
    1264:	0a c0       	rjmp	.+20     	; 0x127a <TMR0_delayms+0x46>
    1266:	08 b6       	in	r0, 0x38	; 56
    1268:	00 fe       	sbrs	r0, 0
    126a:	fd cf       	rjmp	.-6      	; 0x1266 <TMR0_delayms+0x32>
    126c:	88 b7       	in	r24, 0x38	; 56
    126e:	81 60       	ori	r24, 0x01	; 1
    1270:	88 bf       	out	0x38, r24	; 56
    1272:	4f 5f       	subi	r20, 0xFF	; 255
    1274:	5f 4f       	sbci	r21, 0xFF	; 255
    1276:	6f 4f       	sbci	r22, 0xFF	; 255
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <u32_gs_tmr0nuofovs>
    127e:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    1282:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    1286:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    128a:	48 17       	cp	r20, r24
    128c:	59 07       	cpc	r21, r25
    128e:	6a 07       	cpc	r22, r26
    1290:	7b 07       	cpc	r23, r27
    1292:	48 f3       	brcs	.-46     	; 0x1266 <TMR0_delayms+0x32>
    1294:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <u32_gs_tmr0nuofovs>
    1298:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    129c:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    12a0:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    12a4:	0e 94 0f 09 	call	0x121e	; 0x121e <TMR0_stop>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	08 95       	ret

000012ac <TMR0_delaymicros>:
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	68 94       	set
    12b2:	14 f8       	bld	r1, 4
    12b4:	b6 95       	lsr	r27
    12b6:	a7 95       	ror	r26
    12b8:	97 95       	ror	r25
    12ba:	87 95       	ror	r24
    12bc:	16 94       	lsr	r1
    12be:	d1 f7       	brne	.-12     	; 0x12b4 <TMR0_delaymicros+0x8>
    12c0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <u32_gs_tmr0nuofovs>
    12c4:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    12c8:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    12cc:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    12d0:	12 be       	out	0x32, r1	; 50
    12d2:	0e 94 04 09 	call	0x1208	; 0x1208 <TMR0_start>
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	ba 01       	movw	r22, r20
    12dc:	0a c0       	rjmp	.+20     	; 0x12f2 <TMR0_delaymicros+0x46>
    12de:	08 b6       	in	r0, 0x38	; 56
    12e0:	00 fe       	sbrs	r0, 0
    12e2:	fd cf       	rjmp	.-6      	; 0x12de <TMR0_delaymicros+0x32>
    12e4:	88 b7       	in	r24, 0x38	; 56
    12e6:	81 60       	ori	r24, 0x01	; 1
    12e8:	88 bf       	out	0x38, r24	; 56
    12ea:	4f 5f       	subi	r20, 0xFF	; 255
    12ec:	5f 4f       	sbci	r21, 0xFF	; 255
    12ee:	6f 4f       	sbci	r22, 0xFF	; 255
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <u32_gs_tmr0nuofovs>
    12f6:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    12fa:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    12fe:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    1302:	48 17       	cp	r20, r24
    1304:	59 07       	cpc	r21, r25
    1306:	6a 07       	cpc	r22, r26
    1308:	7b 07       	cpc	r23, r27
    130a:	48 f3       	brcs	.-46     	; 0x12de <TMR0_delaymicros+0x32>
    130c:	0e 94 0f 09 	call	0x121e	; 0x121e <TMR0_stop>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	08 95       	ret

00001314 <TMR1_init>:
    1314:	8f b5       	in	r24, 0x2f	; 47
    1316:	8e 7f       	andi	r24, 0xFE	; 254
    1318:	8f bd       	out	0x2f, r24	; 47
    131a:	8f b5       	in	r24, 0x2f	; 47
    131c:	8d 7f       	andi	r24, 0xFD	; 253
    131e:	8f bd       	out	0x2f, r24	; 47
    1320:	8e b5       	in	r24, 0x2e	; 46
    1322:	87 7f       	andi	r24, 0xF7	; 247
    1324:	8e bd       	out	0x2e, r24	; 46
    1326:	8e b5       	in	r24, 0x2e	; 46
    1328:	8f 7e       	andi	r24, 0xEF	; 239
    132a:	8e bd       	out	0x2e, r24	; 46
    132c:	8f b5       	in	r24, 0x2f	; 47
    132e:	84 60       	ori	r24, 0x04	; 4
    1330:	8f bd       	out	0x2f, r24	; 47
    1332:	8f b5       	in	r24, 0x2f	; 47
    1334:	88 60       	ori	r24, 0x08	; 8
    1336:	8f bd       	out	0x2f, r24	; 47
    1338:	8f b7       	in	r24, 0x3f	; 63
    133a:	80 68       	ori	r24, 0x80	; 128
    133c:	8f bf       	out	0x3f, r24	; 63
    133e:	89 b7       	in	r24, 0x39	; 57
    1340:	9a b7       	in	r25, 0x3a	; 58
    1342:	84 60       	ori	r24, 0x04	; 4
    1344:	9a bf       	out	0x3a, r25	; 58
    1346:	89 bf       	out	0x39, r24	; 57
    1348:	08 95       	ret

0000134a <TMR1_start>:
    134a:	1d bc       	out	0x2d, r1	; 45
    134c:	1c bc       	out	0x2c, r1	; 44
    134e:	8e b5       	in	r24, 0x2e	; 46
    1350:	81 60       	ori	r24, 0x01	; 1
    1352:	8e bd       	out	0x2e, r24	; 46
    1354:	8e b5       	in	r24, 0x2e	; 46
    1356:	8d 7f       	andi	r24, 0xFD	; 253
    1358:	8e bd       	out	0x2e, r24	; 46
    135a:	8e b5       	in	r24, 0x2e	; 46
    135c:	8b 7f       	andi	r24, 0xFB	; 251
    135e:	8e bd       	out	0x2e, r24	; 46
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	08 95       	ret

00001364 <TMR1_stop>:
    1364:	8e b5       	in	r24, 0x2e	; 46
    1366:	8e 7f       	andi	r24, 0xFE	; 254
    1368:	8e bd       	out	0x2e, r24	; 46
    136a:	8e b5       	in	r24, 0x2e	; 46
    136c:	8d 7f       	andi	r24, 0xFD	; 253
    136e:	8e bd       	out	0x2e, r24	; 46
    1370:	8e b5       	in	r24, 0x2e	; 46
    1372:	8b 7f       	andi	r24, 0xFB	; 251
    1374:	8e bd       	out	0x2e, r24	; 46
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	08 95       	ret

0000137a <TMR1_getvalue>:
    137a:	2c b5       	in	r18, 0x2c	; 44
    137c:	3d b5       	in	r19, 0x2d	; 45
    137e:	fc 01       	movw	r30, r24
    1380:	31 83       	std	Z+1, r19	; 0x01
    1382:	20 83       	st	Z, r18
    1384:	08 95       	ret

00001386 <TMR1_setcounterval>:
    1386:	9d bd       	out	0x2d, r25	; 45
    1388:	8c bd       	out	0x2c, r24	; 44
    138a:	08 95       	ret

0000138c <TMR2_init>:
    138c:	85 b5       	in	r24, 0x25	; 37
    138e:	8f 77       	andi	r24, 0x7F	; 127
    1390:	85 bd       	out	0x25, r24	; 37
    1392:	85 b5       	in	r24, 0x25	; 37
    1394:	8f 7b       	andi	r24, 0xBF	; 191
    1396:	85 bd       	out	0x25, r24	; 37
    1398:	85 b5       	in	r24, 0x25	; 37
    139a:	87 7f       	andi	r24, 0xF7	; 247
    139c:	85 bd       	out	0x25, r24	; 37
    139e:	85 b5       	in	r24, 0x25	; 37
    13a0:	8f 7e       	andi	r24, 0xEF	; 239
    13a2:	85 bd       	out	0x25, r24	; 37
    13a4:	85 b5       	in	r24, 0x25	; 37
    13a6:	8f 7d       	andi	r24, 0xDF	; 223
    13a8:	85 bd       	out	0x25, r24	; 37
    13aa:	8f b7       	in	r24, 0x3f	; 63
    13ac:	80 68       	ori	r24, 0x80	; 128
    13ae:	8f bf       	out	0x3f, r24	; 63
    13b0:	89 b7       	in	r24, 0x39	; 57
    13b2:	80 64       	ori	r24, 0x40	; 64
    13b4:	89 bf       	out	0x39, r24	; 57
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	08 95       	ret

000013ba <TMR2_start>:
    13ba:	85 b5       	in	r24, 0x25	; 37
    13bc:	81 60       	ori	r24, 0x01	; 1
    13be:	85 bd       	out	0x25, r24	; 37
    13c0:	85 b5       	in	r24, 0x25	; 37
    13c2:	8d 7f       	andi	r24, 0xFD	; 253
    13c4:	85 bd       	out	0x25, r24	; 37
    13c6:	85 b5       	in	r24, 0x25	; 37
    13c8:	8b 7f       	andi	r24, 0xFB	; 251
    13ca:	85 bd       	out	0x25, r24	; 37
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	08 95       	ret

000013d0 <TMR2_stop>:
    13d0:	85 b5       	in	r24, 0x25	; 37
    13d2:	8e 7f       	andi	r24, 0xFE	; 254
    13d4:	85 bd       	out	0x25, r24	; 37
    13d6:	85 b5       	in	r24, 0x25	; 37
    13d8:	8d 7f       	andi	r24, 0xFD	; 253
    13da:	85 bd       	out	0x25, r24	; 37
    13dc:	85 b5       	in	r24, 0x25	; 37
    13de:	8b 7f       	andi	r24, 0xFB	; 251
    13e0:	85 bd       	out	0x25, r24	; 37
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	08 95       	ret

000013e6 <TMR2_getovs>:
    13e6:	bc 01       	movw	r22, r24
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 a2 0a 	call	0x1544	; 0x1544 <__floatunsisf>
    13f0:	2f e6       	ldi	r18, 0x6F	; 111
    13f2:	32 e1       	ldi	r19, 0x12	; 18
    13f4:	43 e0       	ldi	r20, 0x03	; 3
    13f6:	5d e3       	ldi	r21, 0x3D	; 61
    13f8:	0e 94 01 0a 	call	0x1402	; 0x1402 <__divsf3>
    13fc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__fixunssfsi>
    1400:	08 95       	ret

00001402 <__divsf3>:
    1402:	0e 94 15 0a 	call	0x142a	; 0x142a <__divsf3x>
    1406:	0c 94 f6 0a 	jmp	0x15ec	; 0x15ec <__fp_round>
    140a:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fp_pscB>
    140e:	58 f0       	brcs	.+22     	; 0x1426 <__divsf3+0x24>
    1410:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__fp_pscA>
    1414:	40 f0       	brcs	.+16     	; 0x1426 <__divsf3+0x24>
    1416:	29 f4       	brne	.+10     	; 0x1422 <__divsf3+0x20>
    1418:	5f 3f       	cpi	r21, 0xFF	; 255
    141a:	29 f0       	breq	.+10     	; 0x1426 <__divsf3+0x24>
    141c:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_inf>
    1420:	51 11       	cpse	r21, r1
    1422:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_szero>
    1426:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__fp_nan>

0000142a <__divsf3x>:
    142a:	0e 94 07 0b 	call	0x160e	; 0x160e <__fp_split3>
    142e:	68 f3       	brcs	.-38     	; 0x140a <__divsf3+0x8>

00001430 <__divsf3_pse>:
    1430:	99 23       	and	r25, r25
    1432:	b1 f3       	breq	.-20     	; 0x1420 <__divsf3+0x1e>
    1434:	55 23       	and	r21, r21
    1436:	91 f3       	breq	.-28     	; 0x141c <__divsf3+0x1a>
    1438:	95 1b       	sub	r25, r21
    143a:	55 0b       	sbc	r21, r21
    143c:	bb 27       	eor	r27, r27
    143e:	aa 27       	eor	r26, r26
    1440:	62 17       	cp	r22, r18
    1442:	73 07       	cpc	r23, r19
    1444:	84 07       	cpc	r24, r20
    1446:	38 f0       	brcs	.+14     	; 0x1456 <__divsf3_pse+0x26>
    1448:	9f 5f       	subi	r25, 0xFF	; 255
    144a:	5f 4f       	sbci	r21, 0xFF	; 255
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	44 1f       	adc	r20, r20
    1452:	aa 1f       	adc	r26, r26
    1454:	a9 f3       	breq	.-22     	; 0x1440 <__divsf3_pse+0x10>
    1456:	35 d0       	rcall	.+106    	; 0x14c2 <__divsf3_pse+0x92>
    1458:	0e 2e       	mov	r0, r30
    145a:	3a f0       	brmi	.+14     	; 0x146a <__divsf3_pse+0x3a>
    145c:	e0 e8       	ldi	r30, 0x80	; 128
    145e:	32 d0       	rcall	.+100    	; 0x14c4 <__divsf3_pse+0x94>
    1460:	91 50       	subi	r25, 0x01	; 1
    1462:	50 40       	sbci	r21, 0x00	; 0
    1464:	e6 95       	lsr	r30
    1466:	00 1c       	adc	r0, r0
    1468:	ca f7       	brpl	.-14     	; 0x145c <__divsf3_pse+0x2c>
    146a:	2b d0       	rcall	.+86     	; 0x14c2 <__divsf3_pse+0x92>
    146c:	fe 2f       	mov	r31, r30
    146e:	29 d0       	rcall	.+82     	; 0x14c2 <__divsf3_pse+0x92>
    1470:	66 0f       	add	r22, r22
    1472:	77 1f       	adc	r23, r23
    1474:	88 1f       	adc	r24, r24
    1476:	bb 1f       	adc	r27, r27
    1478:	26 17       	cp	r18, r22
    147a:	37 07       	cpc	r19, r23
    147c:	48 07       	cpc	r20, r24
    147e:	ab 07       	cpc	r26, r27
    1480:	b0 e8       	ldi	r27, 0x80	; 128
    1482:	09 f0       	breq	.+2      	; 0x1486 <__divsf3_pse+0x56>
    1484:	bb 0b       	sbc	r27, r27
    1486:	80 2d       	mov	r24, r0
    1488:	bf 01       	movw	r22, r30
    148a:	ff 27       	eor	r31, r31
    148c:	93 58       	subi	r25, 0x83	; 131
    148e:	5f 4f       	sbci	r21, 0xFF	; 255
    1490:	3a f0       	brmi	.+14     	; 0x14a0 <__divsf3_pse+0x70>
    1492:	9e 3f       	cpi	r25, 0xFE	; 254
    1494:	51 05       	cpc	r21, r1
    1496:	78 f0       	brcs	.+30     	; 0x14b6 <__divsf3_pse+0x86>
    1498:	0c 94 df 0a 	jmp	0x15be	; 0x15be <__fp_inf>
    149c:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_szero>
    14a0:	5f 3f       	cpi	r21, 0xFF	; 255
    14a2:	e4 f3       	brlt	.-8      	; 0x149c <__divsf3_pse+0x6c>
    14a4:	98 3e       	cpi	r25, 0xE8	; 232
    14a6:	d4 f3       	brlt	.-12     	; 0x149c <__divsf3_pse+0x6c>
    14a8:	86 95       	lsr	r24
    14aa:	77 95       	ror	r23
    14ac:	67 95       	ror	r22
    14ae:	b7 95       	ror	r27
    14b0:	f7 95       	ror	r31
    14b2:	9f 5f       	subi	r25, 0xFF	; 255
    14b4:	c9 f7       	brne	.-14     	; 0x14a8 <__divsf3_pse+0x78>
    14b6:	88 0f       	add	r24, r24
    14b8:	91 1d       	adc	r25, r1
    14ba:	96 95       	lsr	r25
    14bc:	87 95       	ror	r24
    14be:	97 f9       	bld	r25, 7
    14c0:	08 95       	ret
    14c2:	e1 e0       	ldi	r30, 0x01	; 1
    14c4:	66 0f       	add	r22, r22
    14c6:	77 1f       	adc	r23, r23
    14c8:	88 1f       	adc	r24, r24
    14ca:	bb 1f       	adc	r27, r27
    14cc:	62 17       	cp	r22, r18
    14ce:	73 07       	cpc	r23, r19
    14d0:	84 07       	cpc	r24, r20
    14d2:	ba 07       	cpc	r27, r26
    14d4:	20 f0       	brcs	.+8      	; 0x14de <__divsf3_pse+0xae>
    14d6:	62 1b       	sub	r22, r18
    14d8:	73 0b       	sbc	r23, r19
    14da:	84 0b       	sbc	r24, r20
    14dc:	ba 0b       	sbc	r27, r26
    14de:	ee 1f       	adc	r30, r30
    14e0:	88 f7       	brcc	.-30     	; 0x14c4 <__divsf3_pse+0x94>
    14e2:	e0 95       	com	r30
    14e4:	08 95       	ret

000014e6 <__fixunssfsi>:
    14e6:	0e 94 0f 0b 	call	0x161e	; 0x161e <__fp_splitA>
    14ea:	88 f0       	brcs	.+34     	; 0x150e <__fixunssfsi+0x28>
    14ec:	9f 57       	subi	r25, 0x7F	; 127
    14ee:	98 f0       	brcs	.+38     	; 0x1516 <__fixunssfsi+0x30>
    14f0:	b9 2f       	mov	r27, r25
    14f2:	99 27       	eor	r25, r25
    14f4:	b7 51       	subi	r27, 0x17	; 23
    14f6:	b0 f0       	brcs	.+44     	; 0x1524 <__fixunssfsi+0x3e>
    14f8:	e1 f0       	breq	.+56     	; 0x1532 <__fixunssfsi+0x4c>
    14fa:	66 0f       	add	r22, r22
    14fc:	77 1f       	adc	r23, r23
    14fe:	88 1f       	adc	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	1a f0       	brmi	.+6      	; 0x150a <__fixunssfsi+0x24>
    1504:	ba 95       	dec	r27
    1506:	c9 f7       	brne	.-14     	; 0x14fa <__fixunssfsi+0x14>
    1508:	14 c0       	rjmp	.+40     	; 0x1532 <__fixunssfsi+0x4c>
    150a:	b1 30       	cpi	r27, 0x01	; 1
    150c:	91 f0       	breq	.+36     	; 0x1532 <__fixunssfsi+0x4c>
    150e:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fp_zero>
    1512:	b1 e0       	ldi	r27, 0x01	; 1
    1514:	08 95       	ret
    1516:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__fp_zero>
    151a:	67 2f       	mov	r22, r23
    151c:	78 2f       	mov	r23, r24
    151e:	88 27       	eor	r24, r24
    1520:	b8 5f       	subi	r27, 0xF8	; 248
    1522:	39 f0       	breq	.+14     	; 0x1532 <__fixunssfsi+0x4c>
    1524:	b9 3f       	cpi	r27, 0xF9	; 249
    1526:	cc f3       	brlt	.-14     	; 0x151a <__fixunssfsi+0x34>
    1528:	86 95       	lsr	r24
    152a:	77 95       	ror	r23
    152c:	67 95       	ror	r22
    152e:	b3 95       	inc	r27
    1530:	d9 f7       	brne	.-10     	; 0x1528 <__fixunssfsi+0x42>
    1532:	3e f4       	brtc	.+14     	; 0x1542 <__fixunssfsi+0x5c>
    1534:	90 95       	com	r25
    1536:	80 95       	com	r24
    1538:	70 95       	com	r23
    153a:	61 95       	neg	r22
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
    153e:	8f 4f       	sbci	r24, 0xFF	; 255
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	08 95       	ret

00001544 <__floatunsisf>:
    1544:	e8 94       	clt
    1546:	09 c0       	rjmp	.+18     	; 0x155a <__floatsisf+0x12>

00001548 <__floatsisf>:
    1548:	97 fb       	bst	r25, 7
    154a:	3e f4       	brtc	.+14     	; 0x155a <__floatsisf+0x12>
    154c:	90 95       	com	r25
    154e:	80 95       	com	r24
    1550:	70 95       	com	r23
    1552:	61 95       	neg	r22
    1554:	7f 4f       	sbci	r23, 0xFF	; 255
    1556:	8f 4f       	sbci	r24, 0xFF	; 255
    1558:	9f 4f       	sbci	r25, 0xFF	; 255
    155a:	99 23       	and	r25, r25
    155c:	a9 f0       	breq	.+42     	; 0x1588 <__floatsisf+0x40>
    155e:	f9 2f       	mov	r31, r25
    1560:	96 e9       	ldi	r25, 0x96	; 150
    1562:	bb 27       	eor	r27, r27
    1564:	93 95       	inc	r25
    1566:	f6 95       	lsr	r31
    1568:	87 95       	ror	r24
    156a:	77 95       	ror	r23
    156c:	67 95       	ror	r22
    156e:	b7 95       	ror	r27
    1570:	f1 11       	cpse	r31, r1
    1572:	f8 cf       	rjmp	.-16     	; 0x1564 <__floatsisf+0x1c>
    1574:	fa f4       	brpl	.+62     	; 0x15b4 <__floatsisf+0x6c>
    1576:	bb 0f       	add	r27, r27
    1578:	11 f4       	brne	.+4      	; 0x157e <__floatsisf+0x36>
    157a:	60 ff       	sbrs	r22, 0
    157c:	1b c0       	rjmp	.+54     	; 0x15b4 <__floatsisf+0x6c>
    157e:	6f 5f       	subi	r22, 0xFF	; 255
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	8f 4f       	sbci	r24, 0xFF	; 255
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	16 c0       	rjmp	.+44     	; 0x15b4 <__floatsisf+0x6c>
    1588:	88 23       	and	r24, r24
    158a:	11 f0       	breq	.+4      	; 0x1590 <__floatsisf+0x48>
    158c:	96 e9       	ldi	r25, 0x96	; 150
    158e:	11 c0       	rjmp	.+34     	; 0x15b2 <__floatsisf+0x6a>
    1590:	77 23       	and	r23, r23
    1592:	21 f0       	breq	.+8      	; 0x159c <__floatsisf+0x54>
    1594:	9e e8       	ldi	r25, 0x8E	; 142
    1596:	87 2f       	mov	r24, r23
    1598:	76 2f       	mov	r23, r22
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <__floatsisf+0x5e>
    159c:	66 23       	and	r22, r22
    159e:	71 f0       	breq	.+28     	; 0x15bc <__floatsisf+0x74>
    15a0:	96 e8       	ldi	r25, 0x86	; 134
    15a2:	86 2f       	mov	r24, r22
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	2a f0       	brmi	.+10     	; 0x15b4 <__floatsisf+0x6c>
    15aa:	9a 95       	dec	r25
    15ac:	66 0f       	add	r22, r22
    15ae:	77 1f       	adc	r23, r23
    15b0:	88 1f       	adc	r24, r24
    15b2:	da f7       	brpl	.-10     	; 0x15aa <__floatsisf+0x62>
    15b4:	88 0f       	add	r24, r24
    15b6:	96 95       	lsr	r25
    15b8:	87 95       	ror	r24
    15ba:	97 f9       	bld	r25, 7
    15bc:	08 95       	ret

000015be <__fp_inf>:
    15be:	97 f9       	bld	r25, 7
    15c0:	9f 67       	ori	r25, 0x7F	; 127
    15c2:	80 e8       	ldi	r24, 0x80	; 128
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	08 95       	ret

000015ca <__fp_nan>:
    15ca:	9f ef       	ldi	r25, 0xFF	; 255
    15cc:	80 ec       	ldi	r24, 0xC0	; 192
    15ce:	08 95       	ret

000015d0 <__fp_pscA>:
    15d0:	00 24       	eor	r0, r0
    15d2:	0a 94       	dec	r0
    15d4:	16 16       	cp	r1, r22
    15d6:	17 06       	cpc	r1, r23
    15d8:	18 06       	cpc	r1, r24
    15da:	09 06       	cpc	r0, r25
    15dc:	08 95       	ret

000015de <__fp_pscB>:
    15de:	00 24       	eor	r0, r0
    15e0:	0a 94       	dec	r0
    15e2:	12 16       	cp	r1, r18
    15e4:	13 06       	cpc	r1, r19
    15e6:	14 06       	cpc	r1, r20
    15e8:	05 06       	cpc	r0, r21
    15ea:	08 95       	ret

000015ec <__fp_round>:
    15ec:	09 2e       	mov	r0, r25
    15ee:	03 94       	inc	r0
    15f0:	00 0c       	add	r0, r0
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <__fp_round+0xc>
    15f4:	88 23       	and	r24, r24
    15f6:	52 f0       	brmi	.+20     	; 0x160c <__fp_round+0x20>
    15f8:	bb 0f       	add	r27, r27
    15fa:	40 f4       	brcc	.+16     	; 0x160c <__fp_round+0x20>
    15fc:	bf 2b       	or	r27, r31
    15fe:	11 f4       	brne	.+4      	; 0x1604 <__fp_round+0x18>
    1600:	60 ff       	sbrs	r22, 0
    1602:	04 c0       	rjmp	.+8      	; 0x160c <__fp_round+0x20>
    1604:	6f 5f       	subi	r22, 0xFF	; 255
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	8f 4f       	sbci	r24, 0xFF	; 255
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	08 95       	ret

0000160e <__fp_split3>:
    160e:	57 fd       	sbrc	r21, 7
    1610:	90 58       	subi	r25, 0x80	; 128
    1612:	44 0f       	add	r20, r20
    1614:	55 1f       	adc	r21, r21
    1616:	59 f0       	breq	.+22     	; 0x162e <__fp_splitA+0x10>
    1618:	5f 3f       	cpi	r21, 0xFF	; 255
    161a:	71 f0       	breq	.+28     	; 0x1638 <__fp_splitA+0x1a>
    161c:	47 95       	ror	r20

0000161e <__fp_splitA>:
    161e:	88 0f       	add	r24, r24
    1620:	97 fb       	bst	r25, 7
    1622:	99 1f       	adc	r25, r25
    1624:	61 f0       	breq	.+24     	; 0x163e <__fp_splitA+0x20>
    1626:	9f 3f       	cpi	r25, 0xFF	; 255
    1628:	79 f0       	breq	.+30     	; 0x1648 <__fp_splitA+0x2a>
    162a:	87 95       	ror	r24
    162c:	08 95       	ret
    162e:	12 16       	cp	r1, r18
    1630:	13 06       	cpc	r1, r19
    1632:	14 06       	cpc	r1, r20
    1634:	55 1f       	adc	r21, r21
    1636:	f2 cf       	rjmp	.-28     	; 0x161c <__fp_split3+0xe>
    1638:	46 95       	lsr	r20
    163a:	f1 df       	rcall	.-30     	; 0x161e <__fp_splitA>
    163c:	08 c0       	rjmp	.+16     	; 0x164e <__fp_splitA+0x30>
    163e:	16 16       	cp	r1, r22
    1640:	17 06       	cpc	r1, r23
    1642:	18 06       	cpc	r1, r24
    1644:	99 1f       	adc	r25, r25
    1646:	f1 cf       	rjmp	.-30     	; 0x162a <__fp_splitA+0xc>
    1648:	86 95       	lsr	r24
    164a:	71 05       	cpc	r23, r1
    164c:	61 05       	cpc	r22, r1
    164e:	08 94       	sec
    1650:	08 95       	ret

00001652 <__fp_zero>:
    1652:	e8 94       	clt

00001654 <__fp_szero>:
    1654:	bb 27       	eor	r27, r27
    1656:	66 27       	eor	r22, r22
    1658:	77 27       	eor	r23, r23
    165a:	cb 01       	movw	r24, r22
    165c:	97 f9       	bld	r25, 7
    165e:	08 95       	ret

00001660 <__divmodsi4>:
    1660:	05 2e       	mov	r0, r21
    1662:	97 fb       	bst	r25, 7
    1664:	1e f4       	brtc	.+6      	; 0x166c <__divmodsi4+0xc>
    1666:	00 94       	com	r0
    1668:	0e 94 47 0b 	call	0x168e	; 0x168e <__negsi2>
    166c:	57 fd       	sbrc	r21, 7
    166e:	07 d0       	rcall	.+14     	; 0x167e <__divmodsi4_neg2>
    1670:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__udivmodsi4>
    1674:	07 fc       	sbrc	r0, 7
    1676:	03 d0       	rcall	.+6      	; 0x167e <__divmodsi4_neg2>
    1678:	4e f4       	brtc	.+18     	; 0x168c <__divmodsi4_exit>
    167a:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__negsi2>

0000167e <__divmodsi4_neg2>:
    167e:	50 95       	com	r21
    1680:	40 95       	com	r20
    1682:	30 95       	com	r19
    1684:	21 95       	neg	r18
    1686:	3f 4f       	sbci	r19, 0xFF	; 255
    1688:	4f 4f       	sbci	r20, 0xFF	; 255
    168a:	5f 4f       	sbci	r21, 0xFF	; 255

0000168c <__divmodsi4_exit>:
    168c:	08 95       	ret

0000168e <__negsi2>:
    168e:	90 95       	com	r25
    1690:	80 95       	com	r24
    1692:	70 95       	com	r23
    1694:	61 95       	neg	r22
    1696:	7f 4f       	sbci	r23, 0xFF	; 255
    1698:	8f 4f       	sbci	r24, 0xFF	; 255
    169a:	9f 4f       	sbci	r25, 0xFF	; 255
    169c:	08 95       	ret

0000169e <__umulhisi3>:
    169e:	a2 9f       	mul	r26, r18
    16a0:	b0 01       	movw	r22, r0
    16a2:	b3 9f       	mul	r27, r19
    16a4:	c0 01       	movw	r24, r0
    16a6:	a3 9f       	mul	r26, r19
    16a8:	70 0d       	add	r23, r0
    16aa:	81 1d       	adc	r24, r1
    16ac:	11 24       	eor	r1, r1
    16ae:	91 1d       	adc	r25, r1
    16b0:	b2 9f       	mul	r27, r18
    16b2:	70 0d       	add	r23, r0
    16b4:	81 1d       	adc	r24, r1
    16b6:	11 24       	eor	r1, r1
    16b8:	91 1d       	adc	r25, r1
    16ba:	08 95       	ret

000016bc <__udivmodsi4>:
    16bc:	a1 e2       	ldi	r26, 0x21	; 33
    16be:	1a 2e       	mov	r1, r26
    16c0:	aa 1b       	sub	r26, r26
    16c2:	bb 1b       	sub	r27, r27
    16c4:	fd 01       	movw	r30, r26
    16c6:	0d c0       	rjmp	.+26     	; 0x16e2 <__udivmodsi4_ep>

000016c8 <__udivmodsi4_loop>:
    16c8:	aa 1f       	adc	r26, r26
    16ca:	bb 1f       	adc	r27, r27
    16cc:	ee 1f       	adc	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	a2 17       	cp	r26, r18
    16d2:	b3 07       	cpc	r27, r19
    16d4:	e4 07       	cpc	r30, r20
    16d6:	f5 07       	cpc	r31, r21
    16d8:	20 f0       	brcs	.+8      	; 0x16e2 <__udivmodsi4_ep>
    16da:	a2 1b       	sub	r26, r18
    16dc:	b3 0b       	sbc	r27, r19
    16de:	e4 0b       	sbc	r30, r20
    16e0:	f5 0b       	sbc	r31, r21

000016e2 <__udivmodsi4_ep>:
    16e2:	66 1f       	adc	r22, r22
    16e4:	77 1f       	adc	r23, r23
    16e6:	88 1f       	adc	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	1a 94       	dec	r1
    16ec:	69 f7       	brne	.-38     	; 0x16c8 <__udivmodsi4_loop>
    16ee:	60 95       	com	r22
    16f0:	70 95       	com	r23
    16f2:	80 95       	com	r24
    16f4:	90 95       	com	r25
    16f6:	9b 01       	movw	r18, r22
    16f8:	ac 01       	movw	r20, r24
    16fa:	bd 01       	movw	r22, r26
    16fc:	cf 01       	movw	r24, r30
    16fe:	08 95       	ret

00001700 <_exit>:
    1700:	f8 94       	cli

00001702 <__stop_program>:
    1702:	ff cf       	rjmp	.-2      	; 0x1702 <__stop_program>
