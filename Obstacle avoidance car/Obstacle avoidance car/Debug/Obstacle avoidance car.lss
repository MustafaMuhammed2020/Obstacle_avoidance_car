
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001780  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00001780  00001814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080009e  0080009e  00001852  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000350  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038ed  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001117  00000000  00000000  000054fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000211b  00000000  00000000  00006614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000061c  00000000  00000000  00008730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fcb  00000000  00000000  00008d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000139d  00000000  00000000  00009d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ff 08 	jmp	0x11fe	; 0x11fe <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 07 	call	0xeda	; 0xeda <main>
      8a:	0c 94 be 0b 	jmp	0x177c	; 0x177c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TMR1_routine>:
}


/** FUNCTION TO BE EXECUTED WHEN TMR1 OVERFLOW FIRED **/
void TMR1_routine(void)
{
      92:	08 95       	ret

00000094 <TMR2_routine>:
}

/** FUNCTION TO BE EXECUTED WHEN TMR2 OVERFLOW FIRED **/
void TMR2_routine(void)
{
	u32_g_tick++ ; /** INCREASE TICKS **/
      94:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
      98:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <__data_end+0x1>
      9c:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <__data_end+0x2>
      a0:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <__data_end+0x3>
      a4:	01 96       	adiw	r24, 0x01	; 1
      a6:	a1 1d       	adc	r26, r1
      a8:	b1 1d       	adc	r27, r1
      aa:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
      ae:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <__data_end+0x1>
      b2:	a0 93 a0 00 	sts	0x00A0, r26	; 0x8000a0 <__data_end+0x2>
      b6:	b0 93 a1 00 	sts	0x00A1, r27	; 0x8000a1 <__data_end+0x3>
      ba:	08 95       	ret

000000bc <INT0_routine>:
	}
}

void INT0_routine(void)
{
	u8_echoedge++ ; /** INCREASE THE ECHO BY 1 **/
      bc:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <u8_echoedge>
      c0:	8f 5f       	subi	r24, 0xFF	; 255
      c2:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <u8_echoedge>
	
	if(u8_echoedge == FIRST_EDGE ) /** FIRST CHANGE (RISING EDGE) **/
      c6:	81 30       	cpi	r24, 0x01	; 1
      c8:	19 f4       	brne	.+6      	; 0xd0 <INT0_routine+0x14>
	{
		ICU_start(); /** START ICU / COUNTING **/
      ca:	0e 94 d7 03 	call	0x7ae	; 0x7ae <ICU_start>
      ce:	08 95       	ret
	}
	
	else if(u8_echoedge == SECOND_EDGE) /** SECOND CHANGE (FALLING EDGE) **/
      d0:	82 30       	cpi	r24, 0x02	; 2
      d2:	e9 f4       	brne	.+58     	; 0x10e <INT0_routine+0x52>
	{
		ICU_stop(); /** STOP ICU / COUNTING **/
      d4:	0e 94 dd 03 	call	0x7ba	; 0x7ba <ICU_stop>
		
		u16_g_time = ICU_getvalue(); /** GET PULSE LENGTH **/
      d8:	0e 94 c5 03 	call	0x78a	; 0x78a <ICU_getvalue>
      dc:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <u16_g_time+0x1>
      e0:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <u16_g_time>
		
		ICU_setcounterval(INITIATE_COUNTER_VAL); /** START COUNTING FROM ZERO **/
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 da 03 	call	0x7b4	; 0x7b4 <ICU_setcounterval>
				
		u8_echoedge = 0 ;     /** REINITIALIZE ECHO EDGE TO 0 TO REPEAT IN ANY CHANGE AGAIN **/
      ec:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <u8_echoedge>
		
		u8_g_distance = (u16_g_time / US_DIVIDER) ; /** CALCULATE THE DISTANCE **/
      f0:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <u16_g_time>
      f4:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
      f8:	af e9       	ldi	r26, 0x9F	; 159
      fa:	b6 e4       	ldi	r27, 0x46	; 70
      fc:	0e 94 8d 0b 	call	0x171a	; 0x171a <__umulhisi3>
     100:	88 0f       	add	r24, r24
     102:	89 2f       	mov	r24, r25
     104:	88 1f       	adc	r24, r24
     106:	99 0b       	sbc	r25, r25
     108:	91 95       	neg	r25
     10a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <u8_g_distance>
     10e:	08 95       	ret

00000110 <APP_init>:
uint32_t u32_g_tick = 0 ;            /** GLOBAL VARIABLE TO BE COMPARED WITH DELAY TICKS **/   

/** FUNCTION TO INITIALIZE APPLICATION MODULES **/
void APP_init()
{
    ICU_init(); /** INITIALIZE ICU **/
     110:	0e 94 bf 03 	call	0x77e	; 0x77e <ICU_init>

	US_init(); /** INITILAIZATION ULTRASONIC MODULE **/
     114:	0e 94 56 07 	call	0xeac	; 0xeac <US_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
     118:	0e 94 09 09 	call	0x1212	; 0x1212 <TMR0_init>
	
	TMR2_init() ; /** INITIALIZE TIMER 2 **/
     11c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <TMR2_init>
	
	KEYPAD_init() ; /** INITIALIZE KEYPAD **/
     120:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <KEYPAD_init>
	
	Button_init(); /** INITIALIZATION OF BUTTON **/
     124:	0e 94 9a 03 	call	0x734	; 0x734 <Button_init>
	
	LCD_init(); /** INITIALIZE LCD **/
     128:	0e 94 0a 05 	call	0xa14	; 0xa14 <LCD_init>
	
	INT0_setcallback(INT0_routine) ; /** SET THE CALLBACK OF INT0 **/
     12c:	8e e5       	ldi	r24, 0x5E	; 94
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <INT0_setcallback>
	
	TMR1_setcallback(TMR1_routine) ; /** SET THE CALLBACK OF TMR1 **/
     134:	89 e4       	ldi	r24, 0x49	; 73
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 e6 09 	call	0x13cc	; 0x13cc <TMR1_setcallback>
	
	TMR2_setcallback(TMR2_routine) ; /** SET THE CALLBACK OF TMR2 **/
     13c:	8a e4       	ldi	r24, 0x4A	; 74
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	0e 94 30 0a 	call	0x1460	; 0x1460 <TMR2_setcallback>
	
	TMR0_delayms(MS_DELAY_50); /** DELAY FOR LCD INITIALIZATION **/
     144:	62 e3       	ldi	r22, 0x32	; 50
     146:	70 e0       	ldi	r23, 0x00	; 0
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>

	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	0e 94 48 06 	call	0xc90	; 0xc90 <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	0e 94 48 06 	call	0xc90	; 0xc90 <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	0e 94 48 06 	call	0xc90	; 0xc90 <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
     162:	83 e0       	ldi	r24, 0x03	; 3
     164:	0e 94 48 06 	call	0xc90	; 0xc90 <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	0e 94 96 06 	call	0xd2c	; 0xd2c <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 96 06 	call	0xd2c	; 0xd2c <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	0e 94 96 06 	call	0xd2c	; 0xd2c <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
     17a:	83 e0       	ldi	r24, 0x03	; 3
     17c:	0e 94 96 06 	call	0xd2c	; 0xd2c <MOTOR_rotateclkdir>
     180:	08 95       	ret

00000182 <APP_setentry>:

}

/** FUNCTION TO SET DEFAULTS **/
void APP_setentry()
{
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	00 d0       	rcall	.+0      	; 0x188 <APP_setentry+0x6>
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_a_btnstatus = 0 , u8_a_pressednum = 0 ;
     18c:	19 82       	std	Y+1, r1	; 0x01
     18e:	1a 82       	std	Y+2, r1	; 0x02
	
 	u32_g_tick = 0 ;
     190:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     194:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     198:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     19c:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
	 
 	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     1a0:	88 e8       	ldi	r24, 0x88	; 136
     1a2:	93 e1       	ldi	r25, 0x13	; 19
     1a4:	0e 94 22 0a 	call	0x1444	; 0x1444 <TMR2_getovs>
     1a8:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     1ac:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     1b0:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     1b4:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>

 	TMR2_start() ; /** START TIMER 2 **/
     1b8:	0e 94 0c 0a 	call	0x1418	; 0x1418 <TMR2_start>

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     1bc:	39 c0       	rjmp	.+114    	; 0x230 <APP_setentry+0xae>
	{
 		LCD_goto(LCD_POS_0 , LCD_POS_1);
     1be:	61 e0       	ldi	r22, 0x01	; 1
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_goto>
 		LCD_writestr("Set Def. Rot");
     1c6:	80 e6       	ldi	r24, 0x60	; 96
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_writestr>

 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON PRESSED **/
     1ce:	ae 01       	movw	r20, r28
     1d0:	4f 5f       	subi	r20, 0xFF	; 255
     1d2:	5f 4f       	sbci	r21, 0xFF	; 255
     1d4:	63 e0       	ldi	r22, 0x03	; 3
     1d6:	83 e0       	ldi	r24, 0x03	; 3
     1d8:	0e 94 a0 03 	call	0x740	; 0x740 <Is_pressed>
 		TMR0_delayms(MS_DELAY_100); /** WAIT 100 MS FOR BUTTON TO SETTLE **/
     1dc:	64 e6       	ldi	r22, 0x64	; 100
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>
 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON IS STILL PRESSED **/
     1e8:	ae 01       	movw	r20, r28
     1ea:	4f 5f       	subi	r20, 0xFF	; 255
     1ec:	5f 4f       	sbci	r21, 0xFF	; 255
     1ee:	63 e0       	ldi	r22, 0x03	; 3
     1f0:	83 e0       	ldi	r24, 0x03	; 3
     1f2:	0e 94 a0 03 	call	0x740	; 0x740 <Is_pressed>

		if (u8_a_btnstatus) /** IF THE BUTTON PRESSED **/
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	88 23       	and	r24, r24
     1fa:	d1 f0       	breq	.+52     	; 0x230 <APP_setentry+0xae>
 		{
 			u8_g_rotationcounter++ ; /** INCREASE ROTATION COUNTER BY 1 **/
     1fc:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <u8_g_rotationcounter>
     200:	8f 5f       	subi	r24, 0xFF	; 255
     202:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <u8_g_rotationcounter>

 			if (u8_g_rotationcounter == LEFT_ROTATION) /** LEFT ROTATION **/
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	41 f4       	brne	.+16     	; 0x21a <APP_setentry+0x98>
 			{
				LCD_goto(LCD_POS_1 , LCD_POS_1);
     20a:	61 e0       	ldi	r22, 0x01	; 1
     20c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_goto>
				LCD_writestr("LEFT ROTATION");
     210:	8d e6       	ldi	r24, 0x6D	; 109
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_writestr>
     218:	0a c0       	rjmp	.+20     	; 0x22e <APP_setentry+0xac>
			}
	 		else if(u8_g_rotationcounter == RIGHT_ROTATION) /** RIGHT ROTATION **/
     21a:	82 30       	cpi	r24, 0x02	; 2
     21c:	41 f4       	brne	.+16     	; 0x22e <APP_setentry+0xac>
	 		{
 				LCD_goto(LCD_POS_1 , LCD_POS_1);
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_goto>
 				LCD_writestr("RIGHT ROTATION");
     226:	8b e7       	ldi	r24, 0x7B	; 123
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_writestr>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
     22e:	19 82       	std	Y+1, r1	; 0x01
	 
 	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

 	TMR2_start() ; /** START TIMER 2 **/

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     230:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     234:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     238:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     23c:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     240:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     244:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     248:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     24c:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     250:	48 17       	cp	r20, r24
     252:	59 07       	cpc	r21, r25
     254:	6a 07       	cpc	r22, r26
     256:	7b 07       	cpc	r23, r27
     258:	08 f4       	brcc	.+2      	; 0x25c <APP_setentry+0xda>
     25a:	b1 cf       	rjmp	.-158    	; 0x1be <APP_setentry+0x3c>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
 		}
 	}
	
 	TMR2_stop(); /** STOP TIMER 2 **/
     25c:	0e 94 17 0a 	call	0x142e	; 0x142e <TMR2_stop>
		
	do /** ACCEPT KEYPAD BUTTON 1 FROM USER **/
	{
 		KEYPAD_read(&u8_a_pressednum);
     260:	ce 01       	movw	r24, r28
     262:	02 96       	adiw	r24, 0x02	; 2
     264:	0e 94 1e 04 	call	0x83c	; 0x83c <KEYPAD_read>
 	} while (u8_a_pressednum != START_BTN);
     268:	8a 81       	ldd	r24, Y+2	; 0x02
     26a:	81 33       	cpi	r24, 0x31	; 49
     26c:	c9 f7       	brne	.-14     	; 0x260 <APP_setentry+0xde>

 	 LCD_sendcmd(LCD_CLEAR);
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     274:	64 e1       	ldi	r22, 0x14	; 20
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>
	 
	 LCD_goto(LCD_POS_0 , LCD_POS_2);
     280:	62 e0       	ldi	r22, 0x02	; 2
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_goto>
	 LCD_writestr("Waiting");
     288:	8a e8       	ldi	r24, 0x8A	; 138
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_writestr>
	 
	 TMR0_delayms(MS_DELAY_2000); /** WAIT 2 SECONDS **/
     290:	60 ed       	ldi	r22, 0xD0	; 208
     292:	77 e0       	ldi	r23, 0x07	; 7
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>
	 
	 LCD_sendcmd(LCD_CLEAR);
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     2a2:	64 e1       	ldi	r22, 0x14	; 20
     2a4:	70 e0       	ldi	r23, 0x00	; 0
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>
	 
}
     2ae:	0f 90       	pop	r0
     2b0:	0f 90       	pop	r0
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	08 95       	ret

000002b8 <APP_start>:

void APP_start()
{	
	u32_g_tick = 0 , u32_g_delay = 0 ; /** VARIABLES TO HANDLE THE DELAY **/
     2b8:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     2bc:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     2c0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     2c4:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
     2c8:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <u32_g_delay>
     2cc:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <u32_g_delay+0x1>
     2d0:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <u32_g_delay+0x2>
     2d4:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <u32_g_delay+0x3>
	
	US_sendtrigger(); /** SEND TRIGGER **/
     2d8:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <US_sendtrigger>
		
	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     2dc:	88 e8       	ldi	r24, 0x88	; 136
     2de:	93 e1       	ldi	r25, 0x13	; 19
     2e0:	0e 94 22 0a 	call	0x1444	; 0x1444 <TMR2_getovs>
     2e4:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     2e8:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     2ec:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     2f0:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     2f4:	82 c0       	rjmp	.+260    	; 0x3fa <APP_start+0x142>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
     2f6:	af e9       	ldi	r26, 0x9F	; 159
     2f8:	b6 e4       	ldi	r27, 0x46	; 70
     2fa:	0e 94 8d 0b 	call	0x171a	; 0x171a <__umulhisi3>
     2fe:	88 0f       	add	r24, r24
     300:	89 2f       	mov	r24, r25
     302:	88 1f       	adc	r24, r24
     304:	99 0b       	sbc	r25, r25
     306:	91 95       	neg	r25
     308:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <u8_g_distance>
			
			TMR2_start() ; /** START TIMER 2 **/
     30c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <TMR2_start>
		
			while (u32_g_tick < u32_g_delay)
     310:	2d c0       	rjmp	.+90     	; 0x36c <APP_start+0xb4>
			{
				/** MOVE WITH 50% SPEED FOR 5 MIN **/
				MOTOR_turnon(MOTOR1_ID);
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
				LCD_goto(LCD_POS_0, LCD_POS_1) ;
     32a:	61 e0       	ldi	r22, 0x01	; 1
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_goto>
				TMR0_delaymicros(SPEED_50_ON_TIME);
     332:	60 ee       	ldi	r22, 0xE0	; 224
     334:	74 ec       	ldi	r23, 0xC4	; 196
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     34a:	82 e0       	ldi	r24, 0x02	; 2
     34c:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
				LCD_writestr("Distance :");
     356:	82 e9       	ldi	r24, 0x92	; 146
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_writestr>
				LCD_writeint(u8_g_distance);
     35e:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writeint>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
			
			TMR2_start() ; /** START TIMER 2 **/
		
			while (u32_g_tick < u32_g_delay)
     36c:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     370:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     374:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     378:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     37c:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     380:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     384:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     388:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     38c:	48 17       	cp	r20, r24
     38e:	59 07       	cpc	r21, r25
     390:	6a 07       	cpc	r22, r26
     392:	7b 07       	cpc	r23, r27
     394:	08 f4       	brcc	.+2      	; 0x398 <APP_start+0xe0>
     396:	bd cf       	rjmp	.-134    	; 0x312 <APP_start+0x5a>
				MOTOR_turnoff(MOTOR4_ID);
				LCD_writestr("Distance :");
				LCD_writeint(u8_g_distance);
			}
					
			TMR2_stop() ; /** STOP TIMER2 AFTER THE 5 SECONDS **/
     398:	0e 94 17 0a 	call	0x142e	; 0x142e <TMR2_stop>
					
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     3ae:	83 e0       	ldi	r24, 0x03	; 3
     3b0:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     3b4:	61 e0       	ldi	r22, 0x01	; 1
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_goto>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     3bc:	60 e5       	ldi	r22, 0x50	; 80
     3be:	70 e5       	ldi	r23, 0x50	; 80
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     3da:	83 e0       	ldi	r24, 0x03	; 3
     3dc:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			LCD_writestr("Distance :");
     3e0:	82 e9       	ldi	r24, 0x92	; 146
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_writestr>
			LCD_writeint(u8_g_distance);
     3e8:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writeint>
			
			US_sendtrigger(); /** SEND TRIGGER **/
     3f6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <US_sendtrigger>
	
	US_sendtrigger(); /** SEND TRIGGER **/
		
	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     3fa:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <u16_g_time>
     3fe:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     402:	20 3b       	cpi	r18, 0xB0	; 176
     404:	80 e8       	ldi	r24, 0x80	; 128
     406:	38 07       	cpc	r19, r24
     408:	08 f0       	brcs	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     40a:	75 cf       	rjmp	.-278    	; 0x2f6 <APP_start+0x3e>
     40c:	2f c0       	rjmp	.+94     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
	{
		/** CONTINUE WITH 30% **/
		MOTOR_turnon(MOTOR1_ID);
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
		LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_goto>
		TMR0_delaymicros(SPEED_30_ON_TIME);
     42e:	60 e5       	ldi	r22, 0x50	; 80
     430:	70 e5       	ldi	r23, 0x50	; 80
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     44c:	83 e0       	ldi	r24, 0x03	; 3
     44e:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
		LCD_writestr("Distance :");
     452:	82 e9       	ldi	r24, 0x92	; 146
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_writestr>
		LCD_writeint(u8_g_distance);
     45a:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writeint>
		US_sendtrigger(); /** SEND TRIGGER **/
     468:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <US_sendtrigger>
			LCD_writeint(u8_g_distance);
			
			US_sendtrigger(); /** SEND TRIGGER **/
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
     46c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     470:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     474:	80 36       	cpi	r24, 0x60	; 96
     476:	96 43       	sbci	r25, 0x36	; 54
     478:	50 f6       	brcc	.-108    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		LCD_writestr("Distance :");
		LCD_writeint(u8_g_distance);
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	
	u32_g_tick = 0 ;
     47a:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     47e:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     482:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     486:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
	u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     48a:	84 ef       	ldi	r24, 0xF4	; 244
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 22 0a 	call	0x1444	; 0x1444 <TMR2_getovs>
     492:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     496:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     49a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     49e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20) /** DISTANCE FROM 20 TO 30 CM **/
     4a2:	65 c0       	rjmp	.+202    	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
	{
		/** STOP THEN ROTATE **/
		MOTOR_turnoff(MOTOR1_ID);
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     4b0:	82 e0       	ldi	r24, 0x02	; 2
     4b2:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
		
		TMR2_start() ; /** START TIMER 2 **/
     4bc:	0e 94 0c 0a 	call	0x1418	; 0x1418 <TMR2_start>
		while (u32_g_tick < u32_g_delay)
     4c0:	06 c0       	rjmp	.+12     	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
		{
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     4c8:	83 e0       	ldi	r24, 0x03	; 3
     4ca:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
		MOTOR_turnoff(MOTOR2_ID);
		MOTOR_turnoff(MOTOR3_ID);
		MOTOR_turnoff(MOTOR4_ID);
		
		TMR2_start() ; /** START TIMER 2 **/
		while (u32_g_tick < u32_g_delay)
     4ce:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     4d2:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     4d6:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     4da:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     4de:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     4e2:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     4e6:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     4ea:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     4ee:	48 17       	cp	r20, r24
     4f0:	59 07       	cpc	r21, r25
     4f2:	6a 07       	cpc	r22, r26
     4f4:	7b 07       	cpc	r23, r27
     4f6:	28 f3       	brcs	.-54     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		{
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop(); /** STOP TIMER 2 **/
     4f8:	0e 94 17 0a 	call	0x142e	; 0x142e <TMR2_stop>
			
		while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** WHEN DISTANCE BECOME MORE THAN 30 CM **/
     4fc:	2f c0       	rjmp	.+94     	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
		{
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     510:	83 e0       	ldi	r24, 0x03	; 3
     512:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     516:	61 e0       	ldi	r22, 0x01	; 1
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_goto>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     51e:	60 e5       	ldi	r22, 0x50	; 80
     520:	70 e5       	ldi	r23, 0x50	; 80
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     536:	82 e0       	ldi	r24, 0x02	; 2
     538:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     53c:	83 e0       	ldi	r24, 0x03	; 3
     53e:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			LCD_writestr("Distance :");
     542:	82 e9       	ldi	r24, 0x92	; 146
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_writestr>
			LCD_writeint(u8_g_distance);
     54a:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writeint>
			US_sendtrigger(); /** SEND TRIGGER **/
     558:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <US_sendtrigger>
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop(); /** STOP TIMER 2 **/
			
		while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** WHEN DISTANCE BECOME MORE THAN 30 CM **/
     55c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     560:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     564:	80 36       	cpi	r24, 0x60	; 96
     566:	96 43       	sbci	r25, 0x36	; 54
     568:	50 f6       	brcc	.-108    	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
			MOTOR_turnoff(MOTOR4_ID);
			LCD_writestr("Distance :");
			LCD_writeint(u8_g_distance);
			US_sendtrigger(); /** SEND TRIGGER **/
		}
		US_sendtrigger(); /** SEND TRIGGER **/
     56a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <US_sendtrigger>
	}
	
	u32_g_tick = 0 ;
	u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20) /** DISTANCE FROM 20 TO 30 CM **/
     56e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     572:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     576:	80 34       	cpi	r24, 0x40	; 64
     578:	94 42       	sbci	r25, 0x24	; 36
     57a:	08 f0       	brcs	.+2      	; 0x57e <__EEPROM_REGION_LENGTH__+0x17e>
     57c:	93 cf       	rjmp	.-218    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     57e:	d1 c0       	rjmp	.+418    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
	{
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 d0 06 	call	0xda0	; 0xda0 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR2_ID);
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	0e 94 d0 06 	call	0xda0	; 0xda0 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR3_ID);
     58c:	82 e0       	ldi	r24, 0x02	; 2
     58e:	0e 94 d0 06 	call	0xda0	; 0xda0 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR4_ID);
     592:	83 e0       	ldi	r24, 0x03	; 3
     594:	0e 94 d0 06 	call	0xda0	; 0xda0 <MOTOR_rotateanticlkdir>
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     598:	2f c0       	rjmp	.+94     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
		{
			/** GO BACKWARDS WITH 30% SPEED **/
			MOTOR_turnon(MOTOR1_ID);
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_goto>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     5ba:	60 e5       	ldi	r22, 0x50	; 80
     5bc:	70 e5       	ldi	r23, 0x50	; 80
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     5d8:	83 e0       	ldi	r24, 0x03	; 3
     5da:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			LCD_writestr("Distance :");
     5de:	82 e9       	ldi	r24, 0x92	; 146
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_writestr>
			LCD_writeint(u8_g_distance);
     5e6:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writeint>
			US_sendtrigger(); /** SEND TRIGGER **/
     5f4:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <US_sendtrigger>
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
		MOTOR_rotateanticlkdir(MOTOR2_ID);
		MOTOR_rotateanticlkdir(MOTOR3_ID);
		MOTOR_rotateanticlkdir(MOTOR4_ID);
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     5f8:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     5fc:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     600:	80 31       	cpi	r24, 0x10	; 16
     602:	96 42       	sbci	r25, 0x26	; 38
     604:	50 f2       	brcs	.-108    	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
			LCD_writestr("Distance :");
			LCD_writeint(u8_g_distance);
			US_sendtrigger(); /** SEND TRIGGER **/
		}
		
		u32_g_tick = 0 ;
     606:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     60a:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     60e:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     612:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
		u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     616:	84 ef       	ldi	r24, 0xF4	; 244
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 22 0a 	call	0x1444	; 0x1444 <TMR2_getovs>
     61e:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     622:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     626:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     62a:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>
		TMR2_start() ; /** START TIMER 2 **/
     62e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <TMR2_start>
		
		MOTOR_rotateclkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0e 94 96 06 	call	0xd2c	; 0xd2c <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR2_ID);
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	0e 94 96 06 	call	0xd2c	; 0xd2c <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR3_ID);
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	0e 94 96 06 	call	0xd2c	; 0xd2c <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR4_ID);
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	0e 94 96 06 	call	0xd2c	; 0xd2c <MOTOR_rotateclkdir>
		
		while ((u16_g_time/DISTANCE_DIV) > DISTANCE_20)
     64a:	63 c0       	rjmp	.+198    	; 0x712 <__EEPROM_REGION_LENGTH__+0x312>
		{
			/** STOP THEN ROTATE **/
			MOTOR_turnoff(MOTOR1_ID);
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
			
			while (u32_g_tick < u32_g_delay)
     664:	06 c0       	rjmp	.+12     	; 0x672 <__EEPROM_REGION_LENGTH__+0x272>
			{
				/** ROTATION **/
				MOTOR_turnon(MOTOR3_ID);
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
			MOTOR_turnoff(MOTOR1_ID);
			MOTOR_turnoff(MOTOR2_ID);
			MOTOR_turnoff(MOTOR3_ID);
			MOTOR_turnoff(MOTOR4_ID);
			
			while (u32_g_tick < u32_g_delay)
     672:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     676:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     67a:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     67e:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     682:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     686:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     68a:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     68e:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     692:	48 17       	cp	r20, r24
     694:	59 07       	cpc	r21, r25
     696:	6a 07       	cpc	r22, r26
     698:	7b 07       	cpc	r23, r27
     69a:	28 f3       	brcs	.-54     	; 0x666 <__EEPROM_REGION_LENGTH__+0x266>
			{
				/** ROTATION **/
				MOTOR_turnon(MOTOR3_ID);
				MOTOR_turnon(MOTOR4_ID);
			}
			US_sendtrigger(); /** SEND TRIGGER **/
     69c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <US_sendtrigger>
			TMR2_stop() ; /** START TIMER 2 **/
     6a0:	0e 94 17 0a 	call	0x142e	; 0x142e <TMR2_stop>
			
			while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30)
     6a4:	2f c0       	rjmp	.+94     	; 0x704 <__EEPROM_REGION_LENGTH__+0x304>
			{
				MOTOR_turnon(MOTOR1_ID);
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     6b2:	82 e0       	ldi	r24, 0x02	; 2
     6b4:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     6b8:	83 e0       	ldi	r24, 0x03	; 3
     6ba:	0e 94 30 07 	call	0xe60	; 0xe60 <MOTOR_turnon>
				LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <LCD_goto>
				TMR0_delaymicros(SPEED_30_ON_TIME);
     6c6:	60 e5       	ldi	r22, 0x50	; 80
     6c8:	70 e5       	ldi	r23, 0x50	; 80
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	0e 94 0a 07 	call	0xe14	; 0xe14 <MOTOR_turnoff>
				LCD_writestr("Distance :");
     6ea:	82 e9       	ldi	r24, 0x92	; 146
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 92 05 	call	0xb24	; 0xb24 <LCD_writestr>
				LCD_writeint(u8_g_distance);
     6f2:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LCD_writeint>
				US_sendtrigger(); /** SEND TRIGGER **/
     700:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <US_sendtrigger>
				MOTOR_turnon(MOTOR4_ID);
			}
			US_sendtrigger(); /** SEND TRIGGER **/
			TMR2_stop() ; /** START TIMER 2 **/
			
			while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30)
     704:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     708:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     70c:	80 36       	cpi	r24, 0x60	; 96
     70e:	96 43       	sbci	r25, 0x36	; 54
     710:	50 f6       	brcc	.-108    	; 0x6a6 <__EEPROM_REGION_LENGTH__+0x2a6>
		MOTOR_rotateclkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
		MOTOR_rotateclkdir(MOTOR2_ID);
		MOTOR_rotateclkdir(MOTOR3_ID);
		MOTOR_rotateclkdir(MOTOR4_ID);
		
		while ((u16_g_time/DISTANCE_DIV) > DISTANCE_20)
     712:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     716:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     71a:	80 31       	cpi	r24, 0x10	; 16
     71c:	96 42       	sbci	r25, 0x26	; 38
     71e:	08 f0       	brcs	.+2      	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
     720:	95 cf       	rjmp	.-214    	; 0x64c <__EEPROM_REGION_LENGTH__+0x24c>
			US_sendtrigger(); /** SEND TRIGGER **/
		}
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
     722:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     726:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     72a:	80 34       	cpi	r24, 0x40	; 64
     72c:	94 42       	sbci	r25, 0x24	; 36
     72e:	08 f4       	brcc	.+2      	; 0x732 <__EEPROM_REGION_LENGTH__+0x332>
     730:	27 cf       	rjmp	.-434    	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
				US_sendtrigger(); /** SEND TRIGGER **/
			}
		}
		
	}
}
     732:	08 95       	ret

00000734 <Button_init>:
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	63 e0       	ldi	r22, 0x03	; 3
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     73e:	08 95       	ret

00000740 <Is_pressed>:
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	1f 92       	push	r1
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
     74e:	8a 01       	movw	r16, r20
     750:	19 82       	std	Y+1, r1	; 0x01
     752:	ae 01       	movw	r20, r28
     754:	4f 5f       	subi	r20, 0xFF	; 255
     756:	5f 4f       	sbci	r21, 0xFF	; 255
     758:	0e 94 72 08 	call	0x10e4	; 0x10e4 <DIO_readpin>
     75c:	81 11       	cpse	r24, r1
     75e:	05 c0       	rjmp	.+10     	; 0x76a <Is_pressed+0x2a>
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	f8 01       	movw	r30, r16
     764:	80 83       	st	Z, r24
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	04 c0       	rjmp	.+8      	; 0x772 <Is_pressed+0x32>
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	f8 01       	movw	r30, r16
     76e:	80 83       	st	Z, r24
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0f 90       	pop	r0
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	08 95       	ret

0000077e <ICU_init>:
/**************************************************************/
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	TMR1_init(); /** INITIALIZE TIMER 1 MODULE **/
     77e:	0e 94 aa 09 	call	0x1354	; 0x1354 <TMR1_init>
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
     782:	0e 94 ee 08 	call	0x11dc	; 0x11dc <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	08 95       	ret

0000078a <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	00 d0       	rcall	.+0      	; 0x790 <ICU_getvalue+0x6>
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
     794:	1a 82       	std	Y+2, r1	; 0x02
     796:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
     7a2:	9a 81       	ldd	r25, Y+2	; 0x02
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	08 95       	ret

000007ae <ICU_start>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_start(void)
{
	TMR1_start(); /** START TIMER1 COUNTING **/
     7ae:	0e 94 c5 09 	call	0x138a	; 0x138a <TMR1_start>
     7b2:	08 95       	ret

000007b4 <ICU_setcounterval>:
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_setcounterval(uint16t u16_a_counterval)
{
	TMR1_setcounterval(u16_a_counterval);
     7b4:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <TMR1_setcounterval>
     7b8:	08 95       	ret

000007ba <ICU_stop>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_stop(void)
{
	TMR1_stop();  /** STOP TIMER1 COUNTING **/
     7ba:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <TMR1_stop>
     7be:	08 95       	ret

000007c0 <KEYPAD_init>:
     7c0:	41 e0       	ldi	r20, 0x01	; 1
     7c2:	65 e0       	ldi	r22, 0x05	; 5
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     7ca:	41 e0       	ldi	r20, 0x01	; 1
     7cc:	66 e0       	ldi	r22, 0x06	; 6
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     7d4:	41 e0       	ldi	r20, 0x01	; 1
     7d6:	67 e0       	ldi	r22, 0x07	; 7
     7d8:	83 e0       	ldi	r24, 0x03	; 3
     7da:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	83 e0       	ldi	r24, 0x03	; 3
     7ee:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	64 e0       	ldi	r22, 0x04	; 4
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	65 e0       	ldi	r22, 0x05	; 5
     800:	83 e0       	ldi	r24, 0x03	; 3
     802:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	66 e0       	ldi	r22, 0x06	; 6
     80a:	83 e0       	ldi	r24, 0x03	; 3
     80c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     810:	41 e0       	ldi	r20, 0x01	; 1
     812:	67 e0       	ldi	r22, 0x07	; 7
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     824:	41 e0       	ldi	r20, 0x01	; 1
     826:	61 e0       	ldi	r22, 0x01	; 1
     828:	83 e0       	ldi	r24, 0x03	; 3
     82a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	64 e0       	ldi	r22, 0x04	; 4
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	08 95       	ret

0000083c <KEYPAD_read>:
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	00 d0       	rcall	.+0      	; 0x84a <KEYPAD_read+0xe>
     84a:	00 d0       	rcall	.+0      	; 0x84c <KEYPAD_read+0x10>
     84c:	00 d0       	rcall	.+0      	; 0x84e <KEYPAD_read+0x12>
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	7c 01       	movw	r14, r24
     854:	85 e0       	ldi	r24, 0x05	; 5
     856:	89 83       	std	Y+1, r24	; 0x01
     858:	86 e0       	ldi	r24, 0x06	; 6
     85a:	8a 83       	std	Y+2, r24	; 0x02
     85c:	87 e0       	ldi	r24, 0x07	; 7
     85e:	8b 83       	std	Y+3, r24	; 0x03
     860:	1c 82       	std	Y+4, r1	; 0x04
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	8d 83       	std	Y+5, r24	; 0x05
     866:	84 e0       	ldi	r24, 0x04	; 4
     868:	8e 83       	std	Y+6, r24	; 0x06
     86a:	00 e0       	ldi	r16, 0x00	; 0
     86c:	79 c0       	rjmp	.+242    	; 0x960 <__stack+0x101>
     86e:	03 30       	cpi	r16, 0x03	; 3
     870:	39 f4       	brne	.+14     	; 0x880 <__stack+0x21>
     872:	40 e0       	ldi	r20, 0x00	; 0
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	83 e0       	ldi	r24, 0x03	; 3
     878:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     87c:	10 e0       	ldi	r17, 0x00	; 0
     87e:	62 c0       	rjmp	.+196    	; 0x944 <__stack+0xe5>
     880:	e1 e0       	ldi	r30, 0x01	; 1
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	ec 0f       	add	r30, r28
     886:	fd 1f       	adc	r31, r29
     888:	e0 0f       	add	r30, r16
     88a:	f1 1d       	adc	r31, r1
     88c:	40 e0       	ldi	r20, 0x00	; 0
     88e:	60 81       	ld	r22, Z
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     896:	f2 cf       	rjmp	.-28     	; 0x87c <__stack+0x1d>
     898:	e4 e0       	ldi	r30, 0x04	; 4
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	ec 0f       	add	r30, r28
     89e:	fd 1f       	adc	r31, r29
     8a0:	e1 0f       	add	r30, r17
     8a2:	f1 1d       	adc	r31, r1
     8a4:	a7 01       	movw	r20, r14
     8a6:	60 81       	ld	r22, Z
     8a8:	83 e0       	ldi	r24, 0x03	; 3
     8aa:	0e 94 72 08 	call	0x10e4	; 0x10e4 <DIO_readpin>
     8ae:	f7 01       	movw	r30, r14
     8b0:	80 81       	ld	r24, Z
     8b2:	81 11       	cpse	r24, r1
     8b4:	46 c0       	rjmp	.+140    	; 0x942 <__stack+0xe3>
     8b6:	01 11       	cpse	r16, r1
     8b8:	11 c0       	rjmp	.+34     	; 0x8dc <__stack+0x7d>
     8ba:	11 11       	cpse	r17, r1
     8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <__stack+0x65>
     8be:	81 e3       	ldi	r24, 0x31	; 49
     8c0:	80 83       	st	Z, r24
     8c2:	33 c0       	rjmp	.+102    	; 0x92a <__stack+0xcb>
     8c4:	11 30       	cpi	r17, 0x01	; 1
     8c6:	21 f4       	brne	.+8      	; 0x8d0 <__stack+0x71>
     8c8:	82 e3       	ldi	r24, 0x32	; 50
     8ca:	f7 01       	movw	r30, r14
     8cc:	80 83       	st	Z, r24
     8ce:	2d c0       	rjmp	.+90     	; 0x92a <__stack+0xcb>
     8d0:	12 30       	cpi	r17, 0x02	; 2
     8d2:	59 f5       	brne	.+86     	; 0x92a <__stack+0xcb>
     8d4:	83 e3       	ldi	r24, 0x33	; 51
     8d6:	f7 01       	movw	r30, r14
     8d8:	80 83       	st	Z, r24
     8da:	27 c0       	rjmp	.+78     	; 0x92a <__stack+0xcb>
     8dc:	01 30       	cpi	r16, 0x01	; 1
     8de:	91 f4       	brne	.+36     	; 0x904 <__stack+0xa5>
     8e0:	11 11       	cpse	r17, r1
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <__stack+0x8d>
     8e4:	84 e3       	ldi	r24, 0x34	; 52
     8e6:	f7 01       	movw	r30, r14
     8e8:	80 83       	st	Z, r24
     8ea:	1f c0       	rjmp	.+62     	; 0x92a <__stack+0xcb>
     8ec:	11 30       	cpi	r17, 0x01	; 1
     8ee:	21 f4       	brne	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	85 e3       	ldi	r24, 0x35	; 53
     8f2:	f7 01       	movw	r30, r14
     8f4:	80 83       	st	Z, r24
     8f6:	19 c0       	rjmp	.+50     	; 0x92a <__stack+0xcb>
     8f8:	12 30       	cpi	r17, 0x02	; 2
     8fa:	b9 f4       	brne	.+46     	; 0x92a <__stack+0xcb>
     8fc:	86 e3       	ldi	r24, 0x36	; 54
     8fe:	f7 01       	movw	r30, r14
     900:	80 83       	st	Z, r24
     902:	13 c0       	rjmp	.+38     	; 0x92a <__stack+0xcb>
     904:	02 30       	cpi	r16, 0x02	; 2
     906:	89 f4       	brne	.+34     	; 0x92a <__stack+0xcb>
     908:	11 11       	cpse	r17, r1
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0xb5>
     90c:	87 e3       	ldi	r24, 0x37	; 55
     90e:	f7 01       	movw	r30, r14
     910:	80 83       	st	Z, r24
     912:	0b c0       	rjmp	.+22     	; 0x92a <__stack+0xcb>
     914:	11 30       	cpi	r17, 0x01	; 1
     916:	21 f4       	brne	.+8      	; 0x920 <__stack+0xc1>
     918:	88 e3       	ldi	r24, 0x38	; 56
     91a:	f7 01       	movw	r30, r14
     91c:	80 83       	st	Z, r24
     91e:	05 c0       	rjmp	.+10     	; 0x92a <__stack+0xcb>
     920:	12 30       	cpi	r17, 0x02	; 2
     922:	19 f4       	brne	.+6      	; 0x92a <__stack+0xcb>
     924:	89 e3       	ldi	r24, 0x39	; 57
     926:	f7 01       	movw	r30, r14
     928:	80 83       	st	Z, r24
     92a:	e1 e0       	ldi	r30, 0x01	; 1
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	ec 0f       	add	r30, r28
     930:	fd 1f       	adc	r31, r29
     932:	e0 0f       	add	r30, r16
     934:	f1 1d       	adc	r31, r1
     936:	60 81       	ld	r22, Z
     938:	83 e0       	ldi	r24, 0x03	; 3
     93a:	0e 94 b0 08 	call	0x1160	; 0x1160 <DIO_togglepin>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	13 c0       	rjmp	.+38     	; 0x968 <__stack+0x109>
     942:	1f 5f       	subi	r17, 0xFF	; 255
     944:	13 30       	cpi	r17, 0x03	; 3
     946:	08 f4       	brcc	.+2      	; 0x94a <__stack+0xeb>
     948:	a7 cf       	rjmp	.-178    	; 0x898 <__stack+0x39>
     94a:	e1 e0       	ldi	r30, 0x01	; 1
     94c:	f0 e0       	ldi	r31, 0x00	; 0
     94e:	ec 0f       	add	r30, r28
     950:	fd 1f       	adc	r31, r29
     952:	e0 0f       	add	r30, r16
     954:	f1 1d       	adc	r31, r1
     956:	60 81       	ld	r22, Z
     958:	83 e0       	ldi	r24, 0x03	; 3
     95a:	0e 94 b0 08 	call	0x1160	; 0x1160 <DIO_togglepin>
     95e:	0f 5f       	subi	r16, 0xFF	; 255
     960:	03 30       	cpi	r16, 0x03	; 3
     962:	08 f4       	brcc	.+2      	; 0x966 <__stack+0x107>
     964:	84 cf       	rjmp	.-248    	; 0x86e <__stack+0xf>
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	26 96       	adiw	r28, 0x06	; 6
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	08 95       	ret

00000982 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     982:	cf 93       	push	r28
     984:	c8 2f       	mov	r28, r24
     986:	0e 94 09 09 	call	0x1212	; 0x1212 <TMR0_init>
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	62 e0       	ldi	r22, 0x02	; 2
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	63 e0       	ldi	r22, 0x03	; 3
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     9a8:	8b b3       	in	r24, 0x1b	; 27
     9aa:	9c 2f       	mov	r25, r28
     9ac:	90 7f       	andi	r25, 0xF0	; 240
     9ae:	8f 70       	andi	r24, 0x0F	; 15
     9b0:	89 2b       	or	r24, r25
     9b2:	8b bb       	out	0x1b, r24	; 27
     9b4:	41 e0       	ldi	r20, 0x01	; 1
     9b6:	63 e0       	ldi	r22, 0x03	; 3
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	63 e0       	ldi	r22, 0x03	; 3
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     9d4:	20 e1       	ldi	r18, 0x10	; 16
     9d6:	c2 9f       	mul	r28, r18
     9d8:	c0 01       	movw	r24, r0
     9da:	11 24       	eor	r1, r1
     9dc:	9b b3       	in	r25, 0x1b	; 27
     9de:	9f 70       	andi	r25, 0x0F	; 15
     9e0:	89 2b       	or	r24, r25
     9e2:	8b bb       	out	0x1b, r24	; 27
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	63 e0       	ldi	r22, 0x03	; 3
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	63 e0       	ldi	r22, 0x03	; 3
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     a04:	65 e0       	ldi	r22, 0x05	; 5
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <LCD_init>:
     a14:	0e 94 09 09 	call	0x1212	; 0x1212 <TMR0_init>
     a18:	41 e0       	ldi	r20, 0x01	; 1
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     a22:	41 e0       	ldi	r20, 0x01	; 1
     a24:	62 e0       	ldi	r22, 0x02	; 2
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     a2c:	41 e0       	ldi	r20, 0x01	; 1
     a2e:	63 e0       	ldi	r22, 0x03	; 3
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	64 e0       	ldi	r22, 0x04	; 4
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     a40:	41 e0       	ldi	r20, 0x01	; 1
     a42:	65 e0       	ldi	r22, 0x05	; 5
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     a4a:	41 e0       	ldi	r20, 0x01	; 1
     a4c:	66 e0       	ldi	r22, 0x06	; 6
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	67 e0       	ldi	r22, 0x07	; 7
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     a5e:	64 e1       	ldi	r22, 0x14	; 20
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>
     a6a:	83 e3       	ldi	r24, 0x33	; 51
     a6c:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_sendcmd>
     a70:	82 e3       	ldi	r24, 0x32	; 50
     a72:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_sendcmd>
     a76:	88 e2       	ldi	r24, 0x28	; 40
     a78:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_sendcmd>
     a7c:	8c e0       	ldi	r24, 0x0C	; 12
     a7e:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_sendcmd>
     a82:	86 e0       	ldi	r24, 0x06	; 6
     a84:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_sendcmd>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_sendcmd>
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_sendcmd>
     a94:	08 95       	ret

00000a96 <LCD_writechar>:
     a96:	cf 93       	push	r28
     a98:	c8 2f       	mov	r28, r24
     a9a:	41 e0       	ldi	r20, 0x01	; 1
     a9c:	61 e0       	ldi	r22, 0x01	; 1
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	62 e0       	ldi	r22, 0x02	; 2
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	63 e0       	ldi	r22, 0x03	; 3
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     ab8:	8b b3       	in	r24, 0x1b	; 27
     aba:	9c 2f       	mov	r25, r28
     abc:	90 7f       	andi	r25, 0xF0	; 240
     abe:	8f 70       	andi	r24, 0x0F	; 15
     ac0:	89 2b       	or	r24, r25
     ac2:	8b bb       	out	0x1b, r24	; 27
     ac4:	41 e0       	ldi	r20, 0x01	; 1
     ac6:	63 e0       	ldi	r22, 0x03	; 3
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     ace:	61 e0       	ldi	r22, 0x01	; 1
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>
     ada:	40 e0       	ldi	r20, 0x00	; 0
     adc:	63 e0       	ldi	r22, 0x03	; 3
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     ae4:	20 e1       	ldi	r18, 0x10	; 16
     ae6:	c2 9f       	mul	r28, r18
     ae8:	c0 01       	movw	r24, r0
     aea:	11 24       	eor	r1, r1
     aec:	9b b3       	in	r25, 0x1b	; 27
     aee:	9f 70       	andi	r25, 0x0F	; 15
     af0:	89 2b       	or	r24, r25
     af2:	8b bb       	out	0x1b, r24	; 27
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	63 e0       	ldi	r22, 0x03	; 3
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	63 e0       	ldi	r22, 0x03	; 3
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
     b14:	65 e0       	ldi	r22, 0x05	; 5
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 30 09 	call	0x1260	; 0x1260 <TMR0_delayms>
     b20:	cf 91       	pop	r28
     b22:	08 95       	ret

00000b24 <LCD_writestr>:
     b24:	0f 93       	push	r16
     b26:	1f 93       	push	r17
     b28:	cf 93       	push	r28
     b2a:	8c 01       	movw	r16, r24
     b2c:	c0 e0       	ldi	r28, 0x00	; 0
     b2e:	03 c0       	rjmp	.+6      	; 0xb36 <LCD_writestr+0x12>
     b30:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_writechar>
     b34:	cf 5f       	subi	r28, 0xFF	; 255
     b36:	f8 01       	movw	r30, r16
     b38:	ec 0f       	add	r30, r28
     b3a:	f1 1d       	adc	r31, r1
     b3c:	80 81       	ld	r24, Z
     b3e:	81 11       	cpse	r24, r1
     b40:	f7 cf       	rjmp	.-18     	; 0xb30 <LCD_writestr+0xc>
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <LCD_goto>:
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <LCD_goto+0x6>
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	90 e8       	ldi	r25, 0x80	; 128
     b56:	99 83       	std	Y+1, r25	; 0x01
     b58:	90 ec       	ldi	r25, 0xC0	; 192
     b5a:	9a 83       	std	Y+2, r25	; 0x02
     b5c:	e1 e0       	ldi	r30, 0x01	; 1
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	ec 0f       	add	r30, r28
     b62:	fd 1f       	adc	r31, r29
     b64:	e8 0f       	add	r30, r24
     b66:	f1 1d       	adc	r31, r1
     b68:	80 81       	ld	r24, Z
     b6a:	86 0f       	add	r24, r22
     b6c:	0e 94 c1 04 	call	0x982	; 0x982 <LCD_sendcmd>
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     b7a:	1f 93       	push	r17
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	2a 97       	sbiw	r28, 0x0a	; 10
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     b90:	99 23       	and	r25, r25
     b92:	dc f5       	brge	.+118    	; 0xc0a <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
     b94:	90 95       	com	r25
     b96:	80 95       	com	r24
     b98:	70 95       	com	r23
     b9a:	61 95       	neg	r22
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     ba2:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     ba4:	13 c0       	rjmp	.+38     	; 0xbcc <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     ba6:	2a e0       	ldi	r18, 0x0A	; 10
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__divmodsi4>
     bb2:	e1 e0       	ldi	r30, 0x01	; 1
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	ec 0f       	add	r30, r28
     bb8:	fd 1f       	adc	r31, r29
     bba:	e1 0f       	add	r30, r17
     bbc:	f1 1d       	adc	r31, r1
     bbe:	60 5d       	subi	r22, 0xD0	; 208
     bc0:	60 83       	st	Z, r22
			s32_a_num /= 10;
     bc2:	62 2f       	mov	r22, r18
     bc4:	73 2f       	mov	r23, r19
     bc6:	84 2f       	mov	r24, r20
     bc8:	95 2f       	mov	r25, r21
			i++;
     bca:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     bcc:	16 16       	cp	r1, r22
     bce:	17 06       	cpc	r1, r23
     bd0:	18 06       	cpc	r1, r24
     bd2:	19 06       	cpc	r1, r25
     bd4:	44 f3       	brlt	.-48     	; 0xba6 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     bd6:	e1 e0       	ldi	r30, 0x01	; 1
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	ec 0f       	add	r30, r28
     bdc:	fd 1f       	adc	r31, r29
     bde:	e1 0f       	add	r30, r17
     be0:	f1 1d       	adc	r31, r1
     be2:	8d e2       	ldi	r24, 0x2D	; 45
     be4:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     be6:	1f 5f       	subi	r17, 0xFF	; 255
     be8:	0d c0       	rjmp	.+26     	; 0xc04 <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
     bea:	e1 2f       	mov	r30, r17
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	8c 0f       	add	r24, r28
     bf6:	9d 1f       	adc	r25, r29
     bf8:	e8 0f       	add	r30, r24
     bfa:	f9 1f       	adc	r31, r25
     bfc:	80 81       	ld	r24, Z
     bfe:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     c02:	11 50       	subi	r17, 0x01	; 1
     c04:	11 11       	cpse	r17, r1
     c06:	f1 cf       	rjmp	.-30     	; 0xbea <LCD_writeint+0x70>
     c08:	39 c0       	rjmp	.+114    	; 0xc7c <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     c0a:	61 15       	cp	r22, r1
     c0c:	71 05       	cpc	r23, r1
     c0e:	81 05       	cpc	r24, r1
     c10:	91 05       	cpc	r25, r1
     c12:	21 f4       	brne	.+8      	; 0xc1c <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
     c14:	80 e3       	ldi	r24, 0x30	; 48
     c16:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_writechar>
     c1a:	30 c0       	rjmp	.+96     	; 0xc7c <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     c1c:	16 16       	cp	r1, r22
     c1e:	17 06       	cpc	r1, r23
     c20:	18 06       	cpc	r1, r24
     c22:	19 06       	cpc	r1, r25
     c24:	ac f0       	brlt	.+42     	; 0xc50 <LCD_writeint+0xd6>
     c26:	2a c0       	rjmp	.+84     	; 0xc7c <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     c28:	2a e0       	ldi	r18, 0x0A	; 10
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__divmodsi4>
     c34:	e1 e0       	ldi	r30, 0x01	; 1
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	ec 0f       	add	r30, r28
     c3a:	fd 1f       	adc	r31, r29
     c3c:	e1 0f       	add	r30, r17
     c3e:	f1 1d       	adc	r31, r1
     c40:	60 5d       	subi	r22, 0xD0	; 208
     c42:	60 83       	st	Z, r22
			s32_a_num /= 10;
     c44:	62 2f       	mov	r22, r18
     c46:	73 2f       	mov	r23, r19
     c48:	84 2f       	mov	r24, r20
     c4a:	95 2f       	mov	r25, r21
			i++;
     c4c:	1f 5f       	subi	r17, 0xFF	; 255
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <LCD_writeint+0xd8>
     c50:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     c52:	16 16       	cp	r1, r22
     c54:	17 06       	cpc	r1, r23
     c56:	18 06       	cpc	r1, r24
     c58:	19 06       	cpc	r1, r25
     c5a:	34 f3       	brlt	.-52     	; 0xc28 <LCD_writeint+0xae>
     c5c:	0d c0       	rjmp	.+26     	; 0xc78 <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     c5e:	e1 2f       	mov	r30, r17
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	8c 0f       	add	r24, r28
     c6a:	9d 1f       	adc	r25, r29
     c6c:	e8 0f       	add	r30, r24
     c6e:	f9 1f       	adc	r31, r25
     c70:	80 81       	ld	r24, Z
     c72:	0e 94 4b 05 	call	0xa96	; 0xa96 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     c76:	11 50       	subi	r17, 0x01	; 1
     c78:	11 11       	cpse	r17, r1
     c7a:	f1 cf       	rjmp	.-30     	; 0xc5e <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     c7c:	2a 96       	adiw	r28, 0x0a	; 10
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret

00000c90 <MOTOR_init>:
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
	
	switch(u8_a_motorid)
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	b9 f0       	breq	.+46     	; 0xcc2 <MOTOR_init+0x32>
     c94:	28 f0       	brcs	.+10     	; 0xca0 <MOTOR_init+0x10>
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	29 f1       	breq	.+74     	; 0xce4 <MOTOR_init+0x54>
     c9a:	83 30       	cpi	r24, 0x03	; 3
     c9c:	a1 f1       	breq	.+104    	; 0xd06 <MOTOR_init+0x76>
     c9e:	44 c0       	rjmp	.+136    	; 0xd28 <MOTOR_init+0x98>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	61 e0       	ldi	r22, 0x01	; 1
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     cbe:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
		break;
     cc0:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
     cc2:	41 e0       	ldi	r20, 0x01	; 1
     cc4:	63 e0       	ldi	r22, 0x03	; 3
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
     ccc:	41 e0       	ldi	r20, 0x01	; 1
     cce:	64 e0       	ldi	r22, 0x04	; 4
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	65 e0       	ldi	r22, 0x05	; 5
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     ce0:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     ce2:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
     ce4:	41 e0       	ldi	r20, 0x01	; 1
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
     cee:	41 e0       	ldi	r20, 0x01	; 1
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	62 e0       	ldi	r22, 0x02	; 2
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d02:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d04:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
     d06:	41 e0       	ldi	r20, 0x01	; 1
     d08:	63 e0       	ldi	r22, 0x03	; 3
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	64 e0       	ldi	r22, 0x04	; 4
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	65 e0       	ldi	r22, 0x05	; 5
     d1e:	82 e0       	ldi	r24, 0x02	; 2
     d20:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d24:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d26:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_initstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d28:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_initstatus ; /** RETURN THE FINAL STATUS **/
}
     d2a:	08 95       	ret

00000d2c <MOTOR_rotateclkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	91 f0       	breq	.+36     	; 0xd54 <MOTOR_rotateclkdir+0x28>
     d30:	28 f0       	brcs	.+10     	; 0xd3c <MOTOR_rotateclkdir+0x10>
     d32:	82 30       	cpi	r24, 0x02	; 2
     d34:	d9 f0       	breq	.+54     	; 0xd6c <MOTOR_rotateclkdir+0x40>
     d36:	83 30       	cpi	r24, 0x03	; 3
     d38:	29 f1       	breq	.+74     	; 0xd84 <MOTOR_rotateclkdir+0x58>
     d3a:	30 c0       	rjmp	.+96     	; 0xd9c <MOTOR_rotateclkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d50:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d52:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	63 e0       	ldi	r22, 0x03	; 3
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	64 e0       	ldi	r22, 0x04	; 4
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d68:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d6a:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d6c:	41 e0       	ldi	r20, 0x01	; 1
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	82 e0       	ldi	r24, 0x02	; 2
     d72:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d76:	40 e0       	ldi	r20, 0x00	; 0
     d78:	61 e0       	ldi	r22, 0x01	; 1
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d80:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d82:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d84:	41 e0       	ldi	r20, 0x01	; 1
     d86:	63 e0       	ldi	r22, 0x03	; 3
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	64 e0       	ldi	r22, 0x04	; 4
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d98:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d9a:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motordirectionstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d9c:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motordirectionstatus ; /** RETURN THE FINAL STATUS **/
}
     d9e:	08 95       	ret

00000da0 <MOTOR_rotateanticlkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	91 f0       	breq	.+36     	; 0xdc8 <MOTOR_rotateanticlkdir+0x28>
     da4:	28 f0       	brcs	.+10     	; 0xdb0 <MOTOR_rotateanticlkdir+0x10>
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	d9 f0       	breq	.+54     	; 0xde0 <MOTOR_rotateanticlkdir+0x40>
     daa:	83 30       	cpi	r24, 0x03	; 3
     dac:	29 f1       	breq	.+74     	; 0xdf8 <MOTOR_rotateanticlkdir+0x58>
     dae:	30 c0       	rjmp	.+96     	; 0xe10 <MOTOR_rotateanticlkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     dba:	41 e0       	ldi	r20, 0x01	; 1
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dc4:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     dc6:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	63 e0       	ldi	r22, 0x03	; 3
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	64 e0       	ldi	r22, 0x04	; 4
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ddc:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     dde:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     dea:	41 e0       	ldi	r20, 0x01	; 1
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     df4:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     df6:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     df8:	40 e0       	ldi	r20, 0x00	; 0
     dfa:	63 e0       	ldi	r22, 0x03	; 3
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e02:	41 e0       	ldi	r20, 0x01	; 1
     e04:	64 e0       	ldi	r22, 0x04	; 4
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e0c:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e0e:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motorrotatestatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e10:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
     e12:	08 95       	ret

00000e14 <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	69 f0       	breq	.+26     	; 0xe32 <MOTOR_turnoff+0x1e>
     e18:	28 f0       	brcs	.+10     	; 0xe24 <MOTOR_turnoff+0x10>
     e1a:	82 30       	cpi	r24, 0x02	; 2
     e1c:	89 f0       	breq	.+34     	; 0xe40 <MOTOR_turnoff+0x2c>
     e1e:	83 30       	cpi	r24, 0x03	; 3
     e20:	b1 f0       	breq	.+44     	; 0xe4e <MOTOR_turnoff+0x3a>
     e22:	1c c0       	rjmp	.+56     	; 0xe5c <MOTOR_turnoff+0x48>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	62 e0       	ldi	r22, 0x02	; 2
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e2e:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e30:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	65 e0       	ldi	r22, 0x05	; 5
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e3c:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e3e:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	62 e0       	ldi	r22, 0x02	; 2
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e4a:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e4c:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	65 e0       	ldi	r22, 0x05	; 5
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e58:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e5a:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e5c:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     e5e:	08 95       	ret

00000e60 <MOTOR_turnon>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     e60:	81 30       	cpi	r24, 0x01	; 1
     e62:	69 f0       	breq	.+26     	; 0xe7e <MOTOR_turnon+0x1e>
     e64:	28 f0       	brcs	.+10     	; 0xe70 <MOTOR_turnon+0x10>
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	89 f0       	breq	.+34     	; 0xe8c <MOTOR_turnon+0x2c>
     e6a:	83 30       	cpi	r24, 0x03	; 3
     e6c:	b1 f0       	breq	.+44     	; 0xe9a <MOTOR_turnon+0x3a>
     e6e:	1c c0       	rjmp	.+56     	; 0xea8 <MOTOR_turnon+0x48>
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e70:	41 e0       	ldi	r20, 0x01	; 1
     e72:	62 e0       	ldi	r22, 0x02	; 2
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e7a:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e7c:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	65 e0       	ldi	r22, 0x05	; 5
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e88:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e8a:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	62 e0       	ldi	r22, 0x02	; 2
     e90:	82 e0       	ldi	r24, 0x02	; 2
     e92:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e96:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e98:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e9a:	41 e0       	ldi	r20, 0x01	; 1
     e9c:	65 e0       	ldi	r22, 0x05	; 5
     e9e:	82 e0       	ldi	r24, 0x02	; 2
     ea0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ea4:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     ea6:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     ea8:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     eaa:	08 95       	ret

00000eac <US_init>:
/** RETURNS : VOID                                                **/
/*******************************************************************/
void US_init(void)
{
	/** INITIALIZE THE TRIGGER PIN AS OUTPUT PIN **/
	DIO_setpindir(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_OUTPUT);
     eac:	41 e0       	ldi	r20, 0x01	; 1
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	0e 94 74 07 	call	0xee8	; 0xee8 <DIO_setpindir>
     eb6:	08 95       	ret

00000eb8 <US_sendtrigger>:
/** RETURNS : EN_ultrasonicreturn                                 **/
/*******************************************************************/
EN_ultrasonicreturn US_sendtrigger(void)
{
	/** SEND PULSE OF 15 MICROSECOND **/
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_HIGH);
     eb8:	41 e0       	ldi	r20, 0x01	; 1
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
	TMR0_delaymicros(15);
     ec2:	6f e0       	ldi	r22, 0x0F	; 15
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <TMR0_delaymicros>
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_LOW);
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <DIO_setpinvalue>
}
     ed8:	08 95       	ret

00000eda <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZE APPLICATION MODULES **/
     eda:	0e 94 88 00 	call	0x110	; 0x110 <APP_init>
	
	APP_setentry(); /** SET THE ENTRY DATA **/
     ede:	0e 94 c1 00 	call	0x182	; 0x182 <APP_setentry>
	
    while (1) 
    {	
		APP_start(); /** SUPER LOOP **/	
     ee2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <APP_start>
     ee6:	fd cf       	rjmp	.-6      	; 0xee2 <main+0x8>

00000ee8 <DIO_setpindir>:
     ee8:	44 23       	and	r20, r20
     eea:	19 f0       	breq	.+6      	; 0xef2 <DIO_setpindir+0xa>
     eec:	41 30       	cpi	r20, 0x01	; 1
     eee:	e9 f1       	breq	.+122    	; 0xf6a <DIO_setpindir+0x82>
     ef0:	74 c0       	rjmp	.+232    	; 0xfda <DIO_setpindir+0xf2>
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	99 f0       	breq	.+38     	; 0xf1c <DIO_setpindir+0x34>
     ef6:	28 f0       	brcs	.+10     	; 0xf02 <DIO_setpindir+0x1a>
     ef8:	82 30       	cpi	r24, 0x02	; 2
     efa:	e9 f0       	breq	.+58     	; 0xf36 <DIO_setpindir+0x4e>
     efc:	83 30       	cpi	r24, 0x03	; 3
     efe:	41 f1       	breq	.+80     	; 0xf50 <DIO_setpindir+0x68>
     f00:	6e c0       	rjmp	.+220    	; 0xfde <DIO_setpindir+0xf6>
     f02:	2a b3       	in	r18, 0x1a	; 26
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <DIO_setpindir+0x26>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	6a 95       	dec	r22
     f10:	e2 f7       	brpl	.-8      	; 0xf0a <DIO_setpindir+0x22>
     f12:	80 95       	com	r24
     f14:	82 23       	and	r24, r18
     f16:	8a bb       	out	0x1a, r24	; 26
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	08 95       	ret
     f1c:	27 b3       	in	r18, 0x17	; 23
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <DIO_setpindir+0x40>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	6a 95       	dec	r22
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <DIO_setpindir+0x3c>
     f2c:	80 95       	com	r24
     f2e:	82 23       	and	r24, r18
     f30:	87 bb       	out	0x17, r24	; 23
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	08 95       	ret
     f36:	24 b3       	in	r18, 0x14	; 20
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_setpindir+0x5a>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	6a 95       	dec	r22
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <DIO_setpindir+0x56>
     f46:	80 95       	com	r24
     f48:	82 23       	and	r24, r18
     f4a:	84 bb       	out	0x14, r24	; 20
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	08 95       	ret
     f50:	21 b3       	in	r18, 0x11	; 17
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_setpindir+0x74>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	6a 95       	dec	r22
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_setpindir+0x70>
     f60:	80 95       	com	r24
     f62:	82 23       	and	r24, r18
     f64:	81 bb       	out	0x11, r24	; 17
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	08 95       	ret
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	91 f0       	breq	.+36     	; 0xf92 <DIO_setpindir+0xaa>
     f6e:	28 f0       	brcs	.+10     	; 0xf7a <DIO_setpindir+0x92>
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	d9 f0       	breq	.+54     	; 0xfaa <DIO_setpindir+0xc2>
     f74:	83 30       	cpi	r24, 0x03	; 3
     f76:	29 f1       	breq	.+74     	; 0xfc2 <DIO_setpindir+0xda>
     f78:	34 c0       	rjmp	.+104    	; 0xfe2 <DIO_setpindir+0xfa>
     f7a:	2a b3       	in	r18, 0x1a	; 26
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 c0       	rjmp	.+4      	; 0xf86 <DIO_setpindir+0x9e>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	6a 95       	dec	r22
     f88:	e2 f7       	brpl	.-8      	; 0xf82 <DIO_setpindir+0x9a>
     f8a:	82 2b       	or	r24, r18
     f8c:	8a bb       	out	0x1a, r24	; 26
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	08 95       	ret
     f92:	27 b3       	in	r18, 0x17	; 23
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_setpindir+0xb6>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	6a 95       	dec	r22
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_setpindir+0xb2>
     fa2:	82 2b       	or	r24, r18
     fa4:	87 bb       	out	0x17, r24	; 23
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	08 95       	ret
     faa:	24 b3       	in	r18, 0x14	; 20
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_setpindir+0xce>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	6a 95       	dec	r22
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_setpindir+0xca>
     fba:	82 2b       	or	r24, r18
     fbc:	84 bb       	out	0x14, r24	; 20
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	08 95       	ret
     fc2:	21 b3       	in	r18, 0x11	; 17
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_setpindir+0xe6>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	6a 95       	dec	r22
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_setpindir+0xe2>
     fd2:	82 2b       	or	r24, r18
     fd4:	81 bb       	out	0x11, r24	; 17
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	08 95       	ret
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	08 95       	ret
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	08 95       	ret
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	08 95       	ret

00000fe6 <DIO_setpinvalue>:
     fe6:	44 23       	and	r20, r20
     fe8:	19 f0       	breq	.+6      	; 0xff0 <DIO_setpinvalue+0xa>
     fea:	41 30       	cpi	r20, 0x01	; 1
     fec:	e9 f1       	breq	.+122    	; 0x1068 <DIO_setpinvalue+0x82>
     fee:	74 c0       	rjmp	.+232    	; 0x10d8 <DIO_setpinvalue+0xf2>
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	99 f0       	breq	.+38     	; 0x101a <DIO_setpinvalue+0x34>
     ff4:	28 f0       	brcs	.+10     	; 0x1000 <DIO_setpinvalue+0x1a>
     ff6:	82 30       	cpi	r24, 0x02	; 2
     ff8:	e9 f0       	breq	.+58     	; 0x1034 <DIO_setpinvalue+0x4e>
     ffa:	83 30       	cpi	r24, 0x03	; 3
     ffc:	41 f1       	breq	.+80     	; 0x104e <DIO_setpinvalue+0x68>
     ffe:	6e c0       	rjmp	.+220    	; 0x10dc <DIO_setpinvalue+0xf6>
    1000:	2b b3       	in	r18, 0x1b	; 27
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_setpinvalue+0x26>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	6a 95       	dec	r22
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_setpinvalue+0x22>
    1010:	80 95       	com	r24
    1012:	82 23       	and	r24, r18
    1014:	8b bb       	out	0x1b, r24	; 27
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	08 95       	ret
    101a:	28 b3       	in	r18, 0x18	; 24
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_setpinvalue+0x40>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	6a 95       	dec	r22
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_setpinvalue+0x3c>
    102a:	80 95       	com	r24
    102c:	82 23       	and	r24, r18
    102e:	88 bb       	out	0x18, r24	; 24
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	08 95       	ret
    1034:	25 b3       	in	r18, 0x15	; 21
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_setpinvalue+0x5a>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	6a 95       	dec	r22
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_setpinvalue+0x56>
    1044:	80 95       	com	r24
    1046:	82 23       	and	r24, r18
    1048:	85 bb       	out	0x15, r24	; 21
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	08 95       	ret
    104e:	22 b3       	in	r18, 0x12	; 18
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_setpinvalue+0x74>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	6a 95       	dec	r22
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_setpinvalue+0x70>
    105e:	80 95       	com	r24
    1060:	82 23       	and	r24, r18
    1062:	82 bb       	out	0x12, r24	; 18
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	08 95       	ret
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 f0       	breq	.+36     	; 0x1090 <DIO_setpinvalue+0xaa>
    106c:	28 f0       	brcs	.+10     	; 0x1078 <DIO_setpinvalue+0x92>
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	d9 f0       	breq	.+54     	; 0x10a8 <DIO_setpinvalue+0xc2>
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	29 f1       	breq	.+74     	; 0x10c0 <DIO_setpinvalue+0xda>
    1076:	34 c0       	rjmp	.+104    	; 0x10e0 <DIO_setpinvalue+0xfa>
    1078:	2b b3       	in	r18, 0x1b	; 27
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_setpinvalue+0x9e>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	6a 95       	dec	r22
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_setpinvalue+0x9a>
    1088:	82 2b       	or	r24, r18
    108a:	8b bb       	out	0x1b, r24	; 27
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	08 95       	ret
    1090:	28 b3       	in	r18, 0x18	; 24
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <DIO_setpinvalue+0xb6>
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	6a 95       	dec	r22
    109e:	e2 f7       	brpl	.-8      	; 0x1098 <DIO_setpinvalue+0xb2>
    10a0:	82 2b       	or	r24, r18
    10a2:	88 bb       	out	0x18, r24	; 24
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	08 95       	ret
    10a8:	25 b3       	in	r18, 0x15	; 21
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_setpinvalue+0xce>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	6a 95       	dec	r22
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_setpinvalue+0xca>
    10b8:	82 2b       	or	r24, r18
    10ba:	85 bb       	out	0x15, r24	; 21
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	08 95       	ret
    10c0:	22 b3       	in	r18, 0x12	; 18
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_setpinvalue+0xe6>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	6a 95       	dec	r22
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_setpinvalue+0xe2>
    10d0:	82 2b       	or	r24, r18
    10d2:	82 bb       	out	0x12, r24	; 18
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	08 95       	ret
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	08 95       	ret
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	08 95       	ret
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	08 95       	ret

000010e4 <DIO_readpin>:
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	99 f0       	breq	.+38     	; 0x110e <DIO_readpin+0x2a>
    10e8:	28 f0       	brcs	.+10     	; 0x10f4 <DIO_readpin+0x10>
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	e9 f0       	breq	.+58     	; 0x1128 <DIO_readpin+0x44>
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	41 f1       	breq	.+80     	; 0x1142 <DIO_readpin+0x5e>
    10f2:	34 c0       	rjmp	.+104    	; 0x115c <DIO_readpin+0x78>
    10f4:	89 b3       	in	r24, 0x19	; 25
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_readpin+0x1a>
    10fa:	95 95       	asr	r25
    10fc:	87 95       	ror	r24
    10fe:	6a 95       	dec	r22
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_readpin+0x16>
    1102:	81 70       	andi	r24, 0x01	; 1
    1104:	89 bb       	out	0x19, r24	; 25
    1106:	fa 01       	movw	r30, r20
    1108:	80 83       	st	Z, r24
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	08 95       	ret
    110e:	86 b3       	in	r24, 0x16	; 22
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_readpin+0x34>
    1114:	95 95       	asr	r25
    1116:	87 95       	ror	r24
    1118:	6a 95       	dec	r22
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_readpin+0x30>
    111c:	81 70       	andi	r24, 0x01	; 1
    111e:	86 bb       	out	0x16, r24	; 22
    1120:	fa 01       	movw	r30, r20
    1122:	80 83       	st	Z, r24
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	08 95       	ret
    1128:	83 b3       	in	r24, 0x13	; 19
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_readpin+0x4e>
    112e:	95 95       	asr	r25
    1130:	87 95       	ror	r24
    1132:	6a 95       	dec	r22
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_readpin+0x4a>
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	83 bb       	out	0x13, r24	; 19
    113a:	fa 01       	movw	r30, r20
    113c:	80 83       	st	Z, r24
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	08 95       	ret
    1142:	80 b3       	in	r24, 0x10	; 16
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_readpin+0x68>
    1148:	95 95       	asr	r25
    114a:	87 95       	ror	r24
    114c:	6a 95       	dec	r22
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_readpin+0x64>
    1150:	81 70       	andi	r24, 0x01	; 1
    1152:	80 bb       	out	0x10, r24	; 16
    1154:	fa 01       	movw	r30, r20
    1156:	80 83       	st	Z, r24
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	08 95       	ret
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	08 95       	ret

00001160 <DIO_togglepin>:
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	91 f0       	breq	.+36     	; 0x1188 <DIO_togglepin+0x28>
    1164:	28 f0       	brcs	.+10     	; 0x1170 <DIO_togglepin+0x10>
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	d9 f0       	breq	.+54     	; 0x11a0 <DIO_togglepin+0x40>
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	29 f1       	breq	.+74     	; 0x11b8 <DIO_togglepin+0x58>
    116e:	30 c0       	rjmp	.+96     	; 0x11d0 <DIO_togglepin+0x70>
    1170:	2b b3       	in	r18, 0x1b	; 27
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <DIO_togglepin+0x1c>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	6a 95       	dec	r22
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <DIO_togglepin+0x18>
    1180:	82 27       	eor	r24, r18
    1182:	8b bb       	out	0x1b, r24	; 27
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	08 95       	ret
    1188:	28 b3       	in	r18, 0x18	; 24
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_togglepin+0x34>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	6a 95       	dec	r22
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_togglepin+0x30>
    1198:	82 27       	eor	r24, r18
    119a:	88 bb       	out	0x18, r24	; 24
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	08 95       	ret
    11a0:	25 b3       	in	r18, 0x15	; 21
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <DIO_togglepin+0x4c>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	6a 95       	dec	r22
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <DIO_togglepin+0x48>
    11b0:	82 27       	eor	r24, r18
    11b2:	85 bb       	out	0x15, r24	; 21
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	08 95       	ret
    11b8:	22 b3       	in	r18, 0x12	; 18
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_togglepin+0x64>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	6a 95       	dec	r22
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_togglepin+0x60>
    11c8:	82 27       	eor	r24, r18
    11ca:	82 bb       	out	0x12, r24	; 18
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	08 95       	ret
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	08 95       	ret

000011d4 <SET_GLOBALINTERRUPT>:
	  
	  clear_bit(MCUCSR , 6);
	  
	#elif EXTERNAL_INT2_TRIGGER == INT_TRIGGER_RISING_EDGE
	  
	  set_bit(MCUCSR , 6);
    11d4:	8f b7       	in	r24, 0x3f	; 63
    11d6:	80 68       	ori	r24, 0x80	; 128
    11d8:	8f bf       	out	0x3f, r24	; 63
    11da:	08 95       	ret

000011dc <INT0_init>:
    11dc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <SET_GLOBALINTERRUPT>
    11e0:	85 b7       	in	r24, 0x35	; 53
    11e2:	81 60       	ori	r24, 0x01	; 1
    11e4:	85 bf       	out	0x35, r24	; 53
    11e6:	85 b7       	in	r24, 0x35	; 53
    11e8:	8d 7f       	andi	r24, 0xFD	; 253
    11ea:	85 bf       	out	0x35, r24	; 53
    11ec:	8b b7       	in	r24, 0x3b	; 59
    11ee:	80 64       	ori	r24, 0x40	; 64
    11f0:	8b bf       	out	0x3b, r24	; 59
    11f2:	08 95       	ret

000011f4 <INT0_setcallback>:
/** ARGUMENTS  : POINTER TO ISR FUNCTION                */
/** RETURNS    : VOID                                   */
/********************************************************/
void INT0_setcallback( void ( * INT0_ISR) (void) ) 
{
	EXTINT0_callback_ptr = INT0_ISR ; /** INT0 GLOBAL POINTER POINTS TO THE PASSED FUNCTION NAME **/
    11f4:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <EXTINT0_callback_ptr+0x1>
    11f8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <EXTINT0_callback_ptr>
    11fc:	08 95       	ret

000011fe <__vector_1>:
}

ISR(INT0_vect)
{
    11fe:	1f 92       	push	r1
    1200:	0f 92       	push	r0
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	0f 92       	push	r0
    1206:	11 24       	eor	r1, r1
	EXTINT0_callback_ptr ; 
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	0f 90       	pop	r0
    120e:	1f 90       	pop	r1
    1210:	18 95       	reti

00001212 <TMR0_init>:
/** ARGUMENTS  : POINTER TO FUNCTION                                         **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR0_setcallback(void ( * TMR0_OVF_ISR ) (void) )
{
	TMR0_OVF_callback = TMR0_OVF_ISR ; /** TMR0 POINTER POINTS TO THE PASSED FUNCTION **/
    1212:	83 b7       	in	r24, 0x33	; 51
    1214:	8f 77       	andi	r24, 0x7F	; 127
    1216:	83 bf       	out	0x33, r24	; 51
    1218:	83 b7       	in	r24, 0x33	; 51
    121a:	8f 7b       	andi	r24, 0xBF	; 191
    121c:	83 bf       	out	0x33, r24	; 51
    121e:	83 b7       	in	r24, 0x33	; 51
    1220:	87 7f       	andi	r24, 0xF7	; 247
    1222:	83 bf       	out	0x33, r24	; 51
    1224:	83 b7       	in	r24, 0x33	; 51
    1226:	8f 7e       	andi	r24, 0xEF	; 239
    1228:	83 bf       	out	0x33, r24	; 51
    122a:	83 b7       	in	r24, 0x33	; 51
    122c:	8f 7d       	andi	r24, 0xDF	; 223
    122e:	83 bf       	out	0x33, r24	; 51
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	08 95       	ret

00001234 <TMR0_start>:
    1234:	83 b7       	in	r24, 0x33	; 51
    1236:	81 60       	ori	r24, 0x01	; 1
    1238:	83 bf       	out	0x33, r24	; 51
    123a:	83 b7       	in	r24, 0x33	; 51
    123c:	8d 7f       	andi	r24, 0xFD	; 253
    123e:	83 bf       	out	0x33, r24	; 51
    1240:	83 b7       	in	r24, 0x33	; 51
    1242:	8b 7f       	andi	r24, 0xFB	; 251
    1244:	83 bf       	out	0x33, r24	; 51
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	08 95       	ret

0000124a <TMR0_stop>:
    124a:	83 b7       	in	r24, 0x33	; 51
    124c:	8e 7f       	andi	r24, 0xFE	; 254
    124e:	83 bf       	out	0x33, r24	; 51
    1250:	83 b7       	in	r24, 0x33	; 51
    1252:	8d 7f       	andi	r24, 0xFD	; 253
    1254:	83 bf       	out	0x33, r24	; 51
    1256:	83 b7       	in	r24, 0x33	; 51
    1258:	8b 7f       	andi	r24, 0xFB	; 251
    125a:	83 bf       	out	0x33, r24	; 51
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	08 95       	ret

00001260 <TMR0_delayms>:
    1260:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__floatunsisf>
    1264:	2f e6       	ldi	r18, 0x6F	; 111
    1266:	32 e1       	ldi	r19, 0x12	; 18
    1268:	43 e0       	ldi	r20, 0x03	; 3
    126a:	5d e3       	ldi	r21, 0x3D	; 61
    126c:	0e 94 3f 0a 	call	0x147e	; 0x147e <__divsf3>
    1270:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fixunssfsi>
    1274:	60 93 ab 00 	sts	0x00AB, r22	; 0x8000ab <u32_gs_tmr0nuofovs>
    1278:	70 93 ac 00 	sts	0x00AC, r23	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    127c:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    1280:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
    1284:	12 be       	out	0x32, r1	; 50
    1286:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_start>
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	ba 01       	movw	r22, r20
    1290:	0a c0       	rjmp	.+20     	; 0x12a6 <TMR0_delayms+0x46>
    1292:	08 b6       	in	r0, 0x38	; 56
    1294:	00 fe       	sbrs	r0, 0
    1296:	fd cf       	rjmp	.-6      	; 0x1292 <TMR0_delayms+0x32>
    1298:	88 b7       	in	r24, 0x38	; 56
    129a:	81 60       	ori	r24, 0x01	; 1
    129c:	88 bf       	out	0x38, r24	; 56
    129e:	4f 5f       	subi	r20, 0xFF	; 255
    12a0:	5f 4f       	sbci	r21, 0xFF	; 255
    12a2:	6f 4f       	sbci	r22, 0xFF	; 255
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <u32_gs_tmr0nuofovs>
    12aa:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    12ae:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    12b2:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
    12b6:	48 17       	cp	r20, r24
    12b8:	59 07       	cpc	r21, r25
    12ba:	6a 07       	cpc	r22, r26
    12bc:	7b 07       	cpc	r23, r27
    12be:	48 f3       	brcs	.-46     	; 0x1292 <TMR0_delayms+0x32>
    12c0:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <u32_gs_tmr0nuofovs>
    12c4:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    12c8:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    12cc:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
    12d0:	0e 94 25 09 	call	0x124a	; 0x124a <TMR0_stop>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	08 95       	ret

000012d8 <TMR0_delaymicros>:
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	68 94       	set
    12de:	14 f8       	bld	r1, 4
    12e0:	b6 95       	lsr	r27
    12e2:	a7 95       	ror	r26
    12e4:	97 95       	ror	r25
    12e6:	87 95       	ror	r24
    12e8:	16 94       	lsr	r1
    12ea:	d1 f7       	brne	.-12     	; 0x12e0 <TMR0_delaymicros+0x8>
    12ec:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <u32_gs_tmr0nuofovs>
    12f0:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    12f4:	a0 93 ad 00 	sts	0x00AD, r26	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    12f8:	b0 93 ae 00 	sts	0x00AE, r27	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
    12fc:	12 be       	out	0x32, r1	; 50
    12fe:	0e 94 1a 09 	call	0x1234	; 0x1234 <TMR0_start>
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	ba 01       	movw	r22, r20
    1308:	0a c0       	rjmp	.+20     	; 0x131e <TMR0_delaymicros+0x46>
    130a:	08 b6       	in	r0, 0x38	; 56
    130c:	00 fe       	sbrs	r0, 0
    130e:	fd cf       	rjmp	.-6      	; 0x130a <TMR0_delaymicros+0x32>
    1310:	88 b7       	in	r24, 0x38	; 56
    1312:	81 60       	ori	r24, 0x01	; 1
    1314:	88 bf       	out	0x38, r24	; 56
    1316:	4f 5f       	subi	r20, 0xFF	; 255
    1318:	5f 4f       	sbci	r21, 0xFF	; 255
    131a:	6f 4f       	sbci	r22, 0xFF	; 255
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <u32_gs_tmr0nuofovs>
    1322:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    1326:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    132a:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
    132e:	48 17       	cp	r20, r24
    1330:	59 07       	cpc	r21, r25
    1332:	6a 07       	cpc	r22, r26
    1334:	7b 07       	cpc	r23, r27
    1336:	48 f3       	brcs	.-46     	; 0x130a <TMR0_delaymicros+0x32>
    1338:	0e 94 25 09 	call	0x124a	; 0x124a <TMR0_stop>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	08 95       	ret

00001340 <__vector_11>:
}


ISR(TIMER0_OVF_vect)
{
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
	TMR0_OVF_callback ;
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <TMR1_init>:
	
	
	#endif
	
	return u32_a_ovs ;
}
    1354:	8f b5       	in	r24, 0x2f	; 47
    1356:	8e 7f       	andi	r24, 0xFE	; 254
    1358:	8f bd       	out	0x2f, r24	; 47
    135a:	8f b5       	in	r24, 0x2f	; 47
    135c:	8d 7f       	andi	r24, 0xFD	; 253
    135e:	8f bd       	out	0x2f, r24	; 47
    1360:	8e b5       	in	r24, 0x2e	; 46
    1362:	87 7f       	andi	r24, 0xF7	; 247
    1364:	8e bd       	out	0x2e, r24	; 46
    1366:	8e b5       	in	r24, 0x2e	; 46
    1368:	8f 7e       	andi	r24, 0xEF	; 239
    136a:	8e bd       	out	0x2e, r24	; 46
    136c:	8f b5       	in	r24, 0x2f	; 47
    136e:	84 60       	ori	r24, 0x04	; 4
    1370:	8f bd       	out	0x2f, r24	; 47
    1372:	8f b5       	in	r24, 0x2f	; 47
    1374:	88 60       	ori	r24, 0x08	; 8
    1376:	8f bd       	out	0x2f, r24	; 47
    1378:	8f b7       	in	r24, 0x3f	; 63
    137a:	80 68       	ori	r24, 0x80	; 128
    137c:	8f bf       	out	0x3f, r24	; 63
    137e:	89 b7       	in	r24, 0x39	; 57
    1380:	9a b7       	in	r25, 0x3a	; 58
    1382:	84 60       	ori	r24, 0x04	; 4
    1384:	9a bf       	out	0x3a, r25	; 58
    1386:	89 bf       	out	0x39, r24	; 57
    1388:	08 95       	ret

0000138a <TMR1_start>:
    138a:	1d bc       	out	0x2d, r1	; 45
    138c:	1c bc       	out	0x2c, r1	; 44
    138e:	8e b5       	in	r24, 0x2e	; 46
    1390:	81 60       	ori	r24, 0x01	; 1
    1392:	8e bd       	out	0x2e, r24	; 46
    1394:	8e b5       	in	r24, 0x2e	; 46
    1396:	8d 7f       	andi	r24, 0xFD	; 253
    1398:	8e bd       	out	0x2e, r24	; 46
    139a:	8e b5       	in	r24, 0x2e	; 46
    139c:	8b 7f       	andi	r24, 0xFB	; 251
    139e:	8e bd       	out	0x2e, r24	; 46
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	08 95       	ret

000013a4 <TMR1_stop>:
    13a4:	8e b5       	in	r24, 0x2e	; 46
    13a6:	8e 7f       	andi	r24, 0xFE	; 254
    13a8:	8e bd       	out	0x2e, r24	; 46
    13aa:	8e b5       	in	r24, 0x2e	; 46
    13ac:	8d 7f       	andi	r24, 0xFD	; 253
    13ae:	8e bd       	out	0x2e, r24	; 46
    13b0:	8e b5       	in	r24, 0x2e	; 46
    13b2:	8b 7f       	andi	r24, 0xFB	; 251
    13b4:	8e bd       	out	0x2e, r24	; 46
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	08 95       	ret

000013ba <TMR1_getvalue>:
    13ba:	2c b5       	in	r18, 0x2c	; 44
    13bc:	3d b5       	in	r19, 0x2d	; 45
    13be:	fc 01       	movw	r30, r24
    13c0:	31 83       	std	Z+1, r19	; 0x01
    13c2:	20 83       	st	Z, r18
    13c4:	08 95       	ret

000013c6 <TMR1_setcounterval>:
    13c6:	9d bd       	out	0x2d, r25	; 45
    13c8:	8c bd       	out	0x2c, r24	; 44
    13ca:	08 95       	ret

000013cc <TMR1_setcallback>:
/** ARGUMENTS  : POINTER TO FUNCTION                                         **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR1_setcallback(void ( * TMR1_OVF_ISR ) (void) )
{
	TMR1_OVF_callback = TMR1_OVF_ISR ; 
    13cc:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <TMR1_OVF_callback+0x1>
    13d0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <TMR1_OVF_callback>
    13d4:	08 95       	ret

000013d6 <__vector_9>:
}

ISR(TIMER1_OVF_vect)
{
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
	TMR1_OVF_callback ;
    13e0:	0f 90       	pop	r0
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	0f 90       	pop	r0
    13e6:	1f 90       	pop	r1
    13e8:	18 95       	reti

000013ea <TMR2_init>:
	/* TIMER MODE OF TMR0 */
	#elif TIMER2_CLK_SRC == INTERNAL_CLK_SRC
	
	#if TIMER2_MODE == TMR2_NORMAL_MODE
	
	clear_bit(TCCR2 , 7);
    13ea:	85 b5       	in	r24, 0x25	; 37
    13ec:	8f 77       	andi	r24, 0x7F	; 127
    13ee:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 6);
    13f0:	85 b5       	in	r24, 0x25	; 37
    13f2:	8f 7b       	andi	r24, 0xBF	; 191
    13f4:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 3);
    13f6:	85 b5       	in	r24, 0x25	; 37
    13f8:	87 7f       	andi	r24, 0xF7	; 247
    13fa:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 4);
    13fc:	85 b5       	in	r24, 0x25	; 37
    13fe:	8f 7e       	andi	r24, 0xEF	; 239
    1400:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 5);
    1402:	85 b5       	in	r24, 0x25	; 37
    1404:	8f 7d       	andi	r24, 0xDF	; 223
    1406:	85 bd       	out	0x25, r24	; 37
	
	/* ENABLE INTERRUPT */
	set_bit(SREG , 7);
    1408:	8f b7       	in	r24, 0x3f	; 63
    140a:	80 68       	ori	r24, 0x80	; 128
    140c:	8f bf       	out	0x3f, r24	; 63
	set_bit(TIMSK , 6);
    140e:	89 b7       	in	r24, 0x39	; 57
    1410:	80 64       	ori	r24, 0x40	; 64
    1412:	89 bf       	out	0x39, r24	; 57
	#endif
	#endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	08 95       	ret

00001418 <TMR2_start>:
	
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR2 , 0);
    1418:	85 b5       	in	r24, 0x25	; 37
    141a:	81 60       	ori	r24, 0x01	; 1
    141c:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    141e:	85 b5       	in	r24, 0x25	; 37
    1420:	8d 7f       	andi	r24, 0xFD	; 253
    1422:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    1424:	85 b5       	in	r24, 0x25	; 37
    1426:	8b 7f       	andi	r24, 0xFB	; 251
    1428:	85 bd       	out	0x25, r24	; 37
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	08 95       	ret

0000142e <TMR2_stop>:
TMR2_stop_error TMR2_stop(void)
{
	TMR2_stop_error en_a_stopStatus = TMR2_VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR2 , 0);
    142e:	85 b5       	in	r24, 0x25	; 37
    1430:	8e 7f       	andi	r24, 0xFE	; 254
    1432:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    1434:	85 b5       	in	r24, 0x25	; 37
    1436:	8d 7f       	andi	r24, 0xFD	; 253
    1438:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    143a:	85 b5       	in	r24, 0x25	; 37
    143c:	8b 7f       	andi	r24, 0xFB	; 251
    143e:	85 bd       	out	0x25, r24	; 37
	
	en_a_stopStatus = TMR2_VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	08 95       	ret

00001444 <TMR2_getovs>:
	u32_a_ovs = (u16_a_delay / 0.256);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
	

	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	u32_a_ovs = (u16_a_delay / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    1444:	bc 01       	movw	r22, r24
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__floatunsisf>
    144e:	2f e6       	ldi	r18, 0x6F	; 111
    1450:	32 e1       	ldi	r19, 0x12	; 18
    1452:	43 e0       	ldi	r20, 0x03	; 3
    1454:	5d e3       	ldi	r21, 0x3D	; 61
    1456:	0e 94 3f 0a 	call	0x147e	; 0x147e <__divsf3>
    145a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fixunssfsi>
	
	#endif
	
	return u32_a_ovs ;  /** RETURN THE CALCULATED NUMBER OF OVERFLOWS **/
}
    145e:	08 95       	ret

00001460 <TMR2_setcallback>:
/** ARGUMENTS  : POINTER TO FUNCTION                                         **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR2_setcallback(void ( * TMR2_OVF_ISR ) (void) )
{
	TMR2_OVF_callback = TMR2_OVF_ISR ;
    1460:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <TMR2_OVF_callback+0x1>
    1464:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <TMR2_OVF_callback>
    1468:	08 95       	ret

0000146a <__vector_5>:
}

ISR(TIMER2_OVF_vect)
{
    146a:	1f 92       	push	r1
    146c:	0f 92       	push	r0
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	0f 92       	push	r0
    1472:	11 24       	eor	r1, r1
	TMR2_OVF_callback ;
}
    1474:	0f 90       	pop	r0
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	0f 90       	pop	r0
    147a:	1f 90       	pop	r1
    147c:	18 95       	reti

0000147e <__divsf3>:
    147e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__divsf3x>
    1482:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__fp_round>
    1486:	0e 94 2d 0b 	call	0x165a	; 0x165a <__fp_pscB>
    148a:	58 f0       	brcs	.+22     	; 0x14a2 <__divsf3+0x24>
    148c:	0e 94 26 0b 	call	0x164c	; 0x164c <__fp_pscA>
    1490:	40 f0       	brcs	.+16     	; 0x14a2 <__divsf3+0x24>
    1492:	29 f4       	brne	.+10     	; 0x149e <__divsf3+0x20>
    1494:	5f 3f       	cpi	r21, 0xFF	; 255
    1496:	29 f0       	breq	.+10     	; 0x14a2 <__divsf3+0x24>
    1498:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>
    149c:	51 11       	cpse	r21, r1
    149e:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__fp_szero>
    14a2:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_nan>

000014a6 <__divsf3x>:
    14a6:	0e 94 45 0b 	call	0x168a	; 0x168a <__fp_split3>
    14aa:	68 f3       	brcs	.-38     	; 0x1486 <__divsf3+0x8>

000014ac <__divsf3_pse>:
    14ac:	99 23       	and	r25, r25
    14ae:	b1 f3       	breq	.-20     	; 0x149c <__divsf3+0x1e>
    14b0:	55 23       	and	r21, r21
    14b2:	91 f3       	breq	.-28     	; 0x1498 <__divsf3+0x1a>
    14b4:	95 1b       	sub	r25, r21
    14b6:	55 0b       	sbc	r21, r21
    14b8:	bb 27       	eor	r27, r27
    14ba:	aa 27       	eor	r26, r26
    14bc:	62 17       	cp	r22, r18
    14be:	73 07       	cpc	r23, r19
    14c0:	84 07       	cpc	r24, r20
    14c2:	38 f0       	brcs	.+14     	; 0x14d2 <__divsf3_pse+0x26>
    14c4:	9f 5f       	subi	r25, 0xFF	; 255
    14c6:	5f 4f       	sbci	r21, 0xFF	; 255
    14c8:	22 0f       	add	r18, r18
    14ca:	33 1f       	adc	r19, r19
    14cc:	44 1f       	adc	r20, r20
    14ce:	aa 1f       	adc	r26, r26
    14d0:	a9 f3       	breq	.-22     	; 0x14bc <__divsf3_pse+0x10>
    14d2:	35 d0       	rcall	.+106    	; 0x153e <__divsf3_pse+0x92>
    14d4:	0e 2e       	mov	r0, r30
    14d6:	3a f0       	brmi	.+14     	; 0x14e6 <__divsf3_pse+0x3a>
    14d8:	e0 e8       	ldi	r30, 0x80	; 128
    14da:	32 d0       	rcall	.+100    	; 0x1540 <__divsf3_pse+0x94>
    14dc:	91 50       	subi	r25, 0x01	; 1
    14de:	50 40       	sbci	r21, 0x00	; 0
    14e0:	e6 95       	lsr	r30
    14e2:	00 1c       	adc	r0, r0
    14e4:	ca f7       	brpl	.-14     	; 0x14d8 <__divsf3_pse+0x2c>
    14e6:	2b d0       	rcall	.+86     	; 0x153e <__divsf3_pse+0x92>
    14e8:	fe 2f       	mov	r31, r30
    14ea:	29 d0       	rcall	.+82     	; 0x153e <__divsf3_pse+0x92>
    14ec:	66 0f       	add	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	88 1f       	adc	r24, r24
    14f2:	bb 1f       	adc	r27, r27
    14f4:	26 17       	cp	r18, r22
    14f6:	37 07       	cpc	r19, r23
    14f8:	48 07       	cpc	r20, r24
    14fa:	ab 07       	cpc	r26, r27
    14fc:	b0 e8       	ldi	r27, 0x80	; 128
    14fe:	09 f0       	breq	.+2      	; 0x1502 <__divsf3_pse+0x56>
    1500:	bb 0b       	sbc	r27, r27
    1502:	80 2d       	mov	r24, r0
    1504:	bf 01       	movw	r22, r30
    1506:	ff 27       	eor	r31, r31
    1508:	93 58       	subi	r25, 0x83	; 131
    150a:	5f 4f       	sbci	r21, 0xFF	; 255
    150c:	3a f0       	brmi	.+14     	; 0x151c <__divsf3_pse+0x70>
    150e:	9e 3f       	cpi	r25, 0xFE	; 254
    1510:	51 05       	cpc	r21, r1
    1512:	78 f0       	brcs	.+30     	; 0x1532 <__divsf3_pse+0x86>
    1514:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_inf>
    1518:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__fp_szero>
    151c:	5f 3f       	cpi	r21, 0xFF	; 255
    151e:	e4 f3       	brlt	.-8      	; 0x1518 <__divsf3_pse+0x6c>
    1520:	98 3e       	cpi	r25, 0xE8	; 232
    1522:	d4 f3       	brlt	.-12     	; 0x1518 <__divsf3_pse+0x6c>
    1524:	86 95       	lsr	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	b7 95       	ror	r27
    152c:	f7 95       	ror	r31
    152e:	9f 5f       	subi	r25, 0xFF	; 255
    1530:	c9 f7       	brne	.-14     	; 0x1524 <__divsf3_pse+0x78>
    1532:	88 0f       	add	r24, r24
    1534:	91 1d       	adc	r25, r1
    1536:	96 95       	lsr	r25
    1538:	87 95       	ror	r24
    153a:	97 f9       	bld	r25, 7
    153c:	08 95       	ret
    153e:	e1 e0       	ldi	r30, 0x01	; 1
    1540:	66 0f       	add	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	88 1f       	adc	r24, r24
    1546:	bb 1f       	adc	r27, r27
    1548:	62 17       	cp	r22, r18
    154a:	73 07       	cpc	r23, r19
    154c:	84 07       	cpc	r24, r20
    154e:	ba 07       	cpc	r27, r26
    1550:	20 f0       	brcs	.+8      	; 0x155a <__divsf3_pse+0xae>
    1552:	62 1b       	sub	r22, r18
    1554:	73 0b       	sbc	r23, r19
    1556:	84 0b       	sbc	r24, r20
    1558:	ba 0b       	sbc	r27, r26
    155a:	ee 1f       	adc	r30, r30
    155c:	88 f7       	brcc	.-30     	; 0x1540 <__divsf3_pse+0x94>
    155e:	e0 95       	com	r30
    1560:	08 95       	ret

00001562 <__fixunssfsi>:
    1562:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fp_splitA>
    1566:	88 f0       	brcs	.+34     	; 0x158a <__fixunssfsi+0x28>
    1568:	9f 57       	subi	r25, 0x7F	; 127
    156a:	98 f0       	brcs	.+38     	; 0x1592 <__fixunssfsi+0x30>
    156c:	b9 2f       	mov	r27, r25
    156e:	99 27       	eor	r25, r25
    1570:	b7 51       	subi	r27, 0x17	; 23
    1572:	b0 f0       	brcs	.+44     	; 0x15a0 <__fixunssfsi+0x3e>
    1574:	e1 f0       	breq	.+56     	; 0x15ae <__fixunssfsi+0x4c>
    1576:	66 0f       	add	r22, r22
    1578:	77 1f       	adc	r23, r23
    157a:	88 1f       	adc	r24, r24
    157c:	99 1f       	adc	r25, r25
    157e:	1a f0       	brmi	.+6      	; 0x1586 <__fixunssfsi+0x24>
    1580:	ba 95       	dec	r27
    1582:	c9 f7       	brne	.-14     	; 0x1576 <__fixunssfsi+0x14>
    1584:	14 c0       	rjmp	.+40     	; 0x15ae <__fixunssfsi+0x4c>
    1586:	b1 30       	cpi	r27, 0x01	; 1
    1588:	91 f0       	breq	.+36     	; 0x15ae <__fixunssfsi+0x4c>
    158a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__fp_zero>
    158e:	b1 e0       	ldi	r27, 0x01	; 1
    1590:	08 95       	ret
    1592:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__fp_zero>
    1596:	67 2f       	mov	r22, r23
    1598:	78 2f       	mov	r23, r24
    159a:	88 27       	eor	r24, r24
    159c:	b8 5f       	subi	r27, 0xF8	; 248
    159e:	39 f0       	breq	.+14     	; 0x15ae <__fixunssfsi+0x4c>
    15a0:	b9 3f       	cpi	r27, 0xF9	; 249
    15a2:	cc f3       	brlt	.-14     	; 0x1596 <__fixunssfsi+0x34>
    15a4:	86 95       	lsr	r24
    15a6:	77 95       	ror	r23
    15a8:	67 95       	ror	r22
    15aa:	b3 95       	inc	r27
    15ac:	d9 f7       	brne	.-10     	; 0x15a4 <__fixunssfsi+0x42>
    15ae:	3e f4       	brtc	.+14     	; 0x15be <__fixunssfsi+0x5c>
    15b0:	90 95       	com	r25
    15b2:	80 95       	com	r24
    15b4:	70 95       	com	r23
    15b6:	61 95       	neg	r22
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	8f 4f       	sbci	r24, 0xFF	; 255
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	08 95       	ret

000015c0 <__floatunsisf>:
    15c0:	e8 94       	clt
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <__floatsisf+0x12>

000015c4 <__floatsisf>:
    15c4:	97 fb       	bst	r25, 7
    15c6:	3e f4       	brtc	.+14     	; 0x15d6 <__floatsisf+0x12>
    15c8:	90 95       	com	r25
    15ca:	80 95       	com	r24
    15cc:	70 95       	com	r23
    15ce:	61 95       	neg	r22
    15d0:	7f 4f       	sbci	r23, 0xFF	; 255
    15d2:	8f 4f       	sbci	r24, 0xFF	; 255
    15d4:	9f 4f       	sbci	r25, 0xFF	; 255
    15d6:	99 23       	and	r25, r25
    15d8:	a9 f0       	breq	.+42     	; 0x1604 <__floatsisf+0x40>
    15da:	f9 2f       	mov	r31, r25
    15dc:	96 e9       	ldi	r25, 0x96	; 150
    15de:	bb 27       	eor	r27, r27
    15e0:	93 95       	inc	r25
    15e2:	f6 95       	lsr	r31
    15e4:	87 95       	ror	r24
    15e6:	77 95       	ror	r23
    15e8:	67 95       	ror	r22
    15ea:	b7 95       	ror	r27
    15ec:	f1 11       	cpse	r31, r1
    15ee:	f8 cf       	rjmp	.-16     	; 0x15e0 <__floatsisf+0x1c>
    15f0:	fa f4       	brpl	.+62     	; 0x1630 <__floatsisf+0x6c>
    15f2:	bb 0f       	add	r27, r27
    15f4:	11 f4       	brne	.+4      	; 0x15fa <__floatsisf+0x36>
    15f6:	60 ff       	sbrs	r22, 0
    15f8:	1b c0       	rjmp	.+54     	; 0x1630 <__floatsisf+0x6c>
    15fa:	6f 5f       	subi	r22, 0xFF	; 255
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	16 c0       	rjmp	.+44     	; 0x1630 <__floatsisf+0x6c>
    1604:	88 23       	and	r24, r24
    1606:	11 f0       	breq	.+4      	; 0x160c <__floatsisf+0x48>
    1608:	96 e9       	ldi	r25, 0x96	; 150
    160a:	11 c0       	rjmp	.+34     	; 0x162e <__floatsisf+0x6a>
    160c:	77 23       	and	r23, r23
    160e:	21 f0       	breq	.+8      	; 0x1618 <__floatsisf+0x54>
    1610:	9e e8       	ldi	r25, 0x8E	; 142
    1612:	87 2f       	mov	r24, r23
    1614:	76 2f       	mov	r23, r22
    1616:	05 c0       	rjmp	.+10     	; 0x1622 <__floatsisf+0x5e>
    1618:	66 23       	and	r22, r22
    161a:	71 f0       	breq	.+28     	; 0x1638 <__floatsisf+0x74>
    161c:	96 e8       	ldi	r25, 0x86	; 134
    161e:	86 2f       	mov	r24, r22
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	2a f0       	brmi	.+10     	; 0x1630 <__floatsisf+0x6c>
    1626:	9a 95       	dec	r25
    1628:	66 0f       	add	r22, r22
    162a:	77 1f       	adc	r23, r23
    162c:	88 1f       	adc	r24, r24
    162e:	da f7       	brpl	.-10     	; 0x1626 <__floatsisf+0x62>
    1630:	88 0f       	add	r24, r24
    1632:	96 95       	lsr	r25
    1634:	87 95       	ror	r24
    1636:	97 f9       	bld	r25, 7
    1638:	08 95       	ret

0000163a <__fp_inf>:
    163a:	97 f9       	bld	r25, 7
    163c:	9f 67       	ori	r25, 0x7F	; 127
    163e:	80 e8       	ldi	r24, 0x80	; 128
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	08 95       	ret

00001646 <__fp_nan>:
    1646:	9f ef       	ldi	r25, 0xFF	; 255
    1648:	80 ec       	ldi	r24, 0xC0	; 192
    164a:	08 95       	ret

0000164c <__fp_pscA>:
    164c:	00 24       	eor	r0, r0
    164e:	0a 94       	dec	r0
    1650:	16 16       	cp	r1, r22
    1652:	17 06       	cpc	r1, r23
    1654:	18 06       	cpc	r1, r24
    1656:	09 06       	cpc	r0, r25
    1658:	08 95       	ret

0000165a <__fp_pscB>:
    165a:	00 24       	eor	r0, r0
    165c:	0a 94       	dec	r0
    165e:	12 16       	cp	r1, r18
    1660:	13 06       	cpc	r1, r19
    1662:	14 06       	cpc	r1, r20
    1664:	05 06       	cpc	r0, r21
    1666:	08 95       	ret

00001668 <__fp_round>:
    1668:	09 2e       	mov	r0, r25
    166a:	03 94       	inc	r0
    166c:	00 0c       	add	r0, r0
    166e:	11 f4       	brne	.+4      	; 0x1674 <__fp_round+0xc>
    1670:	88 23       	and	r24, r24
    1672:	52 f0       	brmi	.+20     	; 0x1688 <__fp_round+0x20>
    1674:	bb 0f       	add	r27, r27
    1676:	40 f4       	brcc	.+16     	; 0x1688 <__fp_round+0x20>
    1678:	bf 2b       	or	r27, r31
    167a:	11 f4       	brne	.+4      	; 0x1680 <__fp_round+0x18>
    167c:	60 ff       	sbrs	r22, 0
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <__fp_round+0x20>
    1680:	6f 5f       	subi	r22, 0xFF	; 255
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	8f 4f       	sbci	r24, 0xFF	; 255
    1686:	9f 4f       	sbci	r25, 0xFF	; 255
    1688:	08 95       	ret

0000168a <__fp_split3>:
    168a:	57 fd       	sbrc	r21, 7
    168c:	90 58       	subi	r25, 0x80	; 128
    168e:	44 0f       	add	r20, r20
    1690:	55 1f       	adc	r21, r21
    1692:	59 f0       	breq	.+22     	; 0x16aa <__fp_splitA+0x10>
    1694:	5f 3f       	cpi	r21, 0xFF	; 255
    1696:	71 f0       	breq	.+28     	; 0x16b4 <__fp_splitA+0x1a>
    1698:	47 95       	ror	r20

0000169a <__fp_splitA>:
    169a:	88 0f       	add	r24, r24
    169c:	97 fb       	bst	r25, 7
    169e:	99 1f       	adc	r25, r25
    16a0:	61 f0       	breq	.+24     	; 0x16ba <__fp_splitA+0x20>
    16a2:	9f 3f       	cpi	r25, 0xFF	; 255
    16a4:	79 f0       	breq	.+30     	; 0x16c4 <__fp_splitA+0x2a>
    16a6:	87 95       	ror	r24
    16a8:	08 95       	ret
    16aa:	12 16       	cp	r1, r18
    16ac:	13 06       	cpc	r1, r19
    16ae:	14 06       	cpc	r1, r20
    16b0:	55 1f       	adc	r21, r21
    16b2:	f2 cf       	rjmp	.-28     	; 0x1698 <__fp_split3+0xe>
    16b4:	46 95       	lsr	r20
    16b6:	f1 df       	rcall	.-30     	; 0x169a <__fp_splitA>
    16b8:	08 c0       	rjmp	.+16     	; 0x16ca <__fp_splitA+0x30>
    16ba:	16 16       	cp	r1, r22
    16bc:	17 06       	cpc	r1, r23
    16be:	18 06       	cpc	r1, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	f1 cf       	rjmp	.-30     	; 0x16a6 <__fp_splitA+0xc>
    16c4:	86 95       	lsr	r24
    16c6:	71 05       	cpc	r23, r1
    16c8:	61 05       	cpc	r22, r1
    16ca:	08 94       	sec
    16cc:	08 95       	ret

000016ce <__fp_zero>:
    16ce:	e8 94       	clt

000016d0 <__fp_szero>:
    16d0:	bb 27       	eor	r27, r27
    16d2:	66 27       	eor	r22, r22
    16d4:	77 27       	eor	r23, r23
    16d6:	cb 01       	movw	r24, r22
    16d8:	97 f9       	bld	r25, 7
    16da:	08 95       	ret

000016dc <__divmodsi4>:
    16dc:	05 2e       	mov	r0, r21
    16de:	97 fb       	bst	r25, 7
    16e0:	1e f4       	brtc	.+6      	; 0x16e8 <__divmodsi4+0xc>
    16e2:	00 94       	com	r0
    16e4:	0e 94 85 0b 	call	0x170a	; 0x170a <__negsi2>
    16e8:	57 fd       	sbrc	r21, 7
    16ea:	07 d0       	rcall	.+14     	; 0x16fa <__divmodsi4_neg2>
    16ec:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__udivmodsi4>
    16f0:	07 fc       	sbrc	r0, 7
    16f2:	03 d0       	rcall	.+6      	; 0x16fa <__divmodsi4_neg2>
    16f4:	4e f4       	brtc	.+18     	; 0x1708 <__divmodsi4_exit>
    16f6:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__negsi2>

000016fa <__divmodsi4_neg2>:
    16fa:	50 95       	com	r21
    16fc:	40 95       	com	r20
    16fe:	30 95       	com	r19
    1700:	21 95       	neg	r18
    1702:	3f 4f       	sbci	r19, 0xFF	; 255
    1704:	4f 4f       	sbci	r20, 0xFF	; 255
    1706:	5f 4f       	sbci	r21, 0xFF	; 255

00001708 <__divmodsi4_exit>:
    1708:	08 95       	ret

0000170a <__negsi2>:
    170a:	90 95       	com	r25
    170c:	80 95       	com	r24
    170e:	70 95       	com	r23
    1710:	61 95       	neg	r22
    1712:	7f 4f       	sbci	r23, 0xFF	; 255
    1714:	8f 4f       	sbci	r24, 0xFF	; 255
    1716:	9f 4f       	sbci	r25, 0xFF	; 255
    1718:	08 95       	ret

0000171a <__umulhisi3>:
    171a:	a2 9f       	mul	r26, r18
    171c:	b0 01       	movw	r22, r0
    171e:	b3 9f       	mul	r27, r19
    1720:	c0 01       	movw	r24, r0
    1722:	a3 9f       	mul	r26, r19
    1724:	70 0d       	add	r23, r0
    1726:	81 1d       	adc	r24, r1
    1728:	11 24       	eor	r1, r1
    172a:	91 1d       	adc	r25, r1
    172c:	b2 9f       	mul	r27, r18
    172e:	70 0d       	add	r23, r0
    1730:	81 1d       	adc	r24, r1
    1732:	11 24       	eor	r1, r1
    1734:	91 1d       	adc	r25, r1
    1736:	08 95       	ret

00001738 <__udivmodsi4>:
    1738:	a1 e2       	ldi	r26, 0x21	; 33
    173a:	1a 2e       	mov	r1, r26
    173c:	aa 1b       	sub	r26, r26
    173e:	bb 1b       	sub	r27, r27
    1740:	fd 01       	movw	r30, r26
    1742:	0d c0       	rjmp	.+26     	; 0x175e <__udivmodsi4_ep>

00001744 <__udivmodsi4_loop>:
    1744:	aa 1f       	adc	r26, r26
    1746:	bb 1f       	adc	r27, r27
    1748:	ee 1f       	adc	r30, r30
    174a:	ff 1f       	adc	r31, r31
    174c:	a2 17       	cp	r26, r18
    174e:	b3 07       	cpc	r27, r19
    1750:	e4 07       	cpc	r30, r20
    1752:	f5 07       	cpc	r31, r21
    1754:	20 f0       	brcs	.+8      	; 0x175e <__udivmodsi4_ep>
    1756:	a2 1b       	sub	r26, r18
    1758:	b3 0b       	sbc	r27, r19
    175a:	e4 0b       	sbc	r30, r20
    175c:	f5 0b       	sbc	r31, r21

0000175e <__udivmodsi4_ep>:
    175e:	66 1f       	adc	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	88 1f       	adc	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	1a 94       	dec	r1
    1768:	69 f7       	brne	.-38     	; 0x1744 <__udivmodsi4_loop>
    176a:	60 95       	com	r22
    176c:	70 95       	com	r23
    176e:	80 95       	com	r24
    1770:	90 95       	com	r25
    1772:	9b 01       	movw	r18, r22
    1774:	ac 01       	movw	r20, r24
    1776:	bd 01       	movw	r22, r26
    1778:	cf 01       	movw	r24, r30
    177a:	08 95       	ret

0000177c <_exit>:
    177c:	f8 94       	cli

0000177e <__stop_program>:
    177e:	ff cf       	rjmp	.-2      	; 0x177e <__stop_program>
