
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000145c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  0000145c  000014f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800092  00800092  00001522  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003381  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff0  00000000  00000000  00004c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e2a  00000000  00000000  00005c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00007a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e53  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143e  00000000  00000000  00008e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000a2ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 06 	call	0xca6	; 0xca6 <main>
      8a:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint32_t u32_g_tick = 0 ;           /** GLOBAL VARIABLE TO BE COMPARED WITH DELAY TICKS **/   

/** FUNCTION TO INITIALIZE APPLICATION MODULES **/
void APP_init()
{
    ICU_init(); /** INITIALIZE ICU **/
      92:	0e 94 30 03 	call	0x660	; 0x660 <ICU_init>

	US_init(); /** INITILAIZATION ULTRASONIC MODULE **/
      96:	0e 94 3c 06 	call	0xc78	; 0xc78 <US_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
      9a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TMR0_init>
	
	TMR2_init() ; /** INITIALIZE TIMER 2 **/
      9e:	0e 94 b3 08 	call	0x1166	; 0x1166 <TMR2_init>
	
	KEYPAD_init() ; /** INITIALIZE KEYPAD **/
      a2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <KEYPAD_init>
	
	Button_init(); /** INITIALIZATION OF BUTTON **/
      a6:	0e 94 0b 03 	call	0x616	; 0x616 <Button_init>
	
	LCD_init(); /** INITIALIZE LCD **/
      aa:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_init>
	
	TMR0_delayms(50); /** DELAY FOR LCD INITIALIZATION **/
      ae:	62 e3       	ldi	r22, 0x32	; 50
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>

	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 2e 05 	call	0xa5c	; 0xa5c <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 2e 05 	call	0xa5c	; 0xa5c <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 2e 05 	call	0xa5c	; 0xa5c <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <MOTOR_rotateclkdir>
      ea:	08 95       	ret

000000ec <APP_setentry>:

}

/** FUNCTION TO SET DEFAULTS **/
void APP_setentry()
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <APP_setentry+0x6>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_a_btnstatus = 0 , u8_a_pressednum = 0 ;
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	1a 82       	std	Y+2, r1	; 0x02
	
 	u32_g_tick = 0 ;
      fa:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
      fe:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <__data_end+0x1>
     102:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end+0x2>
     106:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x3>
	 
 	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     10a:	88 e8       	ldi	r24, 0x88	; 136
     10c:	93 e1       	ldi	r25, 0x13	; 19
     10e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMR2_getovs>
     112:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <u32_g_delay>
     116:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <u32_g_delay+0x1>
     11a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <u32_g_delay+0x2>
     11e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <u32_g_delay+0x3>

 	TMR2_start() ; /** START TIMER 2 **/
     122:	0e 94 ca 08 	call	0x1194	; 0x1194 <TMR2_start>

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     126:	39 c0       	rjmp	.+114    	; 0x19a <APP_setentry+0xae>
	{
 		LCD_goto(0 , 1);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_goto>
 		LCD_writestr("Set Def. Rot");
     130:	80 e6       	ldi	r24, 0x60	; 96
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 03 05 	call	0xa06	; 0xa06 <LCD_writestr>

 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON PRESSED **/
     138:	ae 01       	movw	r20, r28
     13a:	4f 5f       	subi	r20, 0xFF	; 255
     13c:	5f 4f       	sbci	r21, 0xFF	; 255
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 11 03 	call	0x622	; 0x622 <Is_pressed>
 		TMR0_delayms(100); /** WAIT 100 MS FOR BUTTON TO SETTLE **/
     146:	64 e6       	ldi	r22, 0x64	; 100
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>
 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON IS STILL PRESSED **/
     152:	ae 01       	movw	r20, r28
     154:	4f 5f       	subi	r20, 0xFF	; 255
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 11 03 	call	0x622	; 0x622 <Is_pressed>

		if (u8_a_btnstatus) /** IF THE BUTTON PRESSED **/
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 23       	and	r24, r24
     164:	d1 f0       	breq	.+52     	; 0x19a <APP_setentry+0xae>
 		{
 			u8_g_rotationcounter++ ; /** INCREASE ROTATION COUNTER BY 1 **/
     166:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <u8_g_rotationcounter>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <u8_g_rotationcounter>

 			if (u8_g_rotationcounter == LEFT_ROTATION) /** LEFT ROTATION **/
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	41 f4       	brne	.+16     	; 0x184 <APP_setentry+0x98>
 			{
				LCD_goto(1 , 1);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_goto>
				LCD_writestr("LEFT ROTATION");
     17a:	8d e6       	ldi	r24, 0x6D	; 109
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 03 05 	call	0xa06	; 0xa06 <LCD_writestr>
     182:	0a c0       	rjmp	.+20     	; 0x198 <APP_setentry+0xac>
			}
	 		else if(u8_g_rotationcounter == RIGHT_ROTATION) /** RIGHT ROTATION **/
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	41 f4       	brne	.+16     	; 0x198 <APP_setentry+0xac>
	 		{
 				LCD_goto(1 , 1);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_goto>
 				LCD_writestr("RIGHT ROTATION");
     190:	8b e7       	ldi	r24, 0x7B	; 123
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 03 05 	call	0xa06	; 0xa06 <LCD_writestr>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
     198:	19 82       	std	Y+1, r1	; 0x01
	 
 	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

 	TMR2_start() ; /** START TIMER 2 **/

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     19a:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
     19e:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
     1a2:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
     1a6:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
     1aa:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <u32_g_delay>
     1ae:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <u32_g_delay+0x1>
     1b2:	a0 91 98 00 	lds	r26, 0x0098	; 0x800098 <u32_g_delay+0x2>
     1b6:	b0 91 99 00 	lds	r27, 0x0099	; 0x800099 <u32_g_delay+0x3>
     1ba:	48 17       	cp	r20, r24
     1bc:	59 07       	cpc	r21, r25
     1be:	6a 07       	cpc	r22, r26
     1c0:	7b 07       	cpc	r23, r27
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <APP_setentry+0xda>
     1c4:	b1 cf       	rjmp	.-158    	; 0x128 <APP_setentry+0x3c>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
 		}
 	}
	
 	TMR2_stop(); /** STOP TIMER 2 **/
     1c6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <TMR2_stop>
		
	do /** ACCEPT KEYPAD BUTTON 1 FROM USER **/
	{
 		KEYPAD_read(&u8_a_pressednum);
     1ca:	ce 01       	movw	r24, r28
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	0e 94 8f 03 	call	0x71e	; 0x71e <KEYPAD_read>
 	} while (u8_a_pressednum != '1');
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	81 33       	cpi	r24, 0x31	; 49
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <APP_setentry+0xde>

 	 LCD_sendcmd(LCD_CLEAR);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 32 04 	call	0x864	; 0x864 <LCD_sendcmd>
	 TMR0_delayms(20);
     1de:	64 e1       	ldi	r22, 0x14	; 20
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>
	 
	 LCD_writestr("Waiting");
     1ea:	8a e8       	ldi	r24, 0x8A	; 138
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 03 05 	call	0xa06	; 0xa06 <LCD_writestr>
	 
	 TMR0_delayms(2000); /** WAIT 2 SECONDS **/
     1f2:	60 ed       	ldi	r22, 0xD0	; 208
     1f4:	77 e0       	ldi	r23, 0x07	; 7
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>
	 
	 LCD_sendcmd(LCD_CLEAR);
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 32 04 	call	0x864	; 0x864 <LCD_sendcmd>
	 TMR0_delayms(20);
     204:	64 e1       	ldi	r22, 0x14	; 20
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>
	 
}
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <APP_start>:

void APP_start()
{	u32_g_tick = 0 , u32_g_delay = 0; 
     21a:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
     21e:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <__data_end+0x1>
     222:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end+0x2>
     226:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x3>
     22a:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <u32_g_delay>
     22e:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <u32_g_delay+0x1>
     232:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <u32_g_delay+0x2>
     236:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <u32_g_delay+0x3>
	
	US_sendtrigger(); /** SEND TRIGGER **/
     23a:	0e 94 42 06 	call	0xc84	; 0xc84 <US_sendtrigger>
		
	u8_g_distance = (u16_g_time/464) ; /** CALCULATE THE DISTANCE **/
     23e:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <u16_g_time>
     242:	30 91 9d 00 	lds	r19, 0x009D	; 0x80009d <u16_g_time+0x1>
     246:	af e9       	ldi	r26, 0x9F	; 159
     248:	b6 e4       	ldi	r27, 0x46	; 70
     24a:	0e 94 1d 0a 	call	0x143a	; 0x143a <__umulhisi3>
     24e:	88 0f       	add	r24, r24
     250:	89 2f       	mov	r24, r25
     252:	88 1f       	adc	r24, r24
     254:	99 0b       	sbc	r25, r25
     256:	91 95       	neg	r25
     258:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <u8_g_distance>
	
	
	while((u16_g_time/464) > 70) /** CASE NUMBER 1 **/
     25c:	6e c0       	rjmp	.+220    	; 0x33a <APP_start+0x120>
	{
		u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     25e:	88 e8       	ldi	r24, 0x88	; 136
     260:	93 e1       	ldi	r25, 0x13	; 19
     262:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMR2_getovs>
     266:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <u32_g_delay>
     26a:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <u32_g_delay+0x1>
     26e:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <u32_g_delay+0x2>
     272:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <u32_g_delay+0x3>

		TMR2_start() ; /** START TIMER 2 **/
     276:	0e 94 ca 08 	call	0x1194	; 0x1194 <TMR2_start>
		
		while (u32_g_tick < u32_g_delay)
     27a:	24 c0       	rjmp	.+72     	; 0x2c4 <APP_start+0xaa>
		{
			/** MOVE WITH 50% SPEED FOR 5 MIN **/
			MOTOR_turnon(MOTOR1_ID);
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
			TMR0_delaymicros(3200);
     294:	60 e8       	ldi	r22, 0x80	; 128
     296:	7c e0       	ldi	r23, 0x0C	; 12
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 43 08 	call	0x1086	; 0x1086 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
			TMR0_delaymicros(2300);
     2b8:	6c ef       	ldi	r22, 0xFC	; 252
     2ba:	78 e0       	ldi	r23, 0x08	; 8
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 43 08 	call	0x1086	; 0x1086 <TMR0_delaymicros>
	{
		u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

		TMR2_start() ; /** START TIMER 2 **/
		
		while (u32_g_tick < u32_g_delay)
     2c4:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
     2c8:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
     2cc:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
     2d0:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
     2d4:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <u32_g_delay>
     2d8:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <u32_g_delay+0x1>
     2dc:	a0 91 98 00 	lds	r26, 0x0098	; 0x800098 <u32_g_delay+0x2>
     2e0:	b0 91 99 00 	lds	r27, 0x0099	; 0x800099 <u32_g_delay+0x3>
     2e4:	48 17       	cp	r20, r24
     2e6:	59 07       	cpc	r21, r25
     2e8:	6a 07       	cpc	r22, r26
     2ea:	7b 07       	cpc	r23, r27
     2ec:	38 f2       	brcs	.-114    	; 0x27c <APP_start+0x62>
			MOTOR_turnoff(MOTOR3_ID);
			MOTOR_turnoff(MOTOR4_ID);
			TMR0_delaymicros(2300);
		}
		/** CONTINUE WITH 30% **/
		MOTOR_turnon(MOTOR1_ID);
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     300:	83 e0       	ldi	r24, 0x03	; 3
     302:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
		TMR0_delaymicros(1920);
     306:	60 e8       	ldi	r22, 0x80	; 128
     308:	77 e0       	ldi	r23, 0x07	; 7
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 43 08 	call	0x1086	; 0x1086 <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		TMR0_delaymicros(4480);
     32a:	60 e8       	ldi	r22, 0x80	; 128
     32c:	71 e1       	ldi	r23, 0x11	; 17
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 43 08 	call	0x1086	; 0x1086 <TMR0_delaymicros>
		
		US_sendtrigger(); /** SEND TRIGGER **/
     336:	0e 94 42 06 	call	0xc84	; 0xc84 <US_sendtrigger>
	US_sendtrigger(); /** SEND TRIGGER **/
		
	u8_g_distance = (u16_g_time/464) ; /** CALCULATE THE DISTANCE **/
	
	
	while((u16_g_time/464) > 70) /** CASE NUMBER 1 **/
     33a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <u16_g_time>
     33e:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <u16_g_time+0x1>
     342:	80 3b       	cpi	r24, 0xB0	; 176
     344:	90 48       	sbci	r25, 0x80	; 128
     346:	08 f0       	brcs	.+2      	; 0x34a <APP_start+0x130>
     348:	8a cf       	rjmp	.-236    	; 0x25e <APP_start+0x44>
		TMR0_delaymicros(4480);
		
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	
	TMR2_stop() ;
     34a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <TMR2_stop>
	
	while((u16_g_time/464) >= 30)
     34e:	26 c0       	rjmp	.+76     	; 0x39c <APP_start+0x182>
	{
		MOTOR_turnon(MOTOR1_ID);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     35c:	82 e0       	ldi	r24, 0x02	; 2
     35e:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
		TMR0_delaymicros(1920);
     368:	60 e8       	ldi	r22, 0x80	; 128
     36a:	77 e0       	ldi	r23, 0x07	; 7
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 43 08 	call	0x1086	; 0x1086 <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     380:	82 e0       	ldi	r24, 0x02	; 2
     382:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     386:	83 e0       	ldi	r24, 0x03	; 3
     388:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		TMR0_delaymicros(4480);
     38c:	60 e8       	ldi	r22, 0x80	; 128
     38e:	71 e1       	ldi	r23, 0x11	; 17
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 43 08 	call	0x1086	; 0x1086 <TMR0_delaymicros>
		US_sendtrigger(); /** SEND TRIGGER **/
     398:	0e 94 42 06 	call	0xc84	; 0xc84 <US_sendtrigger>
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	
	TMR2_stop() ;
	
	while((u16_g_time/464) >= 30)
     39c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <u16_g_time>
     3a0:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <u16_g_time+0x1>
     3a4:	80 36       	cpi	r24, 0x60	; 96
     3a6:	96 43       	sbci	r25, 0x36	; 54
     3a8:	98 f6       	brcc	.-90     	; 0x350 <APP_start+0x136>
		MOTOR_turnoff(MOTOR4_ID);
		TMR0_delaymicros(4480);
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	
	u32_g_tick = 0 ;
     3aa:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
     3ae:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <__data_end+0x1>
     3b2:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end+0x2>
     3b6:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x3>
	u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     3ba:	84 ef       	ldi	r24, 0xF4	; 244
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMR2_getovs>
     3c2:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <u32_g_delay>
     3c6:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <u32_g_delay+0x1>
     3ca:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <u32_g_delay+0x2>
     3ce:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <u32_g_delay+0x3>

	TMR2_start() ; /** START TIMER 2 **/
     3d2:	0e 94 ca 08 	call	0x1194	; 0x1194 <TMR2_start>
	
	while((u16_g_time/464) >= 20)
     3d6:	2a c0       	rjmp	.+84     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
	{
		/** STOP THEN ROTATE **/
		MOTOR_turnoff(MOTOR1_ID);
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     3e4:	82 e0       	ldi	r24, 0x02	; 2
     3e6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     3ea:	83 e0       	ldi	r24, 0x03	; 3
     3ec:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		
		while (u32_g_tick < u32_g_delay)
     3f0:	06 c0       	rjmp	.+12     	; 0x3fe <APP_start+0x1e4>
		{
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
		MOTOR_turnoff(MOTOR1_ID);
		MOTOR_turnoff(MOTOR2_ID);
		MOTOR_turnoff(MOTOR3_ID);
		MOTOR_turnoff(MOTOR4_ID);
		
		while (u32_g_tick < u32_g_delay)
     3fe:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
     402:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
     406:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
     40a:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
     40e:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <u32_g_delay>
     412:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <u32_g_delay+0x1>
     416:	a0 91 98 00 	lds	r26, 0x0098	; 0x800098 <u32_g_delay+0x2>
     41a:	b0 91 99 00 	lds	r27, 0x0099	; 0x800099 <u32_g_delay+0x3>
     41e:	48 17       	cp	r20, r24
     420:	59 07       	cpc	r21, r25
     422:	6a 07       	cpc	r22, r26
     424:	7b 07       	cpc	r23, r27
     426:	28 f3       	brcs	.-54     	; 0x3f2 <APP_start+0x1d8>
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		
		US_sendtrigger(); /** SEND TRIGGER **/
     428:	0e 94 42 06 	call	0xc84	; 0xc84 <US_sendtrigger>
	u32_g_tick = 0 ;
	u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

	TMR2_start() ; /** START TIMER 2 **/
	
	while((u16_g_time/464) >= 20)
     42c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <u16_g_time>
     430:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <u16_g_time+0x1>
     434:	80 34       	cpi	r24, 0x40	; 64
     436:	94 42       	sbci	r25, 0x24	; 36
     438:	78 f6       	brcc	.-98     	; 0x3d8 <APP_start+0x1be>
			MOTOR_turnon(MOTOR4_ID);
		}
		
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	TMR2_stop();
     43a:	0e 94 d5 08 	call	0x11aa	; 0x11aa <TMR2_stop>
	
	while((u16_g_time/464) < 20)
     43e:	77 c0       	rjmp	.+238    	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
	{
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 b6 05 	call	0xb6c	; 0xb6c <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR2_ID);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 b6 05 	call	0xb6c	; 0xb6c <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR3_ID);
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR4_ID);
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	0e 94 b6 05 	call	0xb6c	; 0xb6c <MOTOR_rotateanticlkdir>
		do 
		{
			/** GO BACKWARDS WITH 30% SPEED **/
			MOTOR_turnon(MOTOR1_ID);
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
			TMR0_delaymicros(1920);
     470:	60 e8       	ldi	r22, 0x80	; 128
     472:	77 e0       	ldi	r23, 0x07	; 7
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 43 08 	call	0x1086	; 0x1086 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     48e:	83 e0       	ldi	r24, 0x03	; 3
     490:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
			TMR0_delaymicros(4480);
     494:	60 e8       	ldi	r22, 0x80	; 128
     496:	71 e1       	ldi	r23, 0x11	; 17
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 43 08 	call	0x1086	; 0x1086 <TMR0_delaymicros>
			
		} while ((u16_g_time/464) > 20);
     4a0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <u16_g_time>
     4a4:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <u16_g_time+0x1>
     4a8:	80 31       	cpi	r24, 0x10	; 16
     4aa:	96 42       	sbci	r25, 0x26	; 38
     4ac:	a8 f6       	brcc	.-86     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
		
		/** STOP THEN ROTATE **/
		MOTOR_turnoff(MOTOR1_ID);
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <MOTOR_turnoff>
		
		u32_g_tick = 0 ;
     4c6:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
     4ca:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <__data_end+0x1>
     4ce:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__data_end+0x2>
     4d2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__data_end+0x3>
		u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     4d6:	84 ef       	ldi	r24, 0xF4	; 244
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <TMR2_getovs>
     4de:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <u32_g_delay>
     4e2:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <u32_g_delay+0x1>
     4e6:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <u32_g_delay+0x2>
     4ea:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <u32_g_delay+0x3>
		TMR2_start() ; /** START TIMER 2 **/
     4ee:	0e 94 ca 08 	call	0x1194	; 0x1194 <TMR2_start>
		while (u32_g_tick < u32_g_delay)
     4f2:	06 c0       	rjmp	.+12     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
		{
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
     4f4:	82 e0       	ldi	r24, 0x02	; 2
     4f6:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	0e 94 16 06 	call	0xc2c	; 0xc2c <MOTOR_turnon>
		MOTOR_turnoff(MOTOR4_ID);
		
		u32_g_tick = 0 ;
		u32_g_delay =  TMR2_getovs(500) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
		TMR2_start() ; /** START TIMER 2 **/
		while (u32_g_tick < u32_g_delay)
     500:	40 91 92 00 	lds	r20, 0x0092	; 0x800092 <__data_end>
     504:	50 91 93 00 	lds	r21, 0x0093	; 0x800093 <__data_end+0x1>
     508:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__data_end+0x2>
     50c:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__data_end+0x3>
     510:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <u32_g_delay>
     514:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <u32_g_delay+0x1>
     518:	a0 91 98 00 	lds	r26, 0x0098	; 0x800098 <u32_g_delay+0x2>
     51c:	b0 91 99 00 	lds	r27, 0x0099	; 0x800099 <u32_g_delay+0x3>
     520:	48 17       	cp	r20, r24
     522:	59 07       	cpc	r21, r25
     524:	6a 07       	cpc	r22, r26
     526:	7b 07       	cpc	r23, r27
     528:	28 f3       	brcs	.-54     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		
		US_sendtrigger(); /** SEND TRIGGER **/
     52a:	0e 94 42 06 	call	0xc84	; 0xc84 <US_sendtrigger>
		
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	TMR2_stop();
	
	while((u16_g_time/464) < 20)
     52e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <u16_g_time>
     532:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <u16_g_time+0x1>
     536:	80 34       	cpi	r24, 0x40	; 64
     538:	94 42       	sbci	r25, 0x24	; 36
     53a:	08 f4       	brcc	.+2      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
     53c:	81 cf       	rjmp	.-254    	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			MOTOR_turnon(MOTOR4_ID);
		}
		
		US_sendtrigger(); /** SEND TRIGGER **/
	}
}
     53e:	08 95       	ret

00000540 <__vector_1>:


/** EXTI0 **/
ISR(INT0_vect)
{
     540:	1f 92       	push	r1
     542:	0f 92       	push	r0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	0f 92       	push	r0
     548:	11 24       	eor	r1, r1
     54a:	2f 93       	push	r18
     54c:	3f 93       	push	r19
     54e:	4f 93       	push	r20
     550:	5f 93       	push	r21
     552:	6f 93       	push	r22
     554:	7f 93       	push	r23
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
     55a:	af 93       	push	r26
     55c:	bf 93       	push	r27
     55e:	ef 93       	push	r30
     560:	ff 93       	push	r31
	u8_echoedge++ ; /** INCREASE THE ECHO BY 1 **/
     562:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <u8_echoedge>
     566:	8f 5f       	subi	r24, 0xFF	; 255
     568:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <u8_echoedge>
	
	if(u8_echoedge == 1) /** FIRST CHANGE (RISING EDGE) **/
     56c:	81 30       	cpi	r24, 0x01	; 1
     56e:	19 f4       	brne	.+6      	; 0x576 <__vector_1+0x36>
	{
		ICU_start(); /** START ICU / COUNTING **/
     570:	0e 94 48 03 	call	0x690	; 0x690 <ICU_start>
     574:	10 c0       	rjmp	.+32     	; 0x596 <__vector_1+0x56>
	}
	
	else if(u8_echoedge == 2) /** SECOND CHANGE (FALLING EDGE) **/
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	71 f4       	brne	.+28     	; 0x596 <__vector_1+0x56>
	{
		ICU_stop(); /** STOP ICU / COUNTING **/
     57a:	0e 94 4e 03 	call	0x69c	; 0x69c <ICU_stop>
		
		u16_g_time = ICU_getvalue(); /** GET PULSE LENGTH **/
     57e:	0e 94 36 03 	call	0x66c	; 0x66c <ICU_getvalue>
     582:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <u16_g_time+0x1>
     586:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <u16_g_time>
		
		ICU_setcounterval(0); /** START COUNTING FROM ZERO **/
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 4b 03 	call	0x696	; 0x696 <ICU_setcounterval>
				
		u8_echoedge = 0 ; /** REINITIALIZE ECHO EDGE TO 0 TO REPEAT IN ANY CHANGE AGAIN **/
     592:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <u8_echoedge>
	}
}
     596:	ff 91       	pop	r31
     598:	ef 91       	pop	r30
     59a:	bf 91       	pop	r27
     59c:	af 91       	pop	r26
     59e:	9f 91       	pop	r25
     5a0:	8f 91       	pop	r24
     5a2:	7f 91       	pop	r23
     5a4:	6f 91       	pop	r22
     5a6:	5f 91       	pop	r21
     5a8:	4f 91       	pop	r20
     5aa:	3f 91       	pop	r19
     5ac:	2f 91       	pop	r18
     5ae:	0f 90       	pop	r0
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	0f 90       	pop	r0
     5b4:	1f 90       	pop	r1
     5b6:	18 95       	reti

000005b8 <__vector_9>:

/** TIMER 1 OVERFLOW **/
ISR(TIMER1_OVF_vect)
{
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	0f 92       	push	r0
     5c0:	11 24       	eor	r1, r1
	/** DO NOTHING **/
}
     5c2:	0f 90       	pop	r0
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	0f 90       	pop	r0
     5c8:	1f 90       	pop	r1
     5ca:	18 95       	reti

000005cc <__vector_5>:

/** TIMER 0 OVERFLOW **/
ISR(TIMER2_OVF_vect)
{
     5cc:	1f 92       	push	r1
     5ce:	0f 92       	push	r0
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	0f 92       	push	r0
     5d4:	11 24       	eor	r1, r1
     5d6:	8f 93       	push	r24
     5d8:	9f 93       	push	r25
     5da:	af 93       	push	r26
     5dc:	bf 93       	push	r27
	u32_g_tick++ ; /** INCREASE TICKS  **/
     5de:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
     5e2:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <__data_end+0x1>
     5e6:	a0 91 94 00 	lds	r26, 0x0094	; 0x800094 <__data_end+0x2>
     5ea:	b0 91 95 00 	lds	r27, 0x0095	; 0x800095 <__data_end+0x3>
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	a1 1d       	adc	r26, r1
     5f2:	b1 1d       	adc	r27, r1
     5f4:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
     5f8:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0x1>
     5fc:	a0 93 94 00 	sts	0x0094, r26	; 0x800094 <__data_end+0x2>
     600:	b0 93 95 00 	sts	0x0095, r27	; 0x800095 <__data_end+0x3>
}
     604:	bf 91       	pop	r27
     606:	af 91       	pop	r26
     608:	9f 91       	pop	r25
     60a:	8f 91       	pop	r24
     60c:	0f 90       	pop	r0
     60e:	0f be       	out	0x3f, r0	; 63
     610:	0f 90       	pop	r0
     612:	1f 90       	pop	r1
     614:	18 95       	reti

00000616 <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(void)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(BUTTON1_PORT , BUTTON1_PIN , DIO_PIN_INPUT);
     616:	40 e0       	ldi	r20, 0x00	; 0
     618:	63 e0       	ldi	r22, 0x03	; 3
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
     620:	08 95       	ret

00000622 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
en_a_button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	1f 92       	push	r1
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	8a 01       	movw	r16, r20
	en_a_button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
     632:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
     634:	ae 01       	movw	r20, r28
     636:	4f 5f       	subi	r20, 0xFF	; 255
     638:	5f 4f       	sbci	r21, 0xFF	; 255
     63a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_readpin>
	
	if (!pin_status) 
     63e:	81 11       	cpse	r24, r1
     640:	05 c0       	rjmp	.+10     	; 0x64c <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	f8 01       	movw	r30, r16
     646:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	04 c0       	rjmp	.+8      	; 0x654 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	f8 01       	movw	r30, r16
     650:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     652:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
     654:	0f 90       	pop	r0
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret

00000660 <ICU_init>:
/**************************************************************/
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	TMR1_init(); /** INITIALIZE TIMER 1 MODULE **/
     660:	0e 94 77 08 	call	0x10ee	; 0x10ee <TMR1_init>
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
     664:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	08 95       	ret

0000066c <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	00 d0       	rcall	.+0      	; 0x672 <ICU_getvalue+0x6>
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
     676:	1a 82       	std	Y+2, r1	; 0x02
     678:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
     67a:	ce 01       	movw	r24, r28
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	0e 94 aa 08 	call	0x1154	; 0x1154 <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
     682:	89 81       	ldd	r24, Y+1	; 0x01
     684:	9a 81       	ldd	r25, Y+2	; 0x02
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <ICU_start>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_start(void)
{
	TMR1_start(); /** START TIMER1 COUNTING **/
     690:	0e 94 92 08 	call	0x1124	; 0x1124 <TMR1_start>
     694:	08 95       	ret

00000696 <ICU_setcounterval>:
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_setcounterval(uint16t u16_a_counterval)
{
	TMR1_setcounterval(u16_a_counterval);
     696:	0e 94 b0 08 	call	0x1160	; 0x1160 <TMR1_setcounterval>
     69a:	08 95       	ret

0000069c <ICU_stop>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_stop(void)
{
	TMR1_stop();  /** STOP TIMER1 COUNTING **/
     69c:	0e 94 9f 08 	call	0x113e	; 0x113e <TMR1_stop>
     6a0:	08 95       	ret

000006a2 <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	65 e0       	ldi	r22, 0x05	; 5
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	66 e0       	ldi	r22, 0x06	; 6
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
     6b6:	41 e0       	ldi	r20, 0x01	; 1
     6b8:	67 e0       	ldi	r22, 0x07	; 7
     6ba:	83 e0       	ldi	r24, 0x03	; 3
     6bc:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>

	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	60 e0       	ldi	r22, 0x00	; 0
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	83 e0       	ldi	r24, 0x03	; 3
     6d0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	64 e0       	ldi	r22, 0x04	; 4
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
	DIO_setpinvalue(ROW_PORT_DATA , R3 ,  DIO_PIN_LOW);


    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
     6de:	41 e0       	ldi	r20, 0x01	; 1
     6e0:	65 e0       	ldi	r22, 0x05	; 5
     6e2:	83 e0       	ldi	r24, 0x03	; 3
     6e4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
     6e8:	41 e0       	ldi	r20, 0x01	; 1
     6ea:	66 e0       	ldi	r22, 0x06	; 6
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
     6f2:	41 e0       	ldi	r20, 0x01	; 1
     6f4:	67 e0       	ldi	r22, 0x07	; 7
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
     6fc:	41 e0       	ldi	r20, 0x01	; 1
     6fe:	60 e0       	ldi	r22, 0x00	; 0
     700:	83 e0       	ldi	r24, 0x03	; 3
     702:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	83 e0       	ldi	r24, 0x03	; 3
     70c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	64 e0       	ldi	r22, 0x04	; 4
     714:	83 e0       	ldi	r24, 0x03	; 3
     716:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	08 95       	ret

0000071e <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     71e:	ef 92       	push	r14
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <KEYPAD_read+0xe>
     72c:	00 d0       	rcall	.+0      	; 0x72e <KEYPAD_read+0x10>
     72e:	00 d0       	rcall	.+0      	; 0x730 <KEYPAD_read+0x12>
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
     736:	85 e0       	ldi	r24, 0x05	; 5
     738:	89 83       	std	Y+1, r24	; 0x01
     73a:	86 e0       	ldi	r24, 0x06	; 6
     73c:	8a 83       	std	Y+2, r24	; 0x02
     73e:	87 e0       	ldi	r24, 0x07	; 7
     740:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
     742:	1c 82       	std	Y+4, r1	; 0x04
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	8d 83       	std	Y+5, r24	; 0x05
     748:	84 e0       	ldi	r24, 0x04	; 4
     74a:	8e 83       	std	Y+6, r24	; 0x06

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     74c:	00 e0       	ldi	r16, 0x00	; 0
     74e:	79 c0       	rjmp	.+242    	; 0x842 <__DATA_REGION_LENGTH__+0x42>
    {
		if (u8_a_rowiterator == 3 )
     750:	03 30       	cpi	r16, 0x03	; 3
     752:	39 f4       	brne	.+14     	; 0x762 <KEYPAD_read+0x44>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	83 e0       	ldi	r24, 0x03	; 3
     75a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     75e:	10 e0       	ldi	r17, 0x00	; 0
     760:	62 c0       	rjmp	.+196    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
		}
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
     762:	e1 e0       	ldi	r30, 0x01	; 1
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	ec 0f       	add	r30, r28
     768:	fd 1f       	adc	r31, r29
     76a:	e0 0f       	add	r30, r16
     76c:	f1 1d       	adc	r31, r1
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	60 81       	ld	r22, Z
     772:	83 e0       	ldi	r24, 0x03	; 3
     774:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
     778:	f2 cf       	rjmp	.-28     	; 0x75e <KEYPAD_read+0x40>
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
     77a:	e4 e0       	ldi	r30, 0x04	; 4
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	ec 0f       	add	r30, r28
     780:	fd 1f       	adc	r31, r29
     782:	e1 0f       	add	r30, r17
     784:	f1 1d       	adc	r31, r1
     786:	a7 01       	movw	r20, r14
     788:	60 81       	ld	r22, Z
     78a:	83 e0       	ldi	r24, 0x03	; 3
     78c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
     790:	f7 01       	movw	r30, r14
     792:	80 81       	ld	r24, Z
     794:	81 11       	cpse	r24, r1
     796:	46 c0       	rjmp	.+140    	; 0x824 <__DATA_REGION_LENGTH__+0x24>
            {
                if (u8_a_rowiterator == 0)
     798:	01 11       	cpse	r16, r1
     79a:	11 c0       	rjmp	.+34     	; 0x7be <KEYPAD_read+0xa0>
                {
                    if (u8_a_coulumniterator == 0)
     79c:	11 11       	cpse	r17, r1
     79e:	03 c0       	rjmp	.+6      	; 0x7a6 <KEYPAD_read+0x88>
                    {
                        *u8_a_value = '1' ;
     7a0:	81 e3       	ldi	r24, 0x31	; 49
     7a2:	80 83       	st	Z, r24
     7a4:	33 c0       	rjmp	.+102    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    }
                    else if (u8_a_coulumniterator == 1)
     7a6:	11 30       	cpi	r17, 0x01	; 1
     7a8:	21 f4       	brne	.+8      	; 0x7b2 <KEYPAD_read+0x94>
                    {
                        *u8_a_value = '2' ;
     7aa:	82 e3       	ldi	r24, 0x32	; 50
     7ac:	f7 01       	movw	r30, r14
     7ae:	80 83       	st	Z, r24
     7b0:	2d c0       	rjmp	.+90     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    }
                    else if (u8_a_coulumniterator == 2)
     7b2:	12 30       	cpi	r17, 0x02	; 2
     7b4:	59 f5       	brne	.+86     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    {
                        *u8_a_value = '3' ;
     7b6:	83 e3       	ldi	r24, 0x33	; 51
     7b8:	f7 01       	movw	r30, r14
     7ba:	80 83       	st	Z, r24
     7bc:	27 c0       	rjmp	.+78     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    }
                }

                else if (u8_a_rowiterator == 1)
     7be:	01 30       	cpi	r16, 0x01	; 1
     7c0:	91 f4       	brne	.+36     	; 0x7e6 <KEYPAD_read+0xc8>
                {
                    if (u8_a_coulumniterator == 0)
     7c2:	11 11       	cpse	r17, r1
     7c4:	04 c0       	rjmp	.+8      	; 0x7ce <KEYPAD_read+0xb0>
                    {
                        *u8_a_value = '4' ;
     7c6:	84 e3       	ldi	r24, 0x34	; 52
     7c8:	f7 01       	movw	r30, r14
     7ca:	80 83       	st	Z, r24
     7cc:	1f c0       	rjmp	.+62     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    }
                    else if (u8_a_coulumniterator == 1)
     7ce:	11 30       	cpi	r17, 0x01	; 1
     7d0:	21 f4       	brne	.+8      	; 0x7da <KEYPAD_read+0xbc>
                    {
                        *u8_a_value = '5' ;
     7d2:	85 e3       	ldi	r24, 0x35	; 53
     7d4:	f7 01       	movw	r30, r14
     7d6:	80 83       	st	Z, r24
     7d8:	19 c0       	rjmp	.+50     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    }
                    else if (u8_a_coulumniterator == 2)
     7da:	12 30       	cpi	r17, 0x02	; 2
     7dc:	b9 f4       	brne	.+46     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    {
                        *u8_a_value = '6' ;
     7de:	86 e3       	ldi	r24, 0x36	; 54
     7e0:	f7 01       	movw	r30, r14
     7e2:	80 83       	st	Z, r24
     7e4:	13 c0       	rjmp	.+38     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    }
                }

                else if (u8_a_rowiterator == 2)
     7e6:	02 30       	cpi	r16, 0x02	; 2
     7e8:	89 f4       	brne	.+34     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                {
                    if (u8_a_coulumniterator == 0)
     7ea:	11 11       	cpse	r17, r1
     7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <KEYPAD_read+0xd8>
                    {
                        *u8_a_value = '7' ;
     7ee:	87 e3       	ldi	r24, 0x37	; 55
     7f0:	f7 01       	movw	r30, r14
     7f2:	80 83       	st	Z, r24
     7f4:	0b c0       	rjmp	.+22     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    }
                    else if (u8_a_coulumniterator == 1)
     7f6:	11 30       	cpi	r17, 0x01	; 1
     7f8:	21 f4       	brne	.+8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
                    {
                        *u8_a_value = '8' ;
     7fa:	88 e3       	ldi	r24, 0x38	; 56
     7fc:	f7 01       	movw	r30, r14
     7fe:	80 83       	st	Z, r24
     800:	05 c0       	rjmp	.+10     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    }
                    else if (u8_a_coulumniterator == 2)
     802:	12 30       	cpi	r17, 0x02	; 2
     804:	19 f4       	brne	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
                    {
                        *u8_a_value = '9' ;
     806:	89 e3       	ldi	r24, 0x39	; 57
     808:	f7 01       	movw	r30, r14
     80a:	80 83       	st	Z, r24
                    }
                }
				
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     80c:	e1 e0       	ldi	r30, 0x01	; 1
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	ec 0f       	add	r30, r28
     812:	fd 1f       	adc	r31, r29
     814:	e0 0f       	add	r30, r16
     816:	f1 1d       	adc	r31, r1
     818:	60 81       	ld	r22, Z
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_togglepin>
				return KEYPAD_readSuccess;
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	13 c0       	rjmp	.+38     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     824:	1f 5f       	subi	r17, 0xFF	; 255
     826:	13 30       	cpi	r17, 0x03	; 3
     828:	08 f4       	brcc	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     82a:	a7 cf       	rjmp	.-178    	; 0x77a <KEYPAD_read+0x5c>
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
				return KEYPAD_readSuccess;
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     82c:	e1 e0       	ldi	r30, 0x01	; 1
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	ec 0f       	add	r30, r28
     832:	fd 1f       	adc	r31, r29
     834:	e0 0f       	add	r30, r16
     836:	f1 1d       	adc	r31, r1
     838:	60 81       	ld	r22, Z
     83a:	83 e0       	ldi	r24, 0x03	; 3
     83c:	0e 94 96 07 	call	0xf2c	; 0xf2c <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     840:	0f 5f       	subi	r16, 0xFF	; 255
     842:	03 30       	cpi	r16, 0x03	; 3
     844:	08 f4       	brcc	.+2      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
     846:	84 cf       	rjmp	.-248    	; 0x750 <KEYPAD_read+0x32>
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
    }
    return KEYPAD_readFail;
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	26 96       	adiw	r28, 0x06	; 6
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	08 95       	ret

00000864 <LCD_sendcmd>:
/** FUNCTION TO SEND COMMAND TO LCD                       */
/** ARGUMENTS   : COMMAND                                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_sendcmd(uint8_t u8_a_cmd)
{
     864:	cf 93       	push	r28
     866:	c8 2f       	mov	r28, r24
	TMR0_init();
     868:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TMR0_init>
		DIO_setpinvalue(LCD_8BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
		TMR0_delayms(5); /** LOW **/
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);  /** COMMAND MODE       **/
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);  /** WRITE TO LCD MODE  **/
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	62 e0       	ldi	r22, 0x02	; 2
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);   /** PREPARE FOR LATCH  **/
     880:	40 e0       	ldi	r20, 0x00	; 0
     882:	63 e0       	ldi	r22, 0x03	; 3
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		
		PORTA = ((u8_a_cmd & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB(HIGH NIBBLE) **/
     88a:	8b b3       	in	r24, 0x1b	; 27
     88c:	9c 2f       	mov	r25, r28
     88e:	90 7f       	andi	r25, 0xF0	; 240
     890:	8f 70       	andi	r24, 0x0F	; 15
     892:	89 2b       	or	r24, r25
     894:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     896:	41 e0       	ldi	r20, 0x01	; 1
     898:	63 e0       	ldi	r22, 0x03	; 3
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		TMR0_delayms(1);
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	63 e0       	ldi	r22, 0x03	; 3
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		
		
		PORTA = (((u8_a_cmd << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB(LOW NIBBLE) **/
     8b6:	20 e1       	ldi	r18, 0x10	; 16
     8b8:	c2 9f       	mul	r28, r18
     8ba:	c0 01       	movw	r24, r0
     8bc:	11 24       	eor	r1, r1
     8be:	9b b3       	in	r25, 0x1b	; 27
     8c0:	9f 70       	andi	r25, 0x0F	; 15
     8c2:	89 2b       	or	r24, r25
     8c4:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     8c6:	41 e0       	ldi	r20, 0x01	; 1
     8c8:	63 e0       	ldi	r22, 0x03	; 3
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		TMR0_delayms(1);
     8d0:	61 e0       	ldi	r22, 0x01	; 1
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** LATCH **/
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	63 e0       	ldi	r22, 0x03	; 3
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		
		TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT COMMAND **/
     8e6:	65 e0       	ldi	r22, 0x05	; 5
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>
		
		#endif
}
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <LCD_init>:
/**********************************************************/
LCD_status LCD_init(void)
{
	LCD_status en_a_lcdinitstatus = VALID__LCD_INIT ; /** VARIABLE TO OLD THE RETURN STATUS OF THE FUNCTION **/
	
	TMR0_init();
     8f6:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <TMR0_init>
		LCD_sendcmd(LCD_CLEAR);       /** CLEAR THE LCD                                    **/
		
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT); /** SET RS PIN AS OUTPUT PIN **/
     8fa:	41 e0       	ldi	r20, 0x01	; 1
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT); /** SET RW PIN AS OUTPUT PIN **/
     904:	41 e0       	ldi	r20, 0x01	; 1
     906:	62 e0       	ldi	r22, 0x02	; 2
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);  /** SET E PIN AS OUTPUT PIN  **/
     90e:	41 e0       	ldi	r20, 0x01	; 1
     910:	63 e0       	ldi	r22, 0x03	; 3
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D4_PIN , DIO_PIN_OUTPUT); /** 4 DATA PINS AS OUTPUT **/
     918:	41 e0       	ldi	r20, 0x01	; 1
     91a:	64 e0       	ldi	r22, 0x04	; 4
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D5_PIN , DIO_PIN_OUTPUT);
     922:	41 e0       	ldi	r20, 0x01	; 1
     924:	65 e0       	ldi	r22, 0x05	; 5
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D6_PIN , DIO_PIN_OUTPUT);
     92c:	41 e0       	ldi	r20, 0x01	; 1
     92e:	66 e0       	ldi	r22, 0x06	; 6
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D7_PIN , DIO_PIN_OUTPUT);
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	67 e0       	ldi	r22, 0x07	; 7
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		
		TMR0_delayms(20); /** DELAY FOR LCD TO BE INITIALIZED **/
     940:	64 e1       	ldi	r22, 0x14	; 20
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>
		
		/** SEND SOME COMMANDS TO THE LCD FOR INITIAL SET   **/
		
		LCD_sendcmd(LCD_4BIT_MODE_CMD1); /** SEND THREE COMMANDS FOR LCD TO SET 4 BIT OPERATION MODE ( 2 LINES , 5*8 MATRIX ) **/
     94c:	83 e3       	ldi	r24, 0x33	; 51
     94e:	0e 94 32 04 	call	0x864	; 0x864 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD2);
     952:	82 e3       	ldi	r24, 0x32	; 50
     954:	0e 94 32 04 	call	0x864	; 0x864 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD3);
     958:	88 e2       	ldi	r24, 0x28	; 40
     95a:	0e 94 32 04 	call	0x864	; 0x864 <LCD_sendcmd>
		
		LCD_sendcmd(LCD_CURSOR_OFF);     /** NO NEED FOR CURSOR SO IT IS OFF                  **/
     95e:	8c e0       	ldi	r24, 0x0C	; 12
     960:	0e 94 32 04 	call	0x864	; 0x864 <LCD_sendcmd>
		LCD_sendcmd(LCD_CURSOR_INC);     /** DIRECTION OF WRITING FROM LEFT TO RIGHT          **/
     964:	86 e0       	ldi	r24, 0x06	; 6
     966:	0e 94 32 04 	call	0x864	; 0x864 <LCD_sendcmd>
		LCD_sendcmd(LCD_RETURN_HOME);    /** CURSOR STARTS FROM ITS HOME POSITION             **/
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	0e 94 32 04 	call	0x864	; 0x864 <LCD_sendcmd>
		LCD_sendcmd(LCD_CLEAR);          /** CLEAR THE LCD                                    **/
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	0e 94 32 04 	call	0x864	; 0x864 <LCD_sendcmd>
		
		#endif 
		
}
     976:	08 95       	ret

00000978 <LCD_writechar>:
/** FUNCTION TO DISPLAY CHARACTER ON LCD                  */
/** ARGUMENTS   : CHARACTER                               */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writechar(uint8_t u8_a_chr)
{
     978:	cf 93       	push	r28
     97a:	c8 2f       	mov	r28, r24
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
	
	#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);  /** DATA MODE         **/
     97c:	41 e0       	ldi	r20, 0x01	; 1
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);   /** WRITE TO LCD MODE **/
     986:	40 e0       	ldi	r20, 0x00	; 0
     988:	62 e0       	ldi	r22, 0x02	; 2
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** DATA MODE         **/
     990:	40 e0       	ldi	r20, 0x00	; 0
     992:	63 e0       	ldi	r22, 0x03	; 3
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	
	
	PORTA = ((u8_a_chr & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB (HIGH NIBBLE) **/
     99a:	8b b3       	in	r24, 0x1b	; 27
     99c:	9c 2f       	mov	r25, r28
     99e:	90 7f       	andi	r25, 0xF0	; 240
     9a0:	8f 70       	andi	r24, 0x0F	; 15
     9a2:	89 2b       	or	r24, r25
     9a4:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     9a6:	41 e0       	ldi	r20, 0x01	; 1
     9a8:	63 e0       	ldi	r22, 0x03	; 3
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	TMR0_delayms(1);
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW); /** LATCH **/
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	63 e0       	ldi	r22, 0x03	; 3
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		
	PORTA = (((u8_a_chr << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB (LOW NIBBLE) **/
     9c6:	20 e1       	ldi	r18, 0x10	; 16
     9c8:	c2 9f       	mul	r28, r18
     9ca:	c0 01       	movw	r24, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	9b b3       	in	r25, 0x1b	; 27
     9d0:	9f 70       	andi	r25, 0x0F	; 15
     9d2:	89 2b       	or	r24, r25
     9d4:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     9d6:	41 e0       	ldi	r20, 0x01	; 1
     9d8:	63 e0       	ldi	r22, 0x03	; 3
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	TMR0_delayms(1);
     9e0:	61 e0       	ldi	r22, 0x01	; 1
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	63 e0       	ldi	r22, 0x03	; 3
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
     9f6:	65 e0       	ldi	r22, 0x05	; 5
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 07 08 	call	0x100e	; 0x100e <TMR0_delayms>
	
	#endif
}
     a02:	cf 91       	pop	r28
     a04:	08 95       	ret

00000a06 <LCD_writestr>:
/** FUNCTION TO DISPLAY STRING ON LCD                     */
/** ARGUMENTS   : STRING                                  */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	8c 01       	movw	r16, r24
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
     a0e:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
     a10:	03 c0       	rjmp	.+6      	; 0xa18 <LCD_writestr+0x12>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
     a12:	0e 94 bc 04 	call	0x978	; 0x978 <LCD_writechar>
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
     a16:	cf 5f       	subi	r28, 0xFF	; 255
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
     a18:	f8 01       	movw	r30, r16
     a1a:	ec 0f       	add	r30, r28
     a1c:	f1 1d       	adc	r31, r1
     a1e:	80 81       	ld	r24, Z
     a20:	81 11       	cpse	r24, r1
     a22:	f7 cf       	rjmp	.-18     	; 0xa12 <LCD_writestr+0xc>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
	}
}
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	08 95       	ret

00000a2c <LCD_goto>:
/** FUNCTION TO JUMP TO SPECIFIC POSITION ON LCD          */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status  LCD_goto(uint8_t u8_a_row , uint8_t u8_a_column)
{
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	00 d0       	rcall	.+0      	; 0xa32 <LCD_goto+0x6>
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
	uint8_t positions[2] = {0x80 , 0xC0}; /** POSITIONS OF 1st & 2nd ROWS **/
     a36:	90 e8       	ldi	r25, 0x80	; 128
     a38:	99 83       	std	Y+1, r25	; 0x01
     a3a:	90 ec       	ldi	r25, 0xC0	; 192
     a3c:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_sendcmd(positions[u8_a_row] + u8_a_column); /** GO TO SPECIFIC MATRIX **/
     a3e:	e1 e0       	ldi	r30, 0x01	; 1
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	ec 0f       	add	r30, r28
     a44:	fd 1f       	adc	r31, r29
     a46:	e8 0f       	add	r30, r24
     a48:	f1 1d       	adc	r31, r1
     a4a:	80 81       	ld	r24, Z
     a4c:	86 0f       	add	r24, r22
     a4e:	0e 94 32 04 	call	0x864	; 0x864 <LCD_sendcmd>
}
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <MOTOR_init>:
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
	
	switch(u8_a_motorid)
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	b9 f0       	breq	.+46     	; 0xa8e <MOTOR_init+0x32>
     a60:	28 f0       	brcs	.+10     	; 0xa6c <MOTOR_init+0x10>
     a62:	82 30       	cpi	r24, 0x02	; 2
     a64:	29 f1       	breq	.+74     	; 0xab0 <MOTOR_init+0x54>
     a66:	83 30       	cpi	r24, 0x03	; 3
     a68:	a1 f1       	breq	.+104    	; 0xad2 <MOTOR_init+0x76>
     a6a:	44 c0       	rjmp	.+136    	; 0xaf4 <MOTOR_init+0x98>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
     a6c:	41 e0       	ldi	r20, 0x01	; 1
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
     a76:	41 e0       	ldi	r20, 0x01	; 1
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
     a80:	41 e0       	ldi	r20, 0x01	; 1
     a82:	62 e0       	ldi	r22, 0x02	; 2
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     a8a:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
		break;
     a8c:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
     a8e:	41 e0       	ldi	r20, 0x01	; 1
     a90:	63 e0       	ldi	r22, 0x03	; 3
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
     a98:	41 e0       	ldi	r20, 0x01	; 1
     a9a:	64 e0       	ldi	r22, 0x04	; 4
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     aa2:	41 e0       	ldi	r20, 0x01	; 1
     aa4:	65 e0       	ldi	r22, 0x05	; 5
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     aac:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     aae:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
     ab0:	41 e0       	ldi	r20, 0x01	; 1
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
     aba:	41 e0       	ldi	r20, 0x01	; 1
     abc:	61 e0       	ldi	r22, 0x01	; 1
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     ac4:	41 e0       	ldi	r20, 0x01	; 1
     ac6:	62 e0       	ldi	r22, 0x02	; 2
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     ace:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     ad0:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
     ad2:	41 e0       	ldi	r20, 0x01	; 1
     ad4:	63 e0       	ldi	r22, 0x03	; 3
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	64 e0       	ldi	r22, 0x04	; 4
     ae0:	82 e0       	ldi	r24, 0x02	; 2
     ae2:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     ae6:	41 e0       	ldi	r20, 0x01	; 1
     ae8:	65 e0       	ldi	r22, 0x05	; 5
     aea:	82 e0       	ldi	r24, 0x02	; 2
     aec:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     af0:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     af2:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_initstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     af4:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_initstatus ; /** RETURN THE FINAL STATUS **/
}
     af6:	08 95       	ret

00000af8 <MOTOR_rotateclkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	91 f0       	breq	.+36     	; 0xb20 <MOTOR_rotateclkdir+0x28>
     afc:	28 f0       	brcs	.+10     	; 0xb08 <MOTOR_rotateclkdir+0x10>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	d9 f0       	breq	.+54     	; 0xb38 <MOTOR_rotateclkdir+0x40>
     b02:	83 30       	cpi	r24, 0x03	; 3
     b04:	29 f1       	breq	.+74     	; 0xb50 <MOTOR_rotateclkdir+0x58>
     b06:	30 c0       	rjmp	.+96     	; 0xb68 <MOTOR_rotateclkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     b1c:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     b1e:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     b20:	41 e0       	ldi	r20, 0x01	; 1
     b22:	63 e0       	ldi	r22, 0x03	; 3
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	64 e0       	ldi	r22, 0x04	; 4
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     b34:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     b36:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     b38:	41 e0       	ldi	r20, 0x01	; 1
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	82 e0       	ldi	r24, 0x02	; 2
     b48:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     b4c:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     b4e:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     b50:	41 e0       	ldi	r20, 0x01	; 1
     b52:	63 e0       	ldi	r22, 0x03	; 3
     b54:	82 e0       	ldi	r24, 0x02	; 2
     b56:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	64 e0       	ldi	r22, 0x04	; 4
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     b64:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     b66:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motordirectionstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     b68:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motordirectionstatus ; /** RETURN THE FINAL STATUS **/
}
     b6a:	08 95       	ret

00000b6c <MOTOR_rotateanticlkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     b6c:	81 30       	cpi	r24, 0x01	; 1
     b6e:	91 f0       	breq	.+36     	; 0xb94 <MOTOR_rotateanticlkdir+0x28>
     b70:	28 f0       	brcs	.+10     	; 0xb7c <MOTOR_rotateanticlkdir+0x10>
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	d9 f0       	breq	.+54     	; 0xbac <MOTOR_rotateanticlkdir+0x40>
     b76:	83 30       	cpi	r24, 0x03	; 3
     b78:	29 f1       	breq	.+74     	; 0xbc4 <MOTOR_rotateanticlkdir+0x58>
     b7a:	30 c0       	rjmp	.+96     	; 0xbdc <MOTOR_rotateanticlkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     b86:	41 e0       	ldi	r20, 0x01	; 1
     b88:	61 e0       	ldi	r22, 0x01	; 1
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     b90:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     b92:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	63 e0       	ldi	r22, 0x03	; 3
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	64 e0       	ldi	r22, 0x04	; 4
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ba8:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     baa:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     bb6:	41 e0       	ldi	r20, 0x01	; 1
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     bc0:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     bc2:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	63 e0       	ldi	r22, 0x03	; 3
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     bce:	41 e0       	ldi	r20, 0x01	; 1
     bd0:	64 e0       	ldi	r22, 0x04	; 4
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     bd8:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     bda:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motorrotatestatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     bdc:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
     bde:	08 95       	ret

00000be0 <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	69 f0       	breq	.+26     	; 0xbfe <MOTOR_turnoff+0x1e>
     be4:	28 f0       	brcs	.+10     	; 0xbf0 <MOTOR_turnoff+0x10>
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	89 f0       	breq	.+34     	; 0xc0c <MOTOR_turnoff+0x2c>
     bea:	83 30       	cpi	r24, 0x03	; 3
     bec:	b1 f0       	breq	.+44     	; 0xc1a <MOTOR_turnoff+0x3a>
     bee:	1c c0       	rjmp	.+56     	; 0xc28 <MOTOR_turnoff+0x48>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	62 e0       	ldi	r22, 0x02	; 2
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     bfa:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     bfc:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	65 e0       	ldi	r22, 0x05	; 5
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c08:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     c0a:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	62 e0       	ldi	r22, 0x02	; 2
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c16:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     c18:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	65 e0       	ldi	r22, 0x05	; 5
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c24:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     c26:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     c28:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     c2a:	08 95       	ret

00000c2c <MOTOR_turnon>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     c2c:	81 30       	cpi	r24, 0x01	; 1
     c2e:	69 f0       	breq	.+26     	; 0xc4a <MOTOR_turnon+0x1e>
     c30:	28 f0       	brcs	.+10     	; 0xc3c <MOTOR_turnon+0x10>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	89 f0       	breq	.+34     	; 0xc58 <MOTOR_turnon+0x2c>
     c36:	83 30       	cpi	r24, 0x03	; 3
     c38:	b1 f0       	breq	.+44     	; 0xc66 <MOTOR_turnon+0x3a>
     c3a:	1c c0       	rjmp	.+56     	; 0xc74 <MOTOR_turnon+0x48>
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	62 e0       	ldi	r22, 0x02	; 2
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c46:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     c48:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     c4a:	41 e0       	ldi	r20, 0x01	; 1
     c4c:	65 e0       	ldi	r22, 0x05	; 5
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c54:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     c56:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     c58:	41 e0       	ldi	r20, 0x01	; 1
     c5a:	62 e0       	ldi	r22, 0x02	; 2
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c62:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     c64:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	65 e0       	ldi	r22, 0x05	; 5
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c70:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     c72:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     c74:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     c76:	08 95       	ret

00000c78 <US_init>:
/** RETURNS : VOID                                                **/
/*******************************************************************/
void US_init(void)
{
	/** INITIALIZE THE TRIGGER PIN AS OUTPUT PIN **/
	DIO_setpindir(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_OUTPUT);
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <DIO_setpindir>
     c82:	08 95       	ret

00000c84 <US_sendtrigger>:
/** RETURNS : EN_ultrasonicreturn                                 **/
/*******************************************************************/
EN_ultrasonicreturn US_sendtrigger(void)
{
	/** SEND PULSE OF 15 MICROSECOND **/
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_HIGH);
     c84:	41 e0       	ldi	r20, 0x01	; 1
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
	TMR0_delaymicros(15);
     c8e:	6f e0       	ldi	r22, 0x0F	; 15
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 43 08 	call	0x1086	; 0x1086 <TMR0_delaymicros>
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_LOW);
     c9a:	40 e0       	ldi	r20, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <DIO_setpinvalue>
}
     ca4:	08 95       	ret

00000ca6 <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZE APPLICATION MODULES **/
     ca6:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_setentry(); /** SET THE ENTRY DATA **/
     caa:	0e 94 76 00 	call	0xec	; 0xec <APP_setentry>
	
    while (1) 
    {
		APP_start(); /** SUPER LOOP **/	
     cae:	0e 94 0d 01 	call	0x21a	; 0x21a <APP_start>
     cb2:	fd cf       	rjmp	.-6      	; 0xcae <main+0x8>

00000cb4 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
     cb4:	44 23       	and	r20, r20
     cb6:	19 f0       	breq	.+6      	; 0xcbe <DIO_setpindir+0xa>
     cb8:	41 30       	cpi	r20, 0x01	; 1
     cba:	e9 f1       	breq	.+122    	; 0xd36 <DIO_setpindir+0x82>
     cbc:	74 c0       	rjmp	.+232    	; 0xda6 <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	99 f0       	breq	.+38     	; 0xce8 <DIO_setpindir+0x34>
     cc2:	28 f0       	brcs	.+10     	; 0xcce <DIO_setpindir+0x1a>
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	e9 f0       	breq	.+58     	; 0xd02 <DIO_setpindir+0x4e>
     cc8:	83 30       	cpi	r24, 0x03	; 3
     cca:	41 f1       	breq	.+80     	; 0xd1c <DIO_setpindir+0x68>
     ccc:	6e c0       	rjmp	.+220    	; 0xdaa <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     cce:	2a b3       	in	r18, 0x1a	; 26
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_setpindir+0x26>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	6a 95       	dec	r22
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <DIO_setpindir+0x22>
     cde:	80 95       	com	r24
     ce0:	82 23       	and	r24, r18
     ce2:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     ce4:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
     ce6:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     ce8:	27 b3       	in	r18, 0x17	; 23
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <DIO_setpindir+0x40>
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	6a 95       	dec	r22
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <DIO_setpindir+0x3c>
     cf8:	80 95       	com	r24
     cfa:	82 23       	and	r24, r18
     cfc:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     cfe:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
     d00:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     d02:	24 b3       	in	r18, 0x14	; 20
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 c0       	rjmp	.+4      	; 0xd0e <DIO_setpindir+0x5a>
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	6a 95       	dec	r22
     d10:	e2 f7       	brpl	.-8      	; 0xd0a <DIO_setpindir+0x56>
     d12:	80 95       	com	r24
     d14:	82 23       	and	r24, r18
     d16:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d18:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
     d1a:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     d1c:	21 b3       	in	r18, 0x11	; 17
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_setpindir+0x74>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	6a 95       	dec	r22
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_setpindir+0x70>
     d2c:	80 95       	com	r24
     d2e:	82 23       	and	r24, r18
     d30:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d32:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
     d34:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	91 f0       	breq	.+36     	; 0xd5e <DIO_setpindir+0xaa>
     d3a:	28 f0       	brcs	.+10     	; 0xd46 <DIO_setpindir+0x92>
     d3c:	82 30       	cpi	r24, 0x02	; 2
     d3e:	d9 f0       	breq	.+54     	; 0xd76 <DIO_setpindir+0xc2>
     d40:	83 30       	cpi	r24, 0x03	; 3
     d42:	29 f1       	breq	.+74     	; 0xd8e <DIO_setpindir+0xda>
     d44:	34 c0       	rjmp	.+104    	; 0xdae <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     d46:	2a b3       	in	r18, 0x1a	; 26
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_setpindir+0x9e>
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	6a 95       	dec	r22
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_setpindir+0x9a>
     d56:	82 2b       	or	r24, r18
     d58:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d5a:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     d5c:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     d5e:	27 b3       	in	r18, 0x17	; 23
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_setpindir+0xb6>
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	6a 95       	dec	r22
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_setpindir+0xb2>
     d6e:	82 2b       	or	r24, r18
     d70:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d72:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     d74:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     d76:	24 b3       	in	r18, 0x14	; 20
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_setpindir+0xce>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	6a 95       	dec	r22
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_setpindir+0xca>
     d86:	82 2b       	or	r24, r18
     d88:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     d8a:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     d8c:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     d8e:	21 b3       	in	r18, 0x11	; 17
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <DIO_setpindir+0xe6>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	6a 95       	dec	r22
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <DIO_setpindir+0xe2>
     d9e:	82 2b       	or	r24, r18
     da0:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     da2:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     da4:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     dae:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
     db0:	08 95       	ret

00000db2 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
     db2:	44 23       	and	r20, r20
     db4:	19 f0       	breq	.+6      	; 0xdbc <DIO_setpinvalue+0xa>
     db6:	41 30       	cpi	r20, 0x01	; 1
     db8:	e9 f1       	breq	.+122    	; 0xe34 <DIO_setpinvalue+0x82>
     dba:	74 c0       	rjmp	.+232    	; 0xea4 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
     dbc:	81 30       	cpi	r24, 0x01	; 1
     dbe:	99 f0       	breq	.+38     	; 0xde6 <DIO_setpinvalue+0x34>
     dc0:	28 f0       	brcs	.+10     	; 0xdcc <DIO_setpinvalue+0x1a>
     dc2:	82 30       	cpi	r24, 0x02	; 2
     dc4:	e9 f0       	breq	.+58     	; 0xe00 <DIO_setpinvalue+0x4e>
     dc6:	83 30       	cpi	r24, 0x03	; 3
     dc8:	41 f1       	breq	.+80     	; 0xe1a <DIO_setpinvalue+0x68>
     dca:	6e c0       	rjmp	.+220    	; 0xea8 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     dcc:	2b b3       	in	r18, 0x1b	; 27
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_setpinvalue+0x26>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	6a 95       	dec	r22
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_setpinvalue+0x22>
     ddc:	80 95       	com	r24
     dde:	82 23       	and	r24, r18
     de0:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     de2:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     de4:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     de6:	28 b3       	in	r18, 0x18	; 24
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <DIO_setpinvalue+0x40>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	6a 95       	dec	r22
     df4:	e2 f7       	brpl	.-8      	; 0xdee <DIO_setpinvalue+0x3c>
     df6:	80 95       	com	r24
     df8:	82 23       	and	r24, r18
     dfa:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     dfc:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     dfe:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     e00:	25 b3       	in	r18, 0x15	; 21
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_setpinvalue+0x5a>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	6a 95       	dec	r22
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_setpinvalue+0x56>
     e10:	80 95       	com	r24
     e12:	82 23       	and	r24, r18
     e14:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e16:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     e18:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     e1a:	22 b3       	in	r18, 0x12	; 18
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_setpinvalue+0x74>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	6a 95       	dec	r22
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_setpinvalue+0x70>
     e2a:	80 95       	com	r24
     e2c:	82 23       	and	r24, r18
     e2e:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e30:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     e32:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	91 f0       	breq	.+36     	; 0xe5c <DIO_setpinvalue+0xaa>
     e38:	28 f0       	brcs	.+10     	; 0xe44 <DIO_setpinvalue+0x92>
     e3a:	82 30       	cpi	r24, 0x02	; 2
     e3c:	d9 f0       	breq	.+54     	; 0xe74 <DIO_setpinvalue+0xc2>
     e3e:	83 30       	cpi	r24, 0x03	; 3
     e40:	29 f1       	breq	.+74     	; 0xe8c <DIO_setpinvalue+0xda>
     e42:	34 c0       	rjmp	.+104    	; 0xeac <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     e44:	2b b3       	in	r18, 0x1b	; 27
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_setpinvalue+0x9e>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	6a 95       	dec	r22
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_setpinvalue+0x9a>
     e54:	82 2b       	or	r24, r18
     e56:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e58:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     e5a:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     e5c:	28 b3       	in	r18, 0x18	; 24
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <DIO_setpinvalue+0xb6>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	6a 95       	dec	r22
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <DIO_setpinvalue+0xb2>
     e6c:	82 2b       	or	r24, r18
     e6e:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e70:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     e72:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     e74:	25 b3       	in	r18, 0x15	; 21
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_setpinvalue+0xce>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	6a 95       	dec	r22
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_setpinvalue+0xca>
     e84:	82 2b       	or	r24, r18
     e86:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     e88:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     e8a:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     e8c:	22 b3       	in	r18, 0x12	; 18
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_setpinvalue+0xe6>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	6a 95       	dec	r22
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_setpinvalue+0xe2>
     e9c:	82 2b       	or	r24, r18
     e9e:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     ea0:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     ea2:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     eac:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
     eae:	08 95       	ret

00000eb0 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	99 f0       	breq	.+38     	; 0xeda <DIO_readpin+0x2a>
     eb4:	28 f0       	brcs	.+10     	; 0xec0 <DIO_readpin+0x10>
     eb6:	82 30       	cpi	r24, 0x02	; 2
     eb8:	e9 f0       	breq	.+58     	; 0xef4 <DIO_readpin+0x44>
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	41 f1       	breq	.+80     	; 0xf0e <DIO_readpin+0x5e>
     ebe:	34 c0       	rjmp	.+104    	; 0xf28 <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     ec0:	89 b3       	in	r24, 0x19	; 25
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_readpin+0x1a>
     ec6:	95 95       	asr	r25
     ec8:	87 95       	ror	r24
     eca:	6a 95       	dec	r22
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_readpin+0x16>
     ece:	81 70       	andi	r24, 0x01	; 1
     ed0:	89 bb       	out	0x19, r24	; 25
     ed2:	fa 01       	movw	r30, r20
     ed4:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     ed6:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     ed8:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     eda:	86 b3       	in	r24, 0x16	; 22
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_readpin+0x34>
     ee0:	95 95       	asr	r25
     ee2:	87 95       	ror	r24
     ee4:	6a 95       	dec	r22
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_readpin+0x30>
     ee8:	81 70       	andi	r24, 0x01	; 1
     eea:	86 bb       	out	0x16, r24	; 22
     eec:	fa 01       	movw	r30, r20
     eee:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     ef0:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     ef2:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     ef4:	83 b3       	in	r24, 0x13	; 19
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <DIO_readpin+0x4e>
     efa:	95 95       	asr	r25
     efc:	87 95       	ror	r24
     efe:	6a 95       	dec	r22
     f00:	e2 f7       	brpl	.-8      	; 0xefa <DIO_readpin+0x4a>
     f02:	81 70       	andi	r24, 0x01	; 1
     f04:	83 bb       	out	0x13, r24	; 19
     f06:	fa 01       	movw	r30, r20
     f08:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     f0a:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     f0c:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     f0e:	80 b3       	in	r24, 0x10	; 16
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_readpin+0x68>
     f14:	95 95       	asr	r25
     f16:	87 95       	ror	r24
     f18:	6a 95       	dec	r22
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_readpin+0x64>
     f1c:	81 70       	andi	r24, 0x01	; 1
     f1e:	80 bb       	out	0x10, r24	; 16
     f20:	fa 01       	movw	r30, r20
     f22:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     f24:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     f26:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
     f28:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
     f2a:	08 95       	ret

00000f2c <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 f0       	breq	.+36     	; 0xf54 <DIO_togglepin+0x28>
     f30:	28 f0       	brcs	.+10     	; 0xf3c <DIO_togglepin+0x10>
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	d9 f0       	breq	.+54     	; 0xf6c <DIO_togglepin+0x40>
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	29 f1       	breq	.+74     	; 0xf84 <DIO_togglepin+0x58>
     f3a:	30 c0       	rjmp	.+96     	; 0xf9c <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
     f3c:	2b b3       	in	r18, 0x1b	; 27
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_togglepin+0x1c>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	6a 95       	dec	r22
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_togglepin+0x18>
     f4c:	82 27       	eor	r24, r18
     f4e:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     f50:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
     f52:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
     f54:	28 b3       	in	r18, 0x18	; 24
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_togglepin+0x34>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	6a 95       	dec	r22
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_togglepin+0x30>
     f64:	82 27       	eor	r24, r18
     f66:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     f68:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
     f6a:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
     f6c:	25 b3       	in	r18, 0x15	; 21
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_togglepin+0x4c>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	6a 95       	dec	r22
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_togglepin+0x48>
     f7c:	82 27       	eor	r24, r18
     f7e:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     f80:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
     f82:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
     f84:	22 b3       	in	r18, 0x12	; 18
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_togglepin+0x64>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	6a 95       	dec	r22
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_togglepin+0x60>
     f94:	82 27       	eor	r24, r18
     f96:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     f98:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
     f9a:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
     f9c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
     f9e:	08 95       	ret

00000fa0 <SET_GLOBALINTERRUPT>:
/** RETURNS    : VOID                                   */
/********************************************************/
void SET_GLOBALINTERRUPT(void)
{
	#if GLOBAL_INTERRUPT_STATE  ==  GLOBAL_INTERRUPT_STATE_ENABLE /** ENABLE GLOBAL INTERRUPTS **/
	  set_bit(SREG , 7);
     fa0:	8f b7       	in	r24, 0x3f	; 63
     fa2:	80 68       	ori	r24, 0x80	; 128
     fa4:	8f bf       	out	0x3f, r24	; 63
     fa6:	08 95       	ret

00000fa8 <INT0_init>:
/** ARGUMENTS  : VOID                                   */
/** RETURNS    : VOID                                   */
/********************************************************/
void INT0_init(void)
{
	SET_GLOBALINTERRUPT(); /** ENABLE GLOBAL INTERRUPTS */
     fa8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <SET_GLOBALINTERRUPT>
	  clear_bit(MCUCR , 0);
	  clear_bit(MCUCR , 1);
	  
	#elif EXTERNAL_INT0_TRIGGER  == INT_TRIGGER_ANY_CHANGE
	
	  set_bit(MCUCR , 0);
     fac:	85 b7       	in	r24, 0x35	; 53
     fae:	81 60       	ori	r24, 0x01	; 1
     fb0:	85 bf       	out	0x35, r24	; 53
	  clear_bit(MCUCR ,1);
     fb2:	85 b7       	in	r24, 0x35	; 53
     fb4:	8d 7f       	andi	r24, 0xFD	; 253
     fb6:	85 bf       	out	0x35, r24	; 53
	  
	#endif
	
	/* Enable INT0 */
	set_bit(GICR , 6);	
     fb8:	8b b7       	in	r24, 0x3b	; 59
     fba:	80 64       	ori	r24, 0x40	; 64
     fbc:	8b bf       	out	0x3b, r24	; 59
     fbe:	08 95       	ret

00000fc0 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
     fc0:	83 b7       	in	r24, 0x33	; 51
     fc2:	8f 77       	andi	r24, 0x7F	; 127
     fc4:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
     fc6:	83 b7       	in	r24, 0x33	; 51
     fc8:	8f 7b       	andi	r24, 0xBF	; 191
     fca:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
     fcc:	83 b7       	in	r24, 0x33	; 51
     fce:	87 7f       	andi	r24, 0xF7	; 247
     fd0:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
     fd2:	83 b7       	in	r24, 0x33	; 51
     fd4:	8f 7e       	andi	r24, 0xEF	; 239
     fd6:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
     fd8:	83 b7       	in	r24, 0x33	; 51
     fda:	8f 7d       	andi	r24, 0xDF	; 223
     fdc:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	08 95       	ret

00000fe2 <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
     fe2:	83 b7       	in	r24, 0x33	; 51
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
     fe8:	83 b7       	in	r24, 0x33	; 51
     fea:	8d 7f       	andi	r24, 0xFD	; 253
     fec:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
     fee:	83 b7       	in	r24, 0x33	; 51
     ff0:	8b 7f       	andi	r24, 0xFB	; 251
     ff2:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	08 95       	ret

00000ff8 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
     ff8:	83 b7       	in	r24, 0x33	; 51
     ffa:	8e 7f       	andi	r24, 0xFE	; 254
     ffc:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
     ffe:	83 b7       	in	r24, 0x33	; 51
    1000:	8d 7f       	andi	r24, 0xFD	; 253
    1002:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
    1004:	83 b7       	in	r24, 0x33	; 51
    1006:	8b 7f       	andi	r24, 0xFB	; 251
    1008:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	08 95       	ret

0000100e <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    100e:	0e 94 8f 09 	call	0x131e	; 0x131e <__floatunsisf>
    1012:	2f e6       	ldi	r18, 0x6F	; 111
    1014:	32 e1       	ldi	r19, 0x12	; 18
    1016:	43 e0       	ldi	r20, 0x03	; 3
    1018:	5d e3       	ldi	r21, 0x3D	; 61
    101a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__divsf3>
    101e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fixunssfsi>
    1022:	60 93 9f 00 	sts	0x009F, r22	; 0x80009f <u32_gs_tmr0nuofovs>
    1026:	70 93 a0 00 	sts	0x00A0, r23	; 0x8000a0 <u32_gs_tmr0nuofovs+0x1>
    102a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <u32_gs_tmr0nuofovs+0x2>
    102e:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <u32_gs_tmr0nuofovs+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
    1032:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
    1034:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    103e:	0a c0       	rjmp	.+20     	; 0x1054 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
    1040:	08 b6       	in	r0, 0x38	; 56
    1042:	00 fe       	sbrs	r0, 0
    1044:	fd cf       	rjmp	.-6      	; 0x1040 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
    1046:	88 b7       	in	r24, 0x38	; 56
    1048:	81 60       	ori	r24, 0x01	; 1
    104a:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
    104c:	4f 5f       	subi	r20, 0xFF	; 255
    104e:	5f 4f       	sbci	r21, 0xFF	; 255
    1050:	6f 4f       	sbci	r22, 0xFF	; 255
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    1054:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <u32_gs_tmr0nuofovs>
    1058:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <u32_gs_tmr0nuofovs+0x1>
    105c:	a0 91 a1 00 	lds	r26, 0x00A1	; 0x8000a1 <u32_gs_tmr0nuofovs+0x2>
    1060:	b0 91 a2 00 	lds	r27, 0x00A2	; 0x8000a2 <u32_gs_tmr0nuofovs+0x3>
    1064:	48 17       	cp	r20, r24
    1066:	59 07       	cpc	r21, r25
    1068:	6a 07       	cpc	r22, r26
    106a:	7b 07       	cpc	r23, r27
    106c:	48 f3       	brcs	.-46     	; 0x1040 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
    106e:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <u32_gs_tmr0nuofovs>
    1072:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <u32_gs_tmr0nuofovs+0x1>
    1076:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <u32_gs_tmr0nuofovs+0x2>
    107a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
    107e:	0e 94 fc 07 	call	0xff8	; 0xff8 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	08 95       	ret

00001086 <TMR0_delaymicros>:
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	u32_gs_tmr0nuofovs = (u32_a_delaymicros / 32);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	68 94       	set
    108c:	14 f8       	bld	r1, 4
    108e:	b6 95       	lsr	r27
    1090:	a7 95       	ror	r26
    1092:	97 95       	ror	r25
    1094:	87 95       	ror	r24
    1096:	16 94       	lsr	r1
    1098:	d1 f7       	brne	.-12     	; 0x108e <TMR0_delaymicros+0x8>
    109a:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <u32_gs_tmr0nuofovs>
    109e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <u32_gs_tmr0nuofovs+0x1>
    10a2:	a0 93 a1 00 	sts	0x00A1, r26	; 0x8000a1 <u32_gs_tmr0nuofovs+0x2>
    10a6:	b0 93 a2 00 	sts	0x00A2, r27	; 0x8000a2 <u32_gs_tmr0nuofovs+0x3>
	
	TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
    10aa:	12 be       	out	0x32, r1	; 50
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
    10ac:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <TMR0_start>
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delaymicros(uint32_t u32_a_delaymicros)
{
	uint32_t u32_a_overflowcounter = 0 ;
    10b0:	40 e0       	ldi	r20, 0x00	; 0
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    10b6:	0a c0       	rjmp	.+20     	; 0x10cc <TMR0_delaymicros+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
    10b8:	08 b6       	in	r0, 0x38	; 56
    10ba:	00 fe       	sbrs	r0, 0
    10bc:	fd cf       	rjmp	.-6      	; 0x10b8 <TMR0_delaymicros+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
    10be:	88 b7       	in	r24, 0x38	; 56
    10c0:	81 60       	ori	r24, 0x01	; 1
    10c2:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
    10c4:	4f 5f       	subi	r20, 0xFF	; 255
    10c6:	5f 4f       	sbci	r21, 0xFF	; 255
    10c8:	6f 4f       	sbci	r22, 0xFF	; 255
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    10cc:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <u32_gs_tmr0nuofovs>
    10d0:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <u32_gs_tmr0nuofovs+0x1>
    10d4:	a0 91 a1 00 	lds	r26, 0x00A1	; 0x8000a1 <u32_gs_tmr0nuofovs+0x2>
    10d8:	b0 91 a2 00 	lds	r27, 0x00A2	; 0x8000a2 <u32_gs_tmr0nuofovs+0x3>
    10dc:	48 17       	cp	r20, r24
    10de:	59 07       	cpc	r21, r25
    10e0:	6a 07       	cpc	r22, r26
    10e2:	7b 07       	cpc	r23, r27
    10e4:	48 f3       	brcs	.-46     	; 0x10b8 <TMR0_delaymicros+0x32>
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_a_overflowcounter = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop(); /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
    10e6:	0e 94 fc 07 	call	0xff8	; 0xff8 <TMR0_stop>
	
	return en_a_delaystatus ; 
}
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	08 95       	ret

000010ee <TMR1_init>:
	 
	#elif TMR1_CLK_SOURCE == TMR1_INTERNAL_CLK_SOURCE
	
	 #if TMR1_MODE == NORMAL_MODE
	  
	  clear_bit(TCCR1A , 0);
    10ee:	8f b5       	in	r24, 0x2f	; 47
    10f0:	8e 7f       	andi	r24, 0xFE	; 254
    10f2:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1A , 1);
    10f4:	8f b5       	in	r24, 0x2f	; 47
    10f6:	8d 7f       	andi	r24, 0xFD	; 253
    10f8:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1B , 3);
    10fa:	8e b5       	in	r24, 0x2e	; 46
    10fc:	87 7f       	andi	r24, 0xF7	; 247
    10fe:	8e bd       	out	0x2e, r24	; 46
	  clear_bit(TCCR1B , 4);
    1100:	8e b5       	in	r24, 0x2e	; 46
    1102:	8f 7e       	andi	r24, 0xEF	; 239
    1104:	8e bd       	out	0x2e, r24	; 46
	  
	  /* NON PWM MODE */
	  set_bit(TCCR1A , 2);
    1106:	8f b5       	in	r24, 0x2f	; 47
    1108:	84 60       	ori	r24, 0x04	; 4
    110a:	8f bd       	out	0x2f, r24	; 47
	  set_bit(TCCR1A , 3);
    110c:	8f b5       	in	r24, 0x2f	; 47
    110e:	88 60       	ori	r24, 0x08	; 8
    1110:	8f bd       	out	0x2f, r24	; 47
	  
	  /* ENABLE INTERRUPT */
	  set_bit(SREG , 7);   /** ENABLE GLOBAL INTTERUPTS **/
    1112:	8f b7       	in	r24, 0x3f	; 63
    1114:	80 68       	ori	r24, 0x80	; 128
    1116:	8f bf       	out	0x3f, r24	; 63
	  set_bit(TIMSK , 2);  /** NABLE TMR1 INTERRUPT **/
    1118:	89 b7       	in	r24, 0x39	; 57
    111a:	9a b7       	in	r25, 0x3a	; 58
    111c:	84 60       	ori	r24, 0x04	; 4
    111e:	9a bf       	out	0x3a, r25	; 58
    1120:	89 bf       	out	0x39, r24	; 57
	 /* SET THE OC1B BIT AS OUTPUT */
	 DIO_setpindir(DIO_PORTD , DIO_PIN4 , DIO_PIN_OUTPUT);
	#endif
	#endif
#endif
}
    1122:	08 95       	ret

00001124 <TMR1_start>:
/******************************************************************************/
TMR1_start_status TMR1_start(void)
{
  TMR1_start_status en_a_startstatus = TMR1_NOT_VALID_START ; /** VARIABLE TO HOLD THE RETURN STATUS **/
  
  TCNT1 = 0 ;   /** SET THE INITIAL VALUE IN TCNT1 REGISTER **/
    1124:	1d bc       	out	0x2d, r1	; 45
    1126:	1c bc       	out	0x2c, r1	; 44

         en_a_startstatus = TMR1_VALID_START ; /** STATUS IS VALID **/
	 
	 #elif TMR1_PRESCALLER_VALUE == NO_PRESCALER
	 
	 set_bit(TCCR1B , 0);
    1128:	8e b5       	in	r24, 0x2e	; 46
    112a:	81 60       	ori	r24, 0x01	; 1
    112c:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 1);
    112e:	8e b5       	in	r24, 0x2e	; 46
    1130:	8d 7f       	andi	r24, 0xFD	; 253
    1132:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 2);
    1134:	8e b5       	in	r24, 0x2e	; 46
    1136:	8b 7f       	andi	r24, 0xFB	; 251
    1138:	8e bd       	out	0x2e, r24	; 46

	 #endif
	#endif

  return en_a_startstatus ; /** RETURN THE FINAL STATUS **/
}
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	08 95       	ret

0000113e <TMR1_stop>:
TMR1_stop_status TMR1_stop(void)
{
     TMR1_stop_status en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** VARIABLE TO HOLD THE RETURN STATUS  **/
	
     /* TURN THE CLOCK OFF */
     clear_bit(TCCR1B , 0);
    113e:	8e b5       	in	r24, 0x2e	; 46
    1140:	8e 7f       	andi	r24, 0xFE	; 254
    1142:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 1);
    1144:	8e b5       	in	r24, 0x2e	; 46
    1146:	8d 7f       	andi	r24, 0xFD	; 253
    1148:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 2);
    114a:	8e b5       	in	r24, 0x2e	; 46
    114c:	8b 7f       	andi	r24, 0xFB	; 251
    114e:	8e bd       	out	0x2e, r24	; 46

     en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** UPDATE THE STOP STATUS **/

     return en_a_stopstatus ; /** RETURN THE FINAL STATUS **/

}
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	08 95       	ret

00001154 <TMR1_getvalue>:
/** ARGUMENTS  : u16_a_value                                                 **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR1_getvalue(uint16t * u16_a_value)
{
	*u16_a_value = TCNT1 ; /** GET THE VALUE FROM TIMER1 COUNTING REGISTER **/
    1154:	2c b5       	in	r18, 0x2c	; 44
    1156:	3d b5       	in	r19, 0x2d	; 45
    1158:	fc 01       	movw	r30, r24
    115a:	31 83       	std	Z+1, r19	; 0x01
    115c:	20 83       	st	Z, r18
    115e:	08 95       	ret

00001160 <TMR1_setcounterval>:
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
void TMR1_setcounterval(uint16t u16_a_tmrval)
{
	TCNT1 = u16_a_tmrval ; /** SET THE PASSED VALUE IN TIMER COUNTING REGISTER **/
    1160:	9d bd       	out	0x2d, r25	; 45
    1162:	8c bd       	out	0x2c, r24	; 44
    1164:	08 95       	ret

00001166 <TMR2_init>:
	/* TIMER MODE OF TMR0 */
	#elif TIMER2_CLK_SRC == INTERNAL_CLK_SRC
	
	#if TIMER2_MODE == TMR2_NORMAL_MODE
	
	clear_bit(TCCR2 , 7);
    1166:	85 b5       	in	r24, 0x25	; 37
    1168:	8f 77       	andi	r24, 0x7F	; 127
    116a:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 6);
    116c:	85 b5       	in	r24, 0x25	; 37
    116e:	8f 7b       	andi	r24, 0xBF	; 191
    1170:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 3);
    1172:	85 b5       	in	r24, 0x25	; 37
    1174:	87 7f       	andi	r24, 0xF7	; 247
    1176:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 4);
    1178:	85 b5       	in	r24, 0x25	; 37
    117a:	8f 7e       	andi	r24, 0xEF	; 239
    117c:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 5);
    117e:	85 b5       	in	r24, 0x25	; 37
    1180:	8f 7d       	andi	r24, 0xDF	; 223
    1182:	85 bd       	out	0x25, r24	; 37
	
	/* ENABLE INTERRUPT */
	set_bit(SREG , 7);
    1184:	8f b7       	in	r24, 0x3f	; 63
    1186:	80 68       	ori	r24, 0x80	; 128
    1188:	8f bf       	out	0x3f, r24	; 63
	set_bit(TIMSK , 6);
    118a:	89 b7       	in	r24, 0x39	; 57
    118c:	80 64       	ori	r24, 0x40	; 64
    118e:	89 bf       	out	0x39, r24	; 57
	#endif
	#endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	08 95       	ret

00001194 <TMR2_start>:
	
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR2 , 0);
    1194:	85 b5       	in	r24, 0x25	; 37
    1196:	81 60       	ori	r24, 0x01	; 1
    1198:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    119a:	85 b5       	in	r24, 0x25	; 37
    119c:	8d 7f       	andi	r24, 0xFD	; 253
    119e:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    11a0:	85 b5       	in	r24, 0x25	; 37
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	85 bd       	out	0x25, r24	; 37
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	08 95       	ret

000011aa <TMR2_stop>:
TMR2_stop_error TMR2_stop(void)
{
	TMR2_stop_error en_a_stopStatus = TMR2_VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR2 , 0);
    11aa:	85 b5       	in	r24, 0x25	; 37
    11ac:	8e 7f       	andi	r24, 0xFE	; 254
    11ae:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    11b0:	85 b5       	in	r24, 0x25	; 37
    11b2:	8d 7f       	andi	r24, 0xFD	; 253
    11b4:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    11b6:	85 b5       	in	r24, 0x25	; 37
    11b8:	8b 7f       	andi	r24, 0xFB	; 251
    11ba:	85 bd       	out	0x25, r24	; 37
	
	en_a_stopStatus = TMR2_VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	08 95       	ret

000011c0 <TMR2_getovs>:
	u32_a_ovs = (u16_a_delay / 0.256);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
	

	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	u32_a_ovs = (u16_a_delay / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    11c0:	bc 01       	movw	r22, r24
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 8f 09 	call	0x131e	; 0x131e <__floatunsisf>
    11ca:	2f e6       	ldi	r18, 0x6F	; 111
    11cc:	32 e1       	ldi	r19, 0x12	; 18
    11ce:	43 e0       	ldi	r20, 0x03	; 3
    11d0:	5d e3       	ldi	r21, 0x3D	; 61
    11d2:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__divsf3>
    11d6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fixunssfsi>
	
	#endif
	
	return u32_a_ovs ;  /** RETURN THE CALCULATED NUMBER OF OVERFLOWS **/
}
    11da:	08 95       	ret

000011dc <__divsf3>:
    11dc:	0e 94 02 09 	call	0x1204	; 0x1204 <__divsf3x>
    11e0:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__fp_round>
    11e4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__fp_pscB>
    11e8:	58 f0       	brcs	.+22     	; 0x1200 <__divsf3+0x24>
    11ea:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__fp_pscA>
    11ee:	40 f0       	brcs	.+16     	; 0x1200 <__divsf3+0x24>
    11f0:	29 f4       	brne	.+10     	; 0x11fc <__divsf3+0x20>
    11f2:	5f 3f       	cpi	r21, 0xFF	; 255
    11f4:	29 f0       	breq	.+10     	; 0x1200 <__divsf3+0x24>
    11f6:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__fp_inf>
    11fa:	51 11       	cpse	r21, r1
    11fc:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__fp_szero>
    1200:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__fp_nan>

00001204 <__divsf3x>:
    1204:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fp_split3>
    1208:	68 f3       	brcs	.-38     	; 0x11e4 <__divsf3+0x8>

0000120a <__divsf3_pse>:
    120a:	99 23       	and	r25, r25
    120c:	b1 f3       	breq	.-20     	; 0x11fa <__divsf3+0x1e>
    120e:	55 23       	and	r21, r21
    1210:	91 f3       	breq	.-28     	; 0x11f6 <__divsf3+0x1a>
    1212:	95 1b       	sub	r25, r21
    1214:	55 0b       	sbc	r21, r21
    1216:	bb 27       	eor	r27, r27
    1218:	aa 27       	eor	r26, r26
    121a:	62 17       	cp	r22, r18
    121c:	73 07       	cpc	r23, r19
    121e:	84 07       	cpc	r24, r20
    1220:	38 f0       	brcs	.+14     	; 0x1230 <__divsf3_pse+0x26>
    1222:	9f 5f       	subi	r25, 0xFF	; 255
    1224:	5f 4f       	sbci	r21, 0xFF	; 255
    1226:	22 0f       	add	r18, r18
    1228:	33 1f       	adc	r19, r19
    122a:	44 1f       	adc	r20, r20
    122c:	aa 1f       	adc	r26, r26
    122e:	a9 f3       	breq	.-22     	; 0x121a <__divsf3_pse+0x10>
    1230:	35 d0       	rcall	.+106    	; 0x129c <__divsf3_pse+0x92>
    1232:	0e 2e       	mov	r0, r30
    1234:	3a f0       	brmi	.+14     	; 0x1244 <__divsf3_pse+0x3a>
    1236:	e0 e8       	ldi	r30, 0x80	; 128
    1238:	32 d0       	rcall	.+100    	; 0x129e <__divsf3_pse+0x94>
    123a:	91 50       	subi	r25, 0x01	; 1
    123c:	50 40       	sbci	r21, 0x00	; 0
    123e:	e6 95       	lsr	r30
    1240:	00 1c       	adc	r0, r0
    1242:	ca f7       	brpl	.-14     	; 0x1236 <__divsf3_pse+0x2c>
    1244:	2b d0       	rcall	.+86     	; 0x129c <__divsf3_pse+0x92>
    1246:	fe 2f       	mov	r31, r30
    1248:	29 d0       	rcall	.+82     	; 0x129c <__divsf3_pse+0x92>
    124a:	66 0f       	add	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	bb 1f       	adc	r27, r27
    1252:	26 17       	cp	r18, r22
    1254:	37 07       	cpc	r19, r23
    1256:	48 07       	cpc	r20, r24
    1258:	ab 07       	cpc	r26, r27
    125a:	b0 e8       	ldi	r27, 0x80	; 128
    125c:	09 f0       	breq	.+2      	; 0x1260 <__divsf3_pse+0x56>
    125e:	bb 0b       	sbc	r27, r27
    1260:	80 2d       	mov	r24, r0
    1262:	bf 01       	movw	r22, r30
    1264:	ff 27       	eor	r31, r31
    1266:	93 58       	subi	r25, 0x83	; 131
    1268:	5f 4f       	sbci	r21, 0xFF	; 255
    126a:	3a f0       	brmi	.+14     	; 0x127a <__divsf3_pse+0x70>
    126c:	9e 3f       	cpi	r25, 0xFE	; 254
    126e:	51 05       	cpc	r21, r1
    1270:	78 f0       	brcs	.+30     	; 0x1290 <__divsf3_pse+0x86>
    1272:	0c 94 cc 09 	jmp	0x1398	; 0x1398 <__fp_inf>
    1276:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__fp_szero>
    127a:	5f 3f       	cpi	r21, 0xFF	; 255
    127c:	e4 f3       	brlt	.-8      	; 0x1276 <__divsf3_pse+0x6c>
    127e:	98 3e       	cpi	r25, 0xE8	; 232
    1280:	d4 f3       	brlt	.-12     	; 0x1276 <__divsf3_pse+0x6c>
    1282:	86 95       	lsr	r24
    1284:	77 95       	ror	r23
    1286:	67 95       	ror	r22
    1288:	b7 95       	ror	r27
    128a:	f7 95       	ror	r31
    128c:	9f 5f       	subi	r25, 0xFF	; 255
    128e:	c9 f7       	brne	.-14     	; 0x1282 <__divsf3_pse+0x78>
    1290:	88 0f       	add	r24, r24
    1292:	91 1d       	adc	r25, r1
    1294:	96 95       	lsr	r25
    1296:	87 95       	ror	r24
    1298:	97 f9       	bld	r25, 7
    129a:	08 95       	ret
    129c:	e1 e0       	ldi	r30, 0x01	; 1
    129e:	66 0f       	add	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	88 1f       	adc	r24, r24
    12a4:	bb 1f       	adc	r27, r27
    12a6:	62 17       	cp	r22, r18
    12a8:	73 07       	cpc	r23, r19
    12aa:	84 07       	cpc	r24, r20
    12ac:	ba 07       	cpc	r27, r26
    12ae:	20 f0       	brcs	.+8      	; 0x12b8 <__divsf3_pse+0xae>
    12b0:	62 1b       	sub	r22, r18
    12b2:	73 0b       	sbc	r23, r19
    12b4:	84 0b       	sbc	r24, r20
    12b6:	ba 0b       	sbc	r27, r26
    12b8:	ee 1f       	adc	r30, r30
    12ba:	88 f7       	brcc	.-30     	; 0x129e <__divsf3_pse+0x94>
    12bc:	e0 95       	com	r30
    12be:	08 95       	ret

000012c0 <__fixunssfsi>:
    12c0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__fp_splitA>
    12c4:	88 f0       	brcs	.+34     	; 0x12e8 <__fixunssfsi+0x28>
    12c6:	9f 57       	subi	r25, 0x7F	; 127
    12c8:	98 f0       	brcs	.+38     	; 0x12f0 <__fixunssfsi+0x30>
    12ca:	b9 2f       	mov	r27, r25
    12cc:	99 27       	eor	r25, r25
    12ce:	b7 51       	subi	r27, 0x17	; 23
    12d0:	b0 f0       	brcs	.+44     	; 0x12fe <__fixunssfsi+0x3e>
    12d2:	e1 f0       	breq	.+56     	; 0x130c <__fixunssfsi+0x4c>
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	88 1f       	adc	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	1a f0       	brmi	.+6      	; 0x12e4 <__fixunssfsi+0x24>
    12de:	ba 95       	dec	r27
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__fixunssfsi+0x14>
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <__fixunssfsi+0x4c>
    12e4:	b1 30       	cpi	r27, 0x01	; 1
    12e6:	91 f0       	breq	.+36     	; 0x130c <__fixunssfsi+0x4c>
    12e8:	0e 94 16 0a 	call	0x142c	; 0x142c <__fp_zero>
    12ec:	b1 e0       	ldi	r27, 0x01	; 1
    12ee:	08 95       	ret
    12f0:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__fp_zero>
    12f4:	67 2f       	mov	r22, r23
    12f6:	78 2f       	mov	r23, r24
    12f8:	88 27       	eor	r24, r24
    12fa:	b8 5f       	subi	r27, 0xF8	; 248
    12fc:	39 f0       	breq	.+14     	; 0x130c <__fixunssfsi+0x4c>
    12fe:	b9 3f       	cpi	r27, 0xF9	; 249
    1300:	cc f3       	brlt	.-14     	; 0x12f4 <__fixunssfsi+0x34>
    1302:	86 95       	lsr	r24
    1304:	77 95       	ror	r23
    1306:	67 95       	ror	r22
    1308:	b3 95       	inc	r27
    130a:	d9 f7       	brne	.-10     	; 0x1302 <__fixunssfsi+0x42>
    130c:	3e f4       	brtc	.+14     	; 0x131c <__fixunssfsi+0x5c>
    130e:	90 95       	com	r25
    1310:	80 95       	com	r24
    1312:	70 95       	com	r23
    1314:	61 95       	neg	r22
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	8f 4f       	sbci	r24, 0xFF	; 255
    131a:	9f 4f       	sbci	r25, 0xFF	; 255
    131c:	08 95       	ret

0000131e <__floatunsisf>:
    131e:	e8 94       	clt
    1320:	09 c0       	rjmp	.+18     	; 0x1334 <__floatsisf+0x12>

00001322 <__floatsisf>:
    1322:	97 fb       	bst	r25, 7
    1324:	3e f4       	brtc	.+14     	; 0x1334 <__floatsisf+0x12>
    1326:	90 95       	com	r25
    1328:	80 95       	com	r24
    132a:	70 95       	com	r23
    132c:	61 95       	neg	r22
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	8f 4f       	sbci	r24, 0xFF	; 255
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	99 23       	and	r25, r25
    1336:	a9 f0       	breq	.+42     	; 0x1362 <__floatsisf+0x40>
    1338:	f9 2f       	mov	r31, r25
    133a:	96 e9       	ldi	r25, 0x96	; 150
    133c:	bb 27       	eor	r27, r27
    133e:	93 95       	inc	r25
    1340:	f6 95       	lsr	r31
    1342:	87 95       	ror	r24
    1344:	77 95       	ror	r23
    1346:	67 95       	ror	r22
    1348:	b7 95       	ror	r27
    134a:	f1 11       	cpse	r31, r1
    134c:	f8 cf       	rjmp	.-16     	; 0x133e <__floatsisf+0x1c>
    134e:	fa f4       	brpl	.+62     	; 0x138e <__floatsisf+0x6c>
    1350:	bb 0f       	add	r27, r27
    1352:	11 f4       	brne	.+4      	; 0x1358 <__floatsisf+0x36>
    1354:	60 ff       	sbrs	r22, 0
    1356:	1b c0       	rjmp	.+54     	; 0x138e <__floatsisf+0x6c>
    1358:	6f 5f       	subi	r22, 0xFF	; 255
    135a:	7f 4f       	sbci	r23, 0xFF	; 255
    135c:	8f 4f       	sbci	r24, 0xFF	; 255
    135e:	9f 4f       	sbci	r25, 0xFF	; 255
    1360:	16 c0       	rjmp	.+44     	; 0x138e <__floatsisf+0x6c>
    1362:	88 23       	and	r24, r24
    1364:	11 f0       	breq	.+4      	; 0x136a <__floatsisf+0x48>
    1366:	96 e9       	ldi	r25, 0x96	; 150
    1368:	11 c0       	rjmp	.+34     	; 0x138c <__floatsisf+0x6a>
    136a:	77 23       	and	r23, r23
    136c:	21 f0       	breq	.+8      	; 0x1376 <__floatsisf+0x54>
    136e:	9e e8       	ldi	r25, 0x8E	; 142
    1370:	87 2f       	mov	r24, r23
    1372:	76 2f       	mov	r23, r22
    1374:	05 c0       	rjmp	.+10     	; 0x1380 <__floatsisf+0x5e>
    1376:	66 23       	and	r22, r22
    1378:	71 f0       	breq	.+28     	; 0x1396 <__floatsisf+0x74>
    137a:	96 e8       	ldi	r25, 0x86	; 134
    137c:	86 2f       	mov	r24, r22
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	2a f0       	brmi	.+10     	; 0x138e <__floatsisf+0x6c>
    1384:	9a 95       	dec	r25
    1386:	66 0f       	add	r22, r22
    1388:	77 1f       	adc	r23, r23
    138a:	88 1f       	adc	r24, r24
    138c:	da f7       	brpl	.-10     	; 0x1384 <__floatsisf+0x62>
    138e:	88 0f       	add	r24, r24
    1390:	96 95       	lsr	r25
    1392:	87 95       	ror	r24
    1394:	97 f9       	bld	r25, 7
    1396:	08 95       	ret

00001398 <__fp_inf>:
    1398:	97 f9       	bld	r25, 7
    139a:	9f 67       	ori	r25, 0x7F	; 127
    139c:	80 e8       	ldi	r24, 0x80	; 128
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	08 95       	ret

000013a4 <__fp_nan>:
    13a4:	9f ef       	ldi	r25, 0xFF	; 255
    13a6:	80 ec       	ldi	r24, 0xC0	; 192
    13a8:	08 95       	ret

000013aa <__fp_pscA>:
    13aa:	00 24       	eor	r0, r0
    13ac:	0a 94       	dec	r0
    13ae:	16 16       	cp	r1, r22
    13b0:	17 06       	cpc	r1, r23
    13b2:	18 06       	cpc	r1, r24
    13b4:	09 06       	cpc	r0, r25
    13b6:	08 95       	ret

000013b8 <__fp_pscB>:
    13b8:	00 24       	eor	r0, r0
    13ba:	0a 94       	dec	r0
    13bc:	12 16       	cp	r1, r18
    13be:	13 06       	cpc	r1, r19
    13c0:	14 06       	cpc	r1, r20
    13c2:	05 06       	cpc	r0, r21
    13c4:	08 95       	ret

000013c6 <__fp_round>:
    13c6:	09 2e       	mov	r0, r25
    13c8:	03 94       	inc	r0
    13ca:	00 0c       	add	r0, r0
    13cc:	11 f4       	brne	.+4      	; 0x13d2 <__fp_round+0xc>
    13ce:	88 23       	and	r24, r24
    13d0:	52 f0       	brmi	.+20     	; 0x13e6 <__fp_round+0x20>
    13d2:	bb 0f       	add	r27, r27
    13d4:	40 f4       	brcc	.+16     	; 0x13e6 <__fp_round+0x20>
    13d6:	bf 2b       	or	r27, r31
    13d8:	11 f4       	brne	.+4      	; 0x13de <__fp_round+0x18>
    13da:	60 ff       	sbrs	r22, 0
    13dc:	04 c0       	rjmp	.+8      	; 0x13e6 <__fp_round+0x20>
    13de:	6f 5f       	subi	r22, 0xFF	; 255
    13e0:	7f 4f       	sbci	r23, 0xFF	; 255
    13e2:	8f 4f       	sbci	r24, 0xFF	; 255
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255
    13e6:	08 95       	ret

000013e8 <__fp_split3>:
    13e8:	57 fd       	sbrc	r21, 7
    13ea:	90 58       	subi	r25, 0x80	; 128
    13ec:	44 0f       	add	r20, r20
    13ee:	55 1f       	adc	r21, r21
    13f0:	59 f0       	breq	.+22     	; 0x1408 <__fp_splitA+0x10>
    13f2:	5f 3f       	cpi	r21, 0xFF	; 255
    13f4:	71 f0       	breq	.+28     	; 0x1412 <__fp_splitA+0x1a>
    13f6:	47 95       	ror	r20

000013f8 <__fp_splitA>:
    13f8:	88 0f       	add	r24, r24
    13fa:	97 fb       	bst	r25, 7
    13fc:	99 1f       	adc	r25, r25
    13fe:	61 f0       	breq	.+24     	; 0x1418 <__fp_splitA+0x20>
    1400:	9f 3f       	cpi	r25, 0xFF	; 255
    1402:	79 f0       	breq	.+30     	; 0x1422 <__fp_splitA+0x2a>
    1404:	87 95       	ror	r24
    1406:	08 95       	ret
    1408:	12 16       	cp	r1, r18
    140a:	13 06       	cpc	r1, r19
    140c:	14 06       	cpc	r1, r20
    140e:	55 1f       	adc	r21, r21
    1410:	f2 cf       	rjmp	.-28     	; 0x13f6 <__fp_split3+0xe>
    1412:	46 95       	lsr	r20
    1414:	f1 df       	rcall	.-30     	; 0x13f8 <__fp_splitA>
    1416:	08 c0       	rjmp	.+16     	; 0x1428 <__fp_splitA+0x30>
    1418:	16 16       	cp	r1, r22
    141a:	17 06       	cpc	r1, r23
    141c:	18 06       	cpc	r1, r24
    141e:	99 1f       	adc	r25, r25
    1420:	f1 cf       	rjmp	.-30     	; 0x1404 <__fp_splitA+0xc>
    1422:	86 95       	lsr	r24
    1424:	71 05       	cpc	r23, r1
    1426:	61 05       	cpc	r22, r1
    1428:	08 94       	sec
    142a:	08 95       	ret

0000142c <__fp_zero>:
    142c:	e8 94       	clt

0000142e <__fp_szero>:
    142e:	bb 27       	eor	r27, r27
    1430:	66 27       	eor	r22, r22
    1432:	77 27       	eor	r23, r23
    1434:	cb 01       	movw	r24, r22
    1436:	97 f9       	bld	r25, 7
    1438:	08 95       	ret

0000143a <__umulhisi3>:
    143a:	a2 9f       	mul	r26, r18
    143c:	b0 01       	movw	r22, r0
    143e:	b3 9f       	mul	r27, r19
    1440:	c0 01       	movw	r24, r0
    1442:	a3 9f       	mul	r26, r19
    1444:	70 0d       	add	r23, r0
    1446:	81 1d       	adc	r24, r1
    1448:	11 24       	eor	r1, r1
    144a:	91 1d       	adc	r25, r1
    144c:	b2 9f       	mul	r27, r18
    144e:	70 0d       	add	r23, r0
    1450:	81 1d       	adc	r24, r1
    1452:	11 24       	eor	r1, r1
    1454:	91 1d       	adc	r25, r1
    1456:	08 95       	ret

00001458 <_exit>:
    1458:	f8 94       	cli

0000145a <__stop_program>:
    145a:	ff cf       	rjmp	.-2      	; 0x145a <__stop_program>
