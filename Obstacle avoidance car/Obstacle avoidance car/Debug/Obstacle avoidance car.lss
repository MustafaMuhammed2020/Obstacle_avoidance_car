
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001620  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00001620  000016b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080009e  0080009e  000016f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001724  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000347b  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101e  00000000  00000000  00004eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f76  00000000  00000000  00005f09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00007e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000efd  00000000  00000000  00008460  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143e  00000000  00000000  0000935d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000a79b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 06 	call	0xde8	; 0xde8 <main>
      8a:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint32_t u32_g_tick = 0 ;            /** GLOBAL VARIABLE TO BE COMPARED WITH DELAY TICKS **/   

/** FUNCTION TO INITIALIZE APPLICATION MODULES **/
void APP_init()
{
    ICU_init(); /** INITIALIZE ICU **/
      92:	0e 94 46 03 	call	0x68c	; 0x68c <ICU_init>

	US_init(); /** INITILAIZATION ULTRASONIC MODULE **/
      96:	0e 94 dd 06 	call	0xdba	; 0xdba <US_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
      9a:	0e 94 81 08 	call	0x1102	; 0x1102 <TMR0_init>
	
	TMR2_init() ; /** INITIALIZE TIMER 2 **/
      9e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <TMR2_init>
	
	KEYPAD_init() ; /** INITIALIZE KEYPAD **/
      a2:	0e 94 67 03 	call	0x6ce	; 0x6ce <KEYPAD_init>
	
	Button_init(); /** INITIALIZATION OF BUTTON **/
      a6:	0e 94 21 03 	call	0x642	; 0x642 <Button_init>
	
	LCD_init(); /** INITIALIZE LCD **/
      aa:	0e 94 91 04 	call	0x922	; 0x922 <LCD_init>
	
	TMR0_delayms(MS_DELAY_50); /** DELAY FOR LCD INITIALIZATION **/
      ae:	62 e3       	ldi	r22, 0x32	; 50
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>

	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 cf 05 	call	0xb9e	; 0xb9e <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 1d 06 	call	0xc3a	; 0xc3a <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 1d 06 	call	0xc3a	; 0xc3a <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <MOTOR_rotateclkdir>
      ea:	08 95       	ret

000000ec <APP_setentry>:

}

/** FUNCTION TO SET DEFAULTS **/
void APP_setentry()
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <APP_setentry+0x6>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_a_btnstatus = 0 , u8_a_pressednum = 0 ;
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	1a 82       	std	Y+2, r1	; 0x02
	
 	u32_g_tick = 0 ;
      fa:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
      fe:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     102:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     106:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     10a:	88 e8       	ldi	r24, 0x88	; 136
     10c:	93 e1       	ldi	r25, 0x13	; 19
     10e:	0e 94 81 09 	call	0x1302	; 0x1302 <TMR2_getovs>
     112:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     116:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     11a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     11e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>

 	TMR2_start() ; /** START TIMER 2 **/
     122:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <TMR2_start>

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     126:	39 c0       	rjmp	.+114    	; 0x19a <APP_setentry+0xae>
	{
 		LCD_goto(LCD_POS_0 , LCD_POS_1);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_goto>
 		LCD_writestr("Set Def. Rot");
     130:	80 e6       	ldi	r24, 0x60	; 96
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 19 05 	call	0xa32	; 0xa32 <LCD_writestr>

 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON PRESSED **/
     138:	ae 01       	movw	r20, r28
     13a:	4f 5f       	subi	r20, 0xFF	; 255
     13c:	5f 4f       	sbci	r21, 0xFF	; 255
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 27 03 	call	0x64e	; 0x64e <Is_pressed>
 		TMR0_delayms(MS_DELAY_100); /** WAIT 100 MS FOR BUTTON TO SETTLE **/
     146:	64 e6       	ldi	r22, 0x64	; 100
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>
 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON IS STILL PRESSED **/
     152:	ae 01       	movw	r20, r28
     154:	4f 5f       	subi	r20, 0xFF	; 255
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 27 03 	call	0x64e	; 0x64e <Is_pressed>

		if (u8_a_btnstatus) /** IF THE BUTTON PRESSED **/
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 23       	and	r24, r24
     164:	d1 f0       	breq	.+52     	; 0x19a <APP_setentry+0xae>
 		{
 			u8_g_rotationcounter++ ; /** INCREASE ROTATION COUNTER BY 1 **/
     166:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <u8_g_rotationcounter>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <u8_g_rotationcounter>

 			if (u8_g_rotationcounter == LEFT_ROTATION) /** LEFT ROTATION **/
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	41 f4       	brne	.+16     	; 0x184 <APP_setentry+0x98>
 			{
				LCD_goto(LCD_POS_1 , LCD_POS_1);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_goto>
				LCD_writestr("LEFT ROTATION");
     17a:	8d e6       	ldi	r24, 0x6D	; 109
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 19 05 	call	0xa32	; 0xa32 <LCD_writestr>
     182:	0a c0       	rjmp	.+20     	; 0x198 <APP_setentry+0xac>
			}
	 		else if(u8_g_rotationcounter == RIGHT_ROTATION) /** RIGHT ROTATION **/
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	41 f4       	brne	.+16     	; 0x198 <APP_setentry+0xac>
	 		{
 				LCD_goto(LCD_POS_1 , LCD_POS_1);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_goto>
 				LCD_writestr("RIGHT ROTATION");
     190:	8b e7       	ldi	r24, 0x7B	; 123
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 19 05 	call	0xa32	; 0xa32 <LCD_writestr>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
     198:	19 82       	std	Y+1, r1	; 0x01
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

 	TMR2_start() ; /** START TIMER 2 **/

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     19a:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     19e:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     1a2:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     1a6:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     1aa:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     1ae:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     1b2:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     1b6:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     1ba:	48 17       	cp	r20, r24
     1bc:	59 07       	cpc	r21, r25
     1be:	6a 07       	cpc	r22, r26
     1c0:	7b 07       	cpc	r23, r27
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <APP_setentry+0xda>
     1c4:	b1 cf       	rjmp	.-158    	; 0x128 <APP_setentry+0x3c>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
 		}
 	}
	
 	TMR2_stop(); /** STOP TIMER 2 **/
     1c6:	0e 94 76 09 	call	0x12ec	; 0x12ec <TMR2_stop>
		
	do /** ACCEPT KEYPAD BUTTON 1 FROM USER **/
	{
 		KEYPAD_read(&u8_a_pressednum);
     1ca:	ce 01       	movw	r24, r28
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	0e 94 a5 03 	call	0x74a	; 0x74a <KEYPAD_read>
 	} while (u8_a_pressednum != START_BTN);
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	81 33       	cpi	r24, 0x31	; 49
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <APP_setentry+0xde>

 	 LCD_sendcmd(LCD_CLEAR);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 48 04 	call	0x890	; 0x890 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     1de:	64 e1       	ldi	r22, 0x14	; 20
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>
	 
	 LCD_goto(LCD_POS_0 , LCD_POS_2);
     1ea:	62 e0       	ldi	r22, 0x02	; 2
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_goto>
	 LCD_writestr("Waiting");
     1f2:	8a e8       	ldi	r24, 0x8A	; 138
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 19 05 	call	0xa32	; 0xa32 <LCD_writestr>
	 
	 TMR0_delayms(MS_DELAY_2000); /** WAIT 2 SECONDS **/
     1fa:	60 ed       	ldi	r22, 0xD0	; 208
     1fc:	77 e0       	ldi	r23, 0x07	; 7
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>
	 
	 LCD_sendcmd(LCD_CLEAR);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 48 04 	call	0x890	; 0x890 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     20c:	64 e1       	ldi	r22, 0x14	; 20
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>
	 
}
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	08 95       	ret

00000222 <APP_start>:

void APP_start()
{	
	u32_g_tick = 0 , u32_g_delay = 0 ; /** VARIABLES TO HANDLE THE DELAY **/
     222:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     226:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     22a:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     22e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
     232:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <u32_g_delay>
     236:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <u32_g_delay+0x1>
     23a:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <u32_g_delay+0x2>
     23e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <u32_g_delay+0x3>
	
	US_sendtrigger(); /** SEND TRIGGER **/
     242:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <US_sendtrigger>
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     246:	88 e8       	ldi	r24, 0x88	; 136
     248:	93 e1       	ldi	r25, 0x13	; 19
     24a:	0e 94 81 09 	call	0x1302	; 0x1302 <TMR2_getovs>
     24e:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     252:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     256:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     25a:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     25e:	82 c0       	rjmp	.+260    	; 0x364 <APP_start+0x142>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
     260:	af e9       	ldi	r26, 0x9F	; 159
     262:	b6 e4       	ldi	r27, 0x46	; 70
     264:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__umulhisi3>
     268:	88 0f       	add	r24, r24
     26a:	89 2f       	mov	r24, r25
     26c:	88 1f       	adc	r24, r24
     26e:	99 0b       	sbc	r25, r25
     270:	91 95       	neg	r25
     272:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <u8_g_distance>
			
			TMR2_start() ; /** START TIMER 2 **/
     276:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <TMR2_start>
		
			while (u32_g_tick < u32_g_delay)
     27a:	2d c0       	rjmp	.+90     	; 0x2d6 <APP_start+0xb4>
			{
				/** MOVE WITH 50% SPEED FOR 5 MIN **/
				MOTOR_turnon(MOTOR1_ID);
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     288:	82 e0       	ldi	r24, 0x02	; 2
     28a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
				LCD_goto(LCD_POS_0, LCD_POS_1) ;
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_goto>
				TMR0_delaymicros(SPEED_50_ON_TIME);
     29c:	60 ee       	ldi	r22, 0xE0	; 224
     29e:	74 ec       	ldi	r23, 0xC4	; 196
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
				LCD_writestr("Distance :");
     2c0:	82 e9       	ldi	r24, 0x92	; 146
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 19 05 	call	0xa32	; 0xa32 <LCD_writestr>
				LCD_writeint(u8_g_distance);
     2c8:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writeint>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
			
			TMR2_start() ; /** START TIMER 2 **/
		
			while (u32_g_tick < u32_g_delay)
     2d6:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     2da:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     2de:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     2e2:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     2e6:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     2ea:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     2ee:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     2f2:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     2f6:	48 17       	cp	r20, r24
     2f8:	59 07       	cpc	r21, r25
     2fa:	6a 07       	cpc	r22, r26
     2fc:	7b 07       	cpc	r23, r27
     2fe:	08 f4       	brcc	.+2      	; 0x302 <APP_start+0xe0>
     300:	bd cf       	rjmp	.-134    	; 0x27c <APP_start+0x5a>
				MOTOR_turnoff(MOTOR4_ID);
				LCD_writestr("Distance :");
				LCD_writeint(u8_g_distance);
			}
					
			TMR2_stop() ; /** STOP TIMER2 AFTER THE 5 SECONDS **/
     302:	0e 94 76 09 	call	0x12ec	; 0x12ec <TMR2_stop>
					
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     312:	82 e0       	ldi	r24, 0x02	; 2
     314:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
			LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_goto>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     326:	60 e5       	ldi	r22, 0x50	; 80
     328:	70 e5       	ldi	r23, 0x50	; 80
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
			LCD_writestr("Distance :");
     34a:	82 e9       	ldi	r24, 0x92	; 146
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 19 05 	call	0xa32	; 0xa32 <LCD_writestr>
			LCD_writeint(u8_g_distance);
     352:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writeint>
			
			US_sendtrigger(); /** SEND TRIGGER **/
     360:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <US_sendtrigger>
	
	US_sendtrigger(); /** SEND TRIGGER **/
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     364:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <u16_g_time>
     368:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     36c:	20 3b       	cpi	r18, 0xB0	; 176
     36e:	80 e8       	ldi	r24, 0x80	; 128
     370:	38 07       	cpc	r19, r24
     372:	08 f0       	brcs	.+2      	; 0x376 <APP_start+0x154>
     374:	75 cf       	rjmp	.-278    	; 0x260 <APP_start+0x3e>
     376:	2f c0       	rjmp	.+94     	; 0x3d6 <APP_start+0x1b4>
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
	{
		/** CONTINUE WITH 30% **/
		MOTOR_turnon(MOTOR1_ID);
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     38a:	83 e0       	ldi	r24, 0x03	; 3
     38c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
		LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     390:	61 e0       	ldi	r22, 0x01	; 1
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_goto>
		TMR0_delaymicros(SPEED_30_ON_TIME);
     398:	60 e5       	ldi	r22, 0x50	; 80
     39a:	70 e5       	ldi	r23, 0x50	; 80
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     3b0:	82 e0       	ldi	r24, 0x02	; 2
     3b2:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     3b6:	83 e0       	ldi	r24, 0x03	; 3
     3b8:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
		LCD_writestr("Distance :");
     3bc:	82 e9       	ldi	r24, 0x92	; 146
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 19 05 	call	0xa32	; 0xa32 <LCD_writestr>
		LCD_writeint(u8_g_distance);
     3c4:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writeint>
		US_sendtrigger(); /** SEND TRIGGER **/
     3d2:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <US_sendtrigger>
			LCD_writeint(u8_g_distance);
			
			US_sendtrigger(); /** SEND TRIGGER **/
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
     3d6:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     3da:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     3de:	80 36       	cpi	r24, 0x60	; 96
     3e0:	96 43       	sbci	r25, 0x36	; 54
     3e2:	50 f6       	brcc	.-108    	; 0x378 <APP_start+0x156>
		LCD_writestr("Distance :");
		LCD_writeint(u8_g_distance);
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	
	u32_g_tick = 0 ;
     3e4:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
     3e8:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     3ec:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     3f0:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     3f4:	84 ef       	ldi	r24, 0xF4	; 244
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	0e 94 81 09 	call	0x1302	; 0x1302 <TMR2_getovs>
     3fc:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     400:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     404:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     408:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     40c:	3d c0       	rjmp	.+122    	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
	{
		/** STOP THEN ROTATE **/
		MOTOR_turnoff(MOTOR1_ID);
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
		
		LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_goto>
		LCD_writestr("Distance :");
     42e:	82 e9       	ldi	r24, 0x92	; 146
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 19 05 	call	0xa32	; 0xa32 <LCD_writestr>
		LCD_writeint(u8_g_distance);
     436:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writeint>
		
		TMR2_start() ; /** START TIMER 2 **/
     444:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <TMR2_start>
		while (u32_g_tick < u32_g_delay)
     448:	06 c0       	rjmp	.+12     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     450:	83 e0       	ldi	r24, 0x03	; 3
     452:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
		LCD_goto(LCD_POS_0 , LCD_POS_1) ;
		LCD_writestr("Distance :");
		LCD_writeint(u8_g_distance);
		
		TMR2_start() ; /** START TIMER 2 **/
		while (u32_g_tick < u32_g_delay)
     456:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     45a:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     45e:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     462:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     466:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     46a:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     46e:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     472:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     476:	48 17       	cp	r20, r24
     478:	59 07       	cpc	r21, r25
     47a:	6a 07       	cpc	r22, r26
     47c:	7b 07       	cpc	r23, r27
     47e:	28 f3       	brcs	.-54     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop(); /** STOP TIMER 2 **/
     480:	0e 94 76 09 	call	0x12ec	; 0x12ec <TMR2_stop>
// 			MOTOR_turnoff(MOTOR4_ID);
// 			LCD_writestr("Distance :");
// 			LCD_writeint(u8_g_distance);
// 			US_sendtrigger(); /** SEND TRIGGER **/
// 		}
		US_sendtrigger(); /** SEND TRIGGER **/
     484:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <US_sendtrigger>
	}
	
	u32_g_tick = 0 ;
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     488:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     48c:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     490:	80 54       	subi	r24, 0x40	; 64
     492:	94 42       	sbci	r25, 0x24	; 36
     494:	80 32       	cpi	r24, 0x20	; 32
     496:	92 41       	sbci	r25, 0x12	; 18
     498:	08 f4       	brcc	.+2      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
     49a:	b9 cf       	rjmp	.-142    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     49c:	4f c0       	rjmp	.+158    	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
	{
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	0e 94 57 06 	call	0xcae	; 0xcae <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR2_ID);
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	0e 94 57 06 	call	0xcae	; 0xcae <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR3_ID);
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	0e 94 57 06 	call	0xcae	; 0xcae <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR4_ID);
     4b0:	83 e0       	ldi	r24, 0x03	; 3
     4b2:	0e 94 57 06 	call	0xcae	; 0xcae <MOTOR_rotateanticlkdir>
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     4b6:	2f c0       	rjmp	.+94     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
		{
			/** GO BACKWARDS WITH 30% SPEED **/
			MOTOR_turnon(MOTOR1_ID);
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     4ca:	83 e0       	ldi	r24, 0x03	; 3
     4cc:	0e 94 b7 06 	call	0xd6e	; 0xd6e <MOTOR_turnon>
			LCD_goto(LCD_POS_0 , LCD_POS_1) ;
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_goto>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     4d8:	60 e5       	ldi	r22, 0x50	; 80
     4da:	70 e5       	ldi	r23, 0x50	; 80
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     4f6:	83 e0       	ldi	r24, 0x03	; 3
     4f8:	0e 94 91 06 	call	0xd22	; 0xd22 <MOTOR_turnoff>
			LCD_writestr("Distance :");
     4fc:	82 e9       	ldi	r24, 0x92	; 146
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 19 05 	call	0xa32	; 0xa32 <LCD_writestr>
			LCD_writeint(u8_g_distance);
     504:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 44 05 	call	0xa88	; 0xa88 <LCD_writeint>
			US_sendtrigger(); /** SEND TRIGGER **/
     512:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <US_sendtrigger>
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
		MOTOR_rotateanticlkdir(MOTOR2_ID);
		MOTOR_rotateanticlkdir(MOTOR3_ID);
		MOTOR_rotateanticlkdir(MOTOR4_ID);
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     516:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     51a:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     51e:	80 31       	cpi	r24, 0x10	; 16
     520:	96 42       	sbci	r25, 0x26	; 38
     522:	50 f2       	brcs	.-108    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
			LCD_writestr("Distance :");
			LCD_writeint(u8_g_distance);
			US_sendtrigger(); /** SEND TRIGGER **/
		}
		
		MOTOR_rotateclkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0e 94 1d 06 	call	0xc3a	; 0xc3a <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR2_ID);
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR3_ID);
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	0e 94 1d 06 	call	0xc3a	; 0xc3a <MOTOR_rotateclkdir>
		MOTOR_rotateclkdir(MOTOR4_ID);
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	0e 94 1d 06 	call	0xc3a	; 0xc3a <MOTOR_rotateclkdir>
// 			US_sendtrigger(); /** SEND TRIGGER **/
// 		}
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
     53c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <u16_g_time>
     540:	90 91 a9 00 	lds	r25, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     544:	80 34       	cpi	r24, 0x40	; 64
     546:	94 42       	sbci	r25, 0x24	; 36
     548:	08 f4       	brcc	.+2      	; 0x54c <__EEPROM_REGION_LENGTH__+0x14c>
     54a:	a9 cf       	rjmp	.-174    	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
// 				US_sendtrigger(); /** SEND TRIGGER **/
// 			}
		}
		
	//}
}
     54c:	08 95       	ret

0000054e <__vector_1>:



/** EXTI0 **/
ISR(INT0_vect)
{
     54e:	1f 92       	push	r1
     550:	0f 92       	push	r0
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	0f 92       	push	r0
     556:	11 24       	eor	r1, r1
     558:	2f 93       	push	r18
     55a:	3f 93       	push	r19
     55c:	4f 93       	push	r20
     55e:	5f 93       	push	r21
     560:	6f 93       	push	r22
     562:	7f 93       	push	r23
     564:	8f 93       	push	r24
     566:	9f 93       	push	r25
     568:	af 93       	push	r26
     56a:	bf 93       	push	r27
     56c:	ef 93       	push	r30
     56e:	ff 93       	push	r31
	u8_echoedge++ ; /** INCREASE THE ECHO BY 1 **/
     570:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <u8_echoedge>
     574:	8f 5f       	subi	r24, 0xFF	; 255
     576:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <u8_echoedge>
	
	if(u8_echoedge == FIRST_EDGE ) /** FIRST CHANGE (RISING EDGE) **/
     57a:	81 30       	cpi	r24, 0x01	; 1
     57c:	19 f4       	brne	.+6      	; 0x584 <__vector_1+0x36>
	{
		ICU_start(); /** START ICU / COUNTING **/
     57e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <ICU_start>
     582:	1f c0       	rjmp	.+62     	; 0x5c2 <__vector_1+0x74>
	}
	
	else if(u8_echoedge == SECOND_EDGE) /** SECOND CHANGE (FALLING EDGE) **/
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	e9 f4       	brne	.+58     	; 0x5c2 <__vector_1+0x74>
	{
		ICU_stop(); /** STOP ICU / COUNTING **/
     588:	0e 94 64 03 	call	0x6c8	; 0x6c8 <ICU_stop>
		
		u16_g_time = ICU_getvalue(); /** GET PULSE LENGTH **/
     58c:	0e 94 4c 03 	call	0x698	; 0x698 <ICU_getvalue>
     590:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <u16_g_time+0x1>
     594:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <u16_g_time>
		
		ICU_setcounterval(INITIATE_COUNTER_VAL); /** START COUNTING FROM ZERO **/
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <ICU_setcounterval>
				
		u8_echoedge = 0 ;     /** REINITIALIZE ECHO EDGE TO 0 TO REPEAT IN ANY CHANGE AGAIN **/
     5a0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <u8_echoedge>
		
		u8_g_distance = (u16_g_time / US_DIVIDER) ; /** CALCULATE THE DISTANCE **/
     5a4:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <u16_g_time>
     5a8:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     5ac:	af e9       	ldi	r26, 0x9F	; 159
     5ae:	b6 e4       	ldi	r27, 0x46	; 70
     5b0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <__umulhisi3>
     5b4:	88 0f       	add	r24, r24
     5b6:	89 2f       	mov	r24, r25
     5b8:	88 1f       	adc	r24, r24
     5ba:	99 0b       	sbc	r25, r25
     5bc:	91 95       	neg	r25
     5be:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <u8_g_distance>
	}
}
     5c2:	ff 91       	pop	r31
     5c4:	ef 91       	pop	r30
     5c6:	bf 91       	pop	r27
     5c8:	af 91       	pop	r26
     5ca:	9f 91       	pop	r25
     5cc:	8f 91       	pop	r24
     5ce:	7f 91       	pop	r23
     5d0:	6f 91       	pop	r22
     5d2:	5f 91       	pop	r21
     5d4:	4f 91       	pop	r20
     5d6:	3f 91       	pop	r19
     5d8:	2f 91       	pop	r18
     5da:	0f 90       	pop	r0
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	0f 90       	pop	r0
     5e0:	1f 90       	pop	r1
     5e2:	18 95       	reti

000005e4 <__vector_9>:


/** TIMER 1 OVERFLOW **/ 
ISR(TIMER1_OVF_vect)
{
     5e4:	1f 92       	push	r1
     5e6:	0f 92       	push	r0
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	0f 92       	push	r0
     5ec:	11 24       	eor	r1, r1
	/** DO NOTHING **/ 
}
     5ee:	0f 90       	pop	r0
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	0f 90       	pop	r0
     5f4:	1f 90       	pop	r1
     5f6:	18 95       	reti

000005f8 <__vector_5>:

/** TIMER 0 OVERFLOW  **/
ISR(TIMER2_OVF_vect)
{
     5f8:	1f 92       	push	r1
     5fa:	0f 92       	push	r0
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	0f 92       	push	r0
     600:	11 24       	eor	r1, r1
     602:	8f 93       	push	r24
     604:	9f 93       	push	r25
     606:	af 93       	push	r26
     608:	bf 93       	push	r27
	u32_g_tick++ ; /** INCREASE TICKS **/  
     60a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
     60e:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <__data_end+0x1>
     612:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <__data_end+0x2>
     616:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <__data_end+0x3>
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	a1 1d       	adc	r26, r1
     61e:	b1 1d       	adc	r27, r1
     620:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
     624:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <__data_end+0x1>
     628:	a0 93 a0 00 	sts	0x00A0, r26	; 0x8000a0 <__data_end+0x2>
     62c:	b0 93 a1 00 	sts	0x00A1, r27	; 0x8000a1 <__data_end+0x3>
}
     630:	bf 91       	pop	r27
     632:	af 91       	pop	r26
     634:	9f 91       	pop	r25
     636:	8f 91       	pop	r24
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <Button_init>:
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	63 e0       	ldi	r22, 0x03	; 3
     646:	83 e0       	ldi	r24, 0x03	; 3
     648:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     64c:	08 95       	ret

0000064e <Is_pressed>:
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	1f 92       	push	r1
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	8a 01       	movw	r16, r20
     65e:	19 82       	std	Y+1, r1	; 0x01
     660:	ae 01       	movw	r20, r28
     662:	4f 5f       	subi	r20, 0xFF	; 255
     664:	5f 4f       	sbci	r21, 0xFF	; 255
     666:	0e 94 f9 07 	call	0xff2	; 0xff2 <DIO_readpin>
     66a:	81 11       	cpse	r24, r1
     66c:	05 c0       	rjmp	.+10     	; 0x678 <Is_pressed+0x2a>
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	f8 01       	movw	r30, r16
     672:	80 83       	st	Z, r24
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	04 c0       	rjmp	.+8      	; 0x680 <Is_pressed+0x32>
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	f8 01       	movw	r30, r16
     67c:	80 83       	st	Z, r24
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	0f 90       	pop	r0
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	08 95       	ret

0000068c <ICU_init>:
/**************************************************************/
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	TMR1_init(); /** INITIALIZE TIMER 1 MODULE **/
     68c:	0e 94 18 09 	call	0x1230	; 0x1230 <TMR1_init>
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
     690:	0e 94 75 08 	call	0x10ea	; 0x10ea <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	08 95       	ret

00000698 <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	00 d0       	rcall	.+0      	; 0x69e <ICU_getvalue+0x6>
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
     6a2:	1a 82       	std	Y+2, r1	; 0x02
     6a4:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	0e 94 4b 09 	call	0x1296	; 0x1296 <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	9a 81       	ldd	r25, Y+2	; 0x02
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <ICU_start>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_start(void)
{
	TMR1_start(); /** START TIMER1 COUNTING **/
     6bc:	0e 94 33 09 	call	0x1266	; 0x1266 <TMR1_start>
     6c0:	08 95       	ret

000006c2 <ICU_setcounterval>:
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_setcounterval(uint16t u16_a_counterval)
{
	TMR1_setcounterval(u16_a_counterval);
     6c2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <TMR1_setcounterval>
     6c6:	08 95       	ret

000006c8 <ICU_stop>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_stop(void)
{
	TMR1_stop();  /** STOP TIMER1 COUNTING **/
     6c8:	0e 94 40 09 	call	0x1280	; 0x1280 <TMR1_stop>
     6cc:	08 95       	ret

000006ce <KEYPAD_init>:
     6ce:	41 e0       	ldi	r20, 0x01	; 1
     6d0:	65 e0       	ldi	r22, 0x05	; 5
     6d2:	83 e0       	ldi	r24, 0x03	; 3
     6d4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     6d8:	41 e0       	ldi	r20, 0x01	; 1
     6da:	66 e0       	ldi	r22, 0x06	; 6
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     6e2:	41 e0       	ldi	r20, 0x01	; 1
     6e4:	67 e0       	ldi	r22, 0x07	; 7
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	61 e0       	ldi	r22, 0x01	; 1
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	64 e0       	ldi	r22, 0x04	; 4
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     70a:	41 e0       	ldi	r20, 0x01	; 1
     70c:	65 e0       	ldi	r22, 0x05	; 5
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     714:	41 e0       	ldi	r20, 0x01	; 1
     716:	66 e0       	ldi	r22, 0x06	; 6
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     71e:	41 e0       	ldi	r20, 0x01	; 1
     720:	67 e0       	ldi	r22, 0x07	; 7
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     728:	41 e0       	ldi	r20, 0x01	; 1
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	83 e0       	ldi	r24, 0x03	; 3
     72e:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     732:	41 e0       	ldi	r20, 0x01	; 1
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	83 e0       	ldi	r24, 0x03	; 3
     738:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     73c:	41 e0       	ldi	r20, 0x01	; 1
     73e:	64 e0       	ldi	r22, 0x04	; 4
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	08 95       	ret

0000074a <KEYPAD_read>:
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	0f 93       	push	r16
     750:	1f 93       	push	r17
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	00 d0       	rcall	.+0      	; 0x758 <KEYPAD_read+0xe>
     758:	00 d0       	rcall	.+0      	; 0x75a <KEYPAD_read+0x10>
     75a:	00 d0       	rcall	.+0      	; 0x75c <KEYPAD_read+0x12>
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	7c 01       	movw	r14, r24
     762:	85 e0       	ldi	r24, 0x05	; 5
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	86 e0       	ldi	r24, 0x06	; 6
     768:	8a 83       	std	Y+2, r24	; 0x02
     76a:	87 e0       	ldi	r24, 0x07	; 7
     76c:	8b 83       	std	Y+3, r24	; 0x03
     76e:	1c 82       	std	Y+4, r1	; 0x04
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	8d 83       	std	Y+5, r24	; 0x05
     774:	84 e0       	ldi	r24, 0x04	; 4
     776:	8e 83       	std	Y+6, r24	; 0x06
     778:	00 e0       	ldi	r16, 0x00	; 0
     77a:	79 c0       	rjmp	.+242    	; 0x86e <__stack+0xf>
     77c:	03 30       	cpi	r16, 0x03	; 3
     77e:	39 f4       	brne	.+14     	; 0x78e <KEYPAD_read+0x44>
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	83 e0       	ldi	r24, 0x03	; 3
     786:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	62 c0       	rjmp	.+196    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     78e:	e1 e0       	ldi	r30, 0x01	; 1
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	ec 0f       	add	r30, r28
     794:	fd 1f       	adc	r31, r29
     796:	e0 0f       	add	r30, r16
     798:	f1 1d       	adc	r31, r1
     79a:	40 e0       	ldi	r20, 0x00	; 0
     79c:	60 81       	ld	r22, Z
     79e:	83 e0       	ldi	r24, 0x03	; 3
     7a0:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     7a4:	f2 cf       	rjmp	.-28     	; 0x78a <KEYPAD_read+0x40>
     7a6:	e4 e0       	ldi	r30, 0x04	; 4
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	ec 0f       	add	r30, r28
     7ac:	fd 1f       	adc	r31, r29
     7ae:	e1 0f       	add	r30, r17
     7b0:	f1 1d       	adc	r31, r1
     7b2:	a7 01       	movw	r20, r14
     7b4:	60 81       	ld	r22, Z
     7b6:	83 e0       	ldi	r24, 0x03	; 3
     7b8:	0e 94 f9 07 	call	0xff2	; 0xff2 <DIO_readpin>
     7bc:	f7 01       	movw	r30, r14
     7be:	80 81       	ld	r24, Z
     7c0:	81 11       	cpse	r24, r1
     7c2:	46 c0       	rjmp	.+140    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
     7c4:	01 11       	cpse	r16, r1
     7c6:	11 c0       	rjmp	.+34     	; 0x7ea <KEYPAD_read+0xa0>
     7c8:	11 11       	cpse	r17, r1
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <KEYPAD_read+0x88>
     7cc:	81 e3       	ldi	r24, 0x31	; 49
     7ce:	80 83       	st	Z, r24
     7d0:	33 c0       	rjmp	.+102    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     7d2:	11 30       	cpi	r17, 0x01	; 1
     7d4:	21 f4       	brne	.+8      	; 0x7de <KEYPAD_read+0x94>
     7d6:	82 e3       	ldi	r24, 0x32	; 50
     7d8:	f7 01       	movw	r30, r14
     7da:	80 83       	st	Z, r24
     7dc:	2d c0       	rjmp	.+90     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     7de:	12 30       	cpi	r17, 0x02	; 2
     7e0:	59 f5       	brne	.+86     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     7e2:	83 e3       	ldi	r24, 0x33	; 51
     7e4:	f7 01       	movw	r30, r14
     7e6:	80 83       	st	Z, r24
     7e8:	27 c0       	rjmp	.+78     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     7ea:	01 30       	cpi	r16, 0x01	; 1
     7ec:	91 f4       	brne	.+36     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     7ee:	11 11       	cpse	r17, r1
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <KEYPAD_read+0xb0>
     7f2:	84 e3       	ldi	r24, 0x34	; 52
     7f4:	f7 01       	movw	r30, r14
     7f6:	80 83       	st	Z, r24
     7f8:	1f c0       	rjmp	.+62     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     7fa:	11 30       	cpi	r17, 0x01	; 1
     7fc:	21 f4       	brne	.+8      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7fe:	85 e3       	ldi	r24, 0x35	; 53
     800:	f7 01       	movw	r30, r14
     802:	80 83       	st	Z, r24
     804:	19 c0       	rjmp	.+50     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     806:	12 30       	cpi	r17, 0x02	; 2
     808:	b9 f4       	brne	.+46     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     80a:	86 e3       	ldi	r24, 0x36	; 54
     80c:	f7 01       	movw	r30, r14
     80e:	80 83       	st	Z, r24
     810:	13 c0       	rjmp	.+38     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     812:	02 30       	cpi	r16, 0x02	; 2
     814:	89 f4       	brne	.+34     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     816:	11 11       	cpse	r17, r1
     818:	04 c0       	rjmp	.+8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     81a:	87 e3       	ldi	r24, 0x37	; 55
     81c:	f7 01       	movw	r30, r14
     81e:	80 83       	st	Z, r24
     820:	0b c0       	rjmp	.+22     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     822:	11 30       	cpi	r17, 0x01	; 1
     824:	21 f4       	brne	.+8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     826:	88 e3       	ldi	r24, 0x38	; 56
     828:	f7 01       	movw	r30, r14
     82a:	80 83       	st	Z, r24
     82c:	05 c0       	rjmp	.+10     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     82e:	12 30       	cpi	r17, 0x02	; 2
     830:	19 f4       	brne	.+6      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     832:	89 e3       	ldi	r24, 0x39	; 57
     834:	f7 01       	movw	r30, r14
     836:	80 83       	st	Z, r24
     838:	e1 e0       	ldi	r30, 0x01	; 1
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	ec 0f       	add	r30, r28
     83e:	fd 1f       	adc	r31, r29
     840:	e0 0f       	add	r30, r16
     842:	f1 1d       	adc	r31, r1
     844:	60 81       	ld	r22, Z
     846:	83 e0       	ldi	r24, 0x03	; 3
     848:	0e 94 37 08 	call	0x106e	; 0x106e <DIO_togglepin>
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	13 c0       	rjmp	.+38     	; 0x876 <__stack+0x17>
     850:	1f 5f       	subi	r17, 0xFF	; 255
     852:	13 30       	cpi	r17, 0x03	; 3
     854:	08 f4       	brcc	.+2      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     856:	a7 cf       	rjmp	.-178    	; 0x7a6 <KEYPAD_read+0x5c>
     858:	e1 e0       	ldi	r30, 0x01	; 1
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	ec 0f       	add	r30, r28
     85e:	fd 1f       	adc	r31, r29
     860:	e0 0f       	add	r30, r16
     862:	f1 1d       	adc	r31, r1
     864:	60 81       	ld	r22, Z
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	0e 94 37 08 	call	0x106e	; 0x106e <DIO_togglepin>
     86c:	0f 5f       	subi	r16, 0xFF	; 255
     86e:	03 30       	cpi	r16, 0x03	; 3
     870:	08 f4       	brcc	.+2      	; 0x874 <__stack+0x15>
     872:	84 cf       	rjmp	.-248    	; 0x77c <KEYPAD_read+0x32>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	26 96       	adiw	r28, 0x06	; 6
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	f8 94       	cli
     87c:	de bf       	out	0x3e, r29	; 62
     87e:	0f be       	out	0x3f, r0	; 63
     880:	cd bf       	out	0x3d, r28	; 61
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	08 95       	ret

00000890 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     890:	cf 93       	push	r28
     892:	c8 2f       	mov	r28, r24
     894:	0e 94 81 08 	call	0x1102	; 0x1102 <TMR0_init>
     898:	40 e0       	ldi	r20, 0x00	; 0
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     8a2:	40 e0       	ldi	r20, 0x00	; 0
     8a4:	62 e0       	ldi	r22, 0x02	; 2
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	63 e0       	ldi	r22, 0x03	; 3
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     8b6:	8b b3       	in	r24, 0x1b	; 27
     8b8:	9c 2f       	mov	r25, r28
     8ba:	90 7f       	andi	r25, 0xF0	; 240
     8bc:	8f 70       	andi	r24, 0x0F	; 15
     8be:	89 2b       	or	r24, r25
     8c0:	8b bb       	out	0x1b, r24	; 27
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	63 e0       	ldi	r22, 0x03	; 3
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     8cc:	61 e0       	ldi	r22, 0x01	; 1
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	63 e0       	ldi	r22, 0x03	; 3
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     8e2:	20 e1       	ldi	r18, 0x10	; 16
     8e4:	c2 9f       	mul	r28, r18
     8e6:	c0 01       	movw	r24, r0
     8e8:	11 24       	eor	r1, r1
     8ea:	9b b3       	in	r25, 0x1b	; 27
     8ec:	9f 70       	andi	r25, 0x0F	; 15
     8ee:	89 2b       	or	r24, r25
     8f0:	8b bb       	out	0x1b, r24	; 27
     8f2:	41 e0       	ldi	r20, 0x01	; 1
     8f4:	63 e0       	ldi	r22, 0x03	; 3
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>
     908:	40 e0       	ldi	r20, 0x00	; 0
     90a:	63 e0       	ldi	r22, 0x03	; 3
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     912:	65 e0       	ldi	r22, 0x05	; 5
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>
     91e:	cf 91       	pop	r28
     920:	08 95       	ret

00000922 <LCD_init>:
     922:	0e 94 81 08 	call	0x1102	; 0x1102 <TMR0_init>
     926:	41 e0       	ldi	r20, 0x01	; 1
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     930:	41 e0       	ldi	r20, 0x01	; 1
     932:	62 e0       	ldi	r22, 0x02	; 2
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     93a:	41 e0       	ldi	r20, 0x01	; 1
     93c:	63 e0       	ldi	r22, 0x03	; 3
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     944:	41 e0       	ldi	r20, 0x01	; 1
     946:	64 e0       	ldi	r22, 0x04	; 4
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     94e:	41 e0       	ldi	r20, 0x01	; 1
     950:	65 e0       	ldi	r22, 0x05	; 5
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	66 e0       	ldi	r22, 0x06	; 6
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	67 e0       	ldi	r22, 0x07	; 7
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     96c:	64 e1       	ldi	r22, 0x14	; 20
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>
     978:	83 e3       	ldi	r24, 0x33	; 51
     97a:	0e 94 48 04 	call	0x890	; 0x890 <LCD_sendcmd>
     97e:	82 e3       	ldi	r24, 0x32	; 50
     980:	0e 94 48 04 	call	0x890	; 0x890 <LCD_sendcmd>
     984:	88 e2       	ldi	r24, 0x28	; 40
     986:	0e 94 48 04 	call	0x890	; 0x890 <LCD_sendcmd>
     98a:	8c e0       	ldi	r24, 0x0C	; 12
     98c:	0e 94 48 04 	call	0x890	; 0x890 <LCD_sendcmd>
     990:	86 e0       	ldi	r24, 0x06	; 6
     992:	0e 94 48 04 	call	0x890	; 0x890 <LCD_sendcmd>
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	0e 94 48 04 	call	0x890	; 0x890 <LCD_sendcmd>
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	0e 94 48 04 	call	0x890	; 0x890 <LCD_sendcmd>
     9a2:	08 95       	ret

000009a4 <LCD_writechar>:
     9a4:	cf 93       	push	r28
     9a6:	c8 2f       	mov	r28, r24
     9a8:	41 e0       	ldi	r20, 0x01	; 1
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	62 e0       	ldi	r22, 0x02	; 2
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	63 e0       	ldi	r22, 0x03	; 3
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     9c6:	8b b3       	in	r24, 0x1b	; 27
     9c8:	9c 2f       	mov	r25, r28
     9ca:	90 7f       	andi	r25, 0xF0	; 240
     9cc:	8f 70       	andi	r24, 0x0F	; 15
     9ce:	89 2b       	or	r24, r25
     9d0:	8b bb       	out	0x1b, r24	; 27
     9d2:	41 e0       	ldi	r20, 0x01	; 1
     9d4:	63 e0       	ldi	r22, 0x03	; 3
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>
     9e8:	40 e0       	ldi	r20, 0x00	; 0
     9ea:	63 e0       	ldi	r22, 0x03	; 3
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     9f2:	20 e1       	ldi	r18, 0x10	; 16
     9f4:	c2 9f       	mul	r28, r18
     9f6:	c0 01       	movw	r24, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	9b b3       	in	r25, 0x1b	; 27
     9fc:	9f 70       	andi	r25, 0x0F	; 15
     9fe:	89 2b       	or	r24, r25
     a00:	8b bb       	out	0x1b, r24	; 27
     a02:	41 e0       	ldi	r20, 0x01	; 1
     a04:	63 e0       	ldi	r22, 0x03	; 3
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     a0c:	61 e0       	ldi	r22, 0x01	; 1
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	63 e0       	ldi	r22, 0x03	; 3
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
     a22:	65 e0       	ldi	r22, 0x05	; 5
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMR0_delayms>
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <LCD_writestr>:
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	8c 01       	movw	r16, r24
     a3a:	c0 e0       	ldi	r28, 0x00	; 0
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <LCD_writestr+0x12>
     a3e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_writechar>
     a42:	cf 5f       	subi	r28, 0xFF	; 255
     a44:	f8 01       	movw	r30, r16
     a46:	ec 0f       	add	r30, r28
     a48:	f1 1d       	adc	r31, r1
     a4a:	80 81       	ld	r24, Z
     a4c:	81 11       	cpse	r24, r1
     a4e:	f7 cf       	rjmp	.-18     	; 0xa3e <LCD_writestr+0xc>
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	08 95       	ret

00000a58 <LCD_goto>:
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <LCD_goto+0x6>
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	90 e8       	ldi	r25, 0x80	; 128
     a64:	99 83       	std	Y+1, r25	; 0x01
     a66:	90 ec       	ldi	r25, 0xC0	; 192
     a68:	9a 83       	std	Y+2, r25	; 0x02
     a6a:	e1 e0       	ldi	r30, 0x01	; 1
     a6c:	f0 e0       	ldi	r31, 0x00	; 0
     a6e:	ec 0f       	add	r30, r28
     a70:	fd 1f       	adc	r31, r29
     a72:	e8 0f       	add	r30, r24
     a74:	f1 1d       	adc	r31, r1
     a76:	80 81       	ld	r24, Z
     a78:	86 0f       	add	r24, r22
     a7a:	0e 94 48 04 	call	0x890	; 0x890 <LCD_sendcmd>
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	2a 97       	sbiw	r28, 0x0a	; 10
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	f8 94       	cli
     a98:	de bf       	out	0x3e, r29	; 62
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     a9e:	99 23       	and	r25, r25
     aa0:	dc f5       	brge	.+118    	; 0xb18 <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
     aa2:	90 95       	com	r25
     aa4:	80 95       	com	r24
     aa6:	70 95       	com	r23
     aa8:	61 95       	neg	r22
     aaa:	7f 4f       	sbci	r23, 0xFF	; 255
     aac:	8f 4f       	sbci	r24, 0xFF	; 255
     aae:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     ab0:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     ab2:	13 c0       	rjmp	.+38     	; 0xada <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     ab4:	2a e0       	ldi	r18, 0x0A	; 10
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	0e 94 be 0a 	call	0x157c	; 0x157c <__divmodsi4>
     ac0:	e1 e0       	ldi	r30, 0x01	; 1
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	ec 0f       	add	r30, r28
     ac6:	fd 1f       	adc	r31, r29
     ac8:	e1 0f       	add	r30, r17
     aca:	f1 1d       	adc	r31, r1
     acc:	60 5d       	subi	r22, 0xD0	; 208
     ace:	60 83       	st	Z, r22
			s32_a_num /= 10;
     ad0:	62 2f       	mov	r22, r18
     ad2:	73 2f       	mov	r23, r19
     ad4:	84 2f       	mov	r24, r20
     ad6:	95 2f       	mov	r25, r21
			i++;
     ad8:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     ada:	16 16       	cp	r1, r22
     adc:	17 06       	cpc	r1, r23
     ade:	18 06       	cpc	r1, r24
     ae0:	19 06       	cpc	r1, r25
     ae2:	44 f3       	brlt	.-48     	; 0xab4 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     ae4:	e1 e0       	ldi	r30, 0x01	; 1
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	ec 0f       	add	r30, r28
     aea:	fd 1f       	adc	r31, r29
     aec:	e1 0f       	add	r30, r17
     aee:	f1 1d       	adc	r31, r1
     af0:	8d e2       	ldi	r24, 0x2D	; 45
     af2:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     af4:	1f 5f       	subi	r17, 0xFF	; 255
     af6:	0d c0       	rjmp	.+26     	; 0xb12 <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
     af8:	e1 2f       	mov	r30, r17
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	31 97       	sbiw	r30, 0x01	; 1
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	8c 0f       	add	r24, r28
     b04:	9d 1f       	adc	r25, r29
     b06:	e8 0f       	add	r30, r24
     b08:	f9 1f       	adc	r31, r25
     b0a:	80 81       	ld	r24, Z
     b0c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     b10:	11 50       	subi	r17, 0x01	; 1
     b12:	11 11       	cpse	r17, r1
     b14:	f1 cf       	rjmp	.-30     	; 0xaf8 <LCD_writeint+0x70>
     b16:	39 c0       	rjmp	.+114    	; 0xb8a <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     b18:	61 15       	cp	r22, r1
     b1a:	71 05       	cpc	r23, r1
     b1c:	81 05       	cpc	r24, r1
     b1e:	91 05       	cpc	r25, r1
     b20:	21 f4       	brne	.+8      	; 0xb2a <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
     b22:	80 e3       	ldi	r24, 0x30	; 48
     b24:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_writechar>
     b28:	30 c0       	rjmp	.+96     	; 0xb8a <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     b2a:	16 16       	cp	r1, r22
     b2c:	17 06       	cpc	r1, r23
     b2e:	18 06       	cpc	r1, r24
     b30:	19 06       	cpc	r1, r25
     b32:	ac f0       	brlt	.+42     	; 0xb5e <LCD_writeint+0xd6>
     b34:	2a c0       	rjmp	.+84     	; 0xb8a <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     b36:	2a e0       	ldi	r18, 0x0A	; 10
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	0e 94 be 0a 	call	0x157c	; 0x157c <__divmodsi4>
     b42:	e1 e0       	ldi	r30, 0x01	; 1
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	ec 0f       	add	r30, r28
     b48:	fd 1f       	adc	r31, r29
     b4a:	e1 0f       	add	r30, r17
     b4c:	f1 1d       	adc	r31, r1
     b4e:	60 5d       	subi	r22, 0xD0	; 208
     b50:	60 83       	st	Z, r22
			s32_a_num /= 10;
     b52:	62 2f       	mov	r22, r18
     b54:	73 2f       	mov	r23, r19
     b56:	84 2f       	mov	r24, r20
     b58:	95 2f       	mov	r25, r21
			i++;
     b5a:	1f 5f       	subi	r17, 0xFF	; 255
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <LCD_writeint+0xd8>
     b5e:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     b60:	16 16       	cp	r1, r22
     b62:	17 06       	cpc	r1, r23
     b64:	18 06       	cpc	r1, r24
     b66:	19 06       	cpc	r1, r25
     b68:	34 f3       	brlt	.-52     	; 0xb36 <LCD_writeint+0xae>
     b6a:	0d c0       	rjmp	.+26     	; 0xb86 <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     b6c:	e1 2f       	mov	r30, r17
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	31 97       	sbiw	r30, 0x01	; 1
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	8c 0f       	add	r24, r28
     b78:	9d 1f       	adc	r25, r29
     b7a:	e8 0f       	add	r30, r24
     b7c:	f9 1f       	adc	r31, r25
     b7e:	80 81       	ld	r24, Z
     b80:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     b84:	11 50       	subi	r17, 0x01	; 1
     b86:	11 11       	cpse	r17, r1
     b88:	f1 cf       	rjmp	.-30     	; 0xb6c <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     b8a:	2a 96       	adiw	r28, 0x0a	; 10
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	08 95       	ret

00000b9e <MOTOR_init>:
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
	
	switch(u8_a_motorid)
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	b9 f0       	breq	.+46     	; 0xbd0 <MOTOR_init+0x32>
     ba2:	28 f0       	brcs	.+10     	; 0xbae <MOTOR_init+0x10>
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	29 f1       	breq	.+74     	; 0xbf2 <MOTOR_init+0x54>
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	a1 f1       	breq	.+104    	; 0xc14 <MOTOR_init+0x76>
     bac:	44 c0       	rjmp	.+136    	; 0xc36 <MOTOR_init+0x98>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	61 e0       	ldi	r22, 0x01	; 1
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
     bc2:	41 e0       	ldi	r20, 0x01	; 1
     bc4:	62 e0       	ldi	r22, 0x02	; 2
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     bcc:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
		break;
     bce:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
     bd0:	41 e0       	ldi	r20, 0x01	; 1
     bd2:	63 e0       	ldi	r22, 0x03	; 3
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
     bda:	41 e0       	ldi	r20, 0x01	; 1
     bdc:	64 e0       	ldi	r22, 0x04	; 4
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     be4:	41 e0       	ldi	r20, 0x01	; 1
     be6:	65 e0       	ldi	r22, 0x05	; 5
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     bee:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     bf0:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
     bf2:	41 e0       	ldi	r20, 0x01	; 1
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
     bfc:	41 e0       	ldi	r20, 0x01	; 1
     bfe:	61 e0       	ldi	r22, 0x01	; 1
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     c06:	41 e0       	ldi	r20, 0x01	; 1
     c08:	62 e0       	ldi	r22, 0x02	; 2
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     c10:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     c12:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
     c14:	41 e0       	ldi	r20, 0x01	; 1
     c16:	63 e0       	ldi	r22, 0x03	; 3
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	64 e0       	ldi	r22, 0x04	; 4
     c22:	82 e0       	ldi	r24, 0x02	; 2
     c24:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	65 e0       	ldi	r22, 0x05	; 5
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     c32:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     c34:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_initstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     c36:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_initstatus ; /** RETURN THE FINAL STATUS **/
}
     c38:	08 95       	ret

00000c3a <MOTOR_rotateclkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	91 f0       	breq	.+36     	; 0xc62 <MOTOR_rotateclkdir+0x28>
     c3e:	28 f0       	brcs	.+10     	; 0xc4a <MOTOR_rotateclkdir+0x10>
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	d9 f0       	breq	.+54     	; 0xc7a <MOTOR_rotateclkdir+0x40>
     c44:	83 30       	cpi	r24, 0x03	; 3
     c46:	29 f1       	breq	.+74     	; 0xc92 <MOTOR_rotateclkdir+0x58>
     c48:	30 c0       	rjmp	.+96     	; 0xcaa <MOTOR_rotateclkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     c4a:	41 e0       	ldi	r20, 0x01	; 1
     c4c:	60 e0       	ldi	r22, 0x00	; 0
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     c54:	40 e0       	ldi	r20, 0x00	; 0
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c5e:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     c60:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     c62:	41 e0       	ldi	r20, 0x01	; 1
     c64:	63 e0       	ldi	r22, 0x03	; 3
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     c6c:	40 e0       	ldi	r20, 0x00	; 0
     c6e:	64 e0       	ldi	r22, 0x04	; 4
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c76:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     c78:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     c7a:	41 e0       	ldi	r20, 0x01	; 1
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     c84:	40 e0       	ldi	r20, 0x00	; 0
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     c8e:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     c90:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     c92:	41 e0       	ldi	r20, 0x01	; 1
     c94:	63 e0       	ldi	r22, 0x03	; 3
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	64 e0       	ldi	r22, 0x04	; 4
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ca6:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     ca8:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motordirectionstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     caa:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motordirectionstatus ; /** RETURN THE FINAL STATUS **/
}
     cac:	08 95       	ret

00000cae <MOTOR_rotateanticlkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	91 f0       	breq	.+36     	; 0xcd6 <MOTOR_rotateanticlkdir+0x28>
     cb2:	28 f0       	brcs	.+10     	; 0xcbe <MOTOR_rotateanticlkdir+0x10>
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	d9 f0       	breq	.+54     	; 0xcee <MOTOR_rotateanticlkdir+0x40>
     cb8:	83 30       	cpi	r24, 0x03	; 3
     cba:	29 f1       	breq	.+74     	; 0xd06 <MOTOR_rotateanticlkdir+0x58>
     cbc:	30 c0       	rjmp	.+96     	; 0xd1e <MOTOR_rotateanticlkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     cd2:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     cd4:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	63 e0       	ldi	r22, 0x03	; 3
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     ce0:	41 e0       	ldi	r20, 0x01	; 1
     ce2:	64 e0       	ldi	r22, 0x04	; 4
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     cea:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     cec:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     cee:	40 e0       	ldi	r20, 0x00	; 0
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	82 e0       	ldi	r24, 0x02	; 2
     cf4:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	61 e0       	ldi	r22, 0x01	; 1
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d02:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     d04:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	63 e0       	ldi	r22, 0x03	; 3
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	64 e0       	ldi	r22, 0x04	; 4
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d1a:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     d1c:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motorrotatestatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d1e:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
     d20:	08 95       	ret

00000d22 <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	69 f0       	breq	.+26     	; 0xd40 <MOTOR_turnoff+0x1e>
     d26:	28 f0       	brcs	.+10     	; 0xd32 <MOTOR_turnoff+0x10>
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	89 f0       	breq	.+34     	; 0xd4e <MOTOR_turnoff+0x2c>
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	b1 f0       	breq	.+44     	; 0xd5c <MOTOR_turnoff+0x3a>
     d30:	1c c0       	rjmp	.+56     	; 0xd6a <MOTOR_turnoff+0x48>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	62 e0       	ldi	r22, 0x02	; 2
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d3c:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     d3e:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	65 e0       	ldi	r22, 0x05	; 5
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d4a:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     d4c:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     d4e:	40 e0       	ldi	r20, 0x00	; 0
     d50:	62 e0       	ldi	r22, 0x02	; 2
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d58:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     d5a:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	65 e0       	ldi	r22, 0x05	; 5
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d66:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     d68:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d6a:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     d6c:	08 95       	ret

00000d6e <MOTOR_turnon>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	69 f0       	breq	.+26     	; 0xd8c <MOTOR_turnon+0x1e>
     d72:	28 f0       	brcs	.+10     	; 0xd7e <MOTOR_turnon+0x10>
     d74:	82 30       	cpi	r24, 0x02	; 2
     d76:	89 f0       	breq	.+34     	; 0xd9a <MOTOR_turnon+0x2c>
     d78:	83 30       	cpi	r24, 0x03	; 3
     d7a:	b1 f0       	breq	.+44     	; 0xda8 <MOTOR_turnon+0x3a>
     d7c:	1c c0       	rjmp	.+56     	; 0xdb6 <MOTOR_turnon+0x48>
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	62 e0       	ldi	r22, 0x02	; 2
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d88:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     d8a:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     d8c:	41 e0       	ldi	r20, 0x01	; 1
     d8e:	65 e0       	ldi	r22, 0x05	; 5
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d96:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     d98:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     d9a:	41 e0       	ldi	r20, 0x01	; 1
     d9c:	62 e0       	ldi	r22, 0x02	; 2
     d9e:	82 e0       	ldi	r24, 0x02	; 2
     da0:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     da4:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     da6:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     da8:	41 e0       	ldi	r20, 0x01	; 1
     daa:	65 e0       	ldi	r22, 0x05	; 5
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     db2:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     db4:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     db6:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     db8:	08 95       	ret

00000dba <US_init>:
/** RETURNS : VOID                                                **/
/*******************************************************************/
void US_init(void)
{
	/** INITIALIZE THE TRIGGER PIN AS OUTPUT PIN **/
	DIO_setpindir(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_OUTPUT);
     dba:	41 e0       	ldi	r20, 0x01	; 1
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <DIO_setpindir>
     dc4:	08 95       	ret

00000dc6 <US_sendtrigger>:
/** RETURNS : EN_ultrasonicreturn                                 **/
/*******************************************************************/
EN_ultrasonicreturn US_sendtrigger(void)
{
	/** SEND PULSE OF 15 MICROSECOND **/
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_HIGH);
     dc6:	41 e0       	ldi	r20, 0x01	; 1
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
	TMR0_delaymicros(15);
     dd0:	6f e0       	ldi	r22, 0x0F	; 15
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <TMR0_delaymicros>
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_LOW);
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	0e 94 7a 07 	call	0xef4	; 0xef4 <DIO_setpinvalue>
}
     de6:	08 95       	ret

00000de8 <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZE APPLICATION MODULES **/
     de8:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_setentry(); /** SET THE ENTRY DATA **/
     dec:	0e 94 76 00 	call	0xec	; 0xec <APP_setentry>
	
    while (1) 
    {	
		APP_start(); /** SUPER LOOP **/	
     df0:	0e 94 11 01 	call	0x222	; 0x222 <APP_start>
     df4:	fd cf       	rjmp	.-6      	; 0xdf0 <main+0x8>

00000df6 <DIO_setpindir>:
     df6:	44 23       	and	r20, r20
     df8:	19 f0       	breq	.+6      	; 0xe00 <DIO_setpindir+0xa>
     dfa:	41 30       	cpi	r20, 0x01	; 1
     dfc:	e9 f1       	breq	.+122    	; 0xe78 <DIO_setpindir+0x82>
     dfe:	74 c0       	rjmp	.+232    	; 0xee8 <DIO_setpindir+0xf2>
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	99 f0       	breq	.+38     	; 0xe2a <DIO_setpindir+0x34>
     e04:	28 f0       	brcs	.+10     	; 0xe10 <DIO_setpindir+0x1a>
     e06:	82 30       	cpi	r24, 0x02	; 2
     e08:	e9 f0       	breq	.+58     	; 0xe44 <DIO_setpindir+0x4e>
     e0a:	83 30       	cpi	r24, 0x03	; 3
     e0c:	41 f1       	breq	.+80     	; 0xe5e <DIO_setpindir+0x68>
     e0e:	6e c0       	rjmp	.+220    	; 0xeec <DIO_setpindir+0xf6>
     e10:	2a b3       	in	r18, 0x1a	; 26
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_setpindir+0x26>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	6a 95       	dec	r22
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_setpindir+0x22>
     e20:	80 95       	com	r24
     e22:	82 23       	and	r24, r18
     e24:	8a bb       	out	0x1a, r24	; 26
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	08 95       	ret
     e2a:	27 b3       	in	r18, 0x17	; 23
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_setpindir+0x40>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	6a 95       	dec	r22
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_setpindir+0x3c>
     e3a:	80 95       	com	r24
     e3c:	82 23       	and	r24, r18
     e3e:	87 bb       	out	0x17, r24	; 23
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	08 95       	ret
     e44:	24 b3       	in	r18, 0x14	; 20
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <DIO_setpindir+0x5a>
     e4c:	88 0f       	add	r24, r24
     e4e:	99 1f       	adc	r25, r25
     e50:	6a 95       	dec	r22
     e52:	e2 f7       	brpl	.-8      	; 0xe4c <DIO_setpindir+0x56>
     e54:	80 95       	com	r24
     e56:	82 23       	and	r24, r18
     e58:	84 bb       	out	0x14, r24	; 20
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	08 95       	ret
     e5e:	21 b3       	in	r18, 0x11	; 17
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <DIO_setpindir+0x74>
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	6a 95       	dec	r22
     e6c:	e2 f7       	brpl	.-8      	; 0xe66 <DIO_setpindir+0x70>
     e6e:	80 95       	com	r24
     e70:	82 23       	and	r24, r18
     e72:	81 bb       	out	0x11, r24	; 17
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	08 95       	ret
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	91 f0       	breq	.+36     	; 0xea0 <DIO_setpindir+0xaa>
     e7c:	28 f0       	brcs	.+10     	; 0xe88 <DIO_setpindir+0x92>
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	d9 f0       	breq	.+54     	; 0xeb8 <DIO_setpindir+0xc2>
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	29 f1       	breq	.+74     	; 0xed0 <DIO_setpindir+0xda>
     e86:	34 c0       	rjmp	.+104    	; 0xef0 <DIO_setpindir+0xfa>
     e88:	2a b3       	in	r18, 0x1a	; 26
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_setpindir+0x9e>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	6a 95       	dec	r22
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_setpindir+0x9a>
     e98:	82 2b       	or	r24, r18
     e9a:	8a bb       	out	0x1a, r24	; 26
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	08 95       	ret
     ea0:	27 b3       	in	r18, 0x17	; 23
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_setpindir+0xb6>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	6a 95       	dec	r22
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_setpindir+0xb2>
     eb0:	82 2b       	or	r24, r18
     eb2:	87 bb       	out	0x17, r24	; 23
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	08 95       	ret
     eb8:	24 b3       	in	r18, 0x14	; 20
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_setpindir+0xce>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	6a 95       	dec	r22
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_setpindir+0xca>
     ec8:	82 2b       	or	r24, r18
     eca:	84 bb       	out	0x14, r24	; 20
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	08 95       	ret
     ed0:	21 b3       	in	r18, 0x11	; 17
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_setpindir+0xe6>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	6a 95       	dec	r22
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_setpindir+0xe2>
     ee0:	82 2b       	or	r24, r18
     ee2:	81 bb       	out	0x11, r24	; 17
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	08 95       	ret
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	08 95       	ret
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	08 95       	ret
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	08 95       	ret

00000ef4 <DIO_setpinvalue>:
     ef4:	44 23       	and	r20, r20
     ef6:	19 f0       	breq	.+6      	; 0xefe <DIO_setpinvalue+0xa>
     ef8:	41 30       	cpi	r20, 0x01	; 1
     efa:	e9 f1       	breq	.+122    	; 0xf76 <DIO_setpinvalue+0x82>
     efc:	74 c0       	rjmp	.+232    	; 0xfe6 <DIO_setpinvalue+0xf2>
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	99 f0       	breq	.+38     	; 0xf28 <DIO_setpinvalue+0x34>
     f02:	28 f0       	brcs	.+10     	; 0xf0e <DIO_setpinvalue+0x1a>
     f04:	82 30       	cpi	r24, 0x02	; 2
     f06:	e9 f0       	breq	.+58     	; 0xf42 <DIO_setpinvalue+0x4e>
     f08:	83 30       	cpi	r24, 0x03	; 3
     f0a:	41 f1       	breq	.+80     	; 0xf5c <DIO_setpinvalue+0x68>
     f0c:	6e c0       	rjmp	.+220    	; 0xfea <DIO_setpinvalue+0xf6>
     f0e:	2b b3       	in	r18, 0x1b	; 27
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_setpinvalue+0x26>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	6a 95       	dec	r22
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_setpinvalue+0x22>
     f1e:	80 95       	com	r24
     f20:	82 23       	and	r24, r18
     f22:	8b bb       	out	0x1b, r24	; 27
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	08 95       	ret
     f28:	28 b3       	in	r18, 0x18	; 24
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <DIO_setpinvalue+0x40>
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	6a 95       	dec	r22
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <DIO_setpinvalue+0x3c>
     f38:	80 95       	com	r24
     f3a:	82 23       	and	r24, r18
     f3c:	88 bb       	out	0x18, r24	; 24
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	08 95       	ret
     f42:	25 b3       	in	r18, 0x15	; 21
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_setpinvalue+0x5a>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	6a 95       	dec	r22
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_setpinvalue+0x56>
     f52:	80 95       	com	r24
     f54:	82 23       	and	r24, r18
     f56:	85 bb       	out	0x15, r24	; 21
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	08 95       	ret
     f5c:	22 b3       	in	r18, 0x12	; 18
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <DIO_setpinvalue+0x74>
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	6a 95       	dec	r22
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <DIO_setpinvalue+0x70>
     f6c:	80 95       	com	r24
     f6e:	82 23       	and	r24, r18
     f70:	82 bb       	out	0x12, r24	; 18
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	08 95       	ret
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	91 f0       	breq	.+36     	; 0xf9e <DIO_setpinvalue+0xaa>
     f7a:	28 f0       	brcs	.+10     	; 0xf86 <DIO_setpinvalue+0x92>
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	d9 f0       	breq	.+54     	; 0xfb6 <DIO_setpinvalue+0xc2>
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	29 f1       	breq	.+74     	; 0xfce <DIO_setpinvalue+0xda>
     f84:	34 c0       	rjmp	.+104    	; 0xfee <DIO_setpinvalue+0xfa>
     f86:	2b b3       	in	r18, 0x1b	; 27
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_setpinvalue+0x9e>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	6a 95       	dec	r22
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_setpinvalue+0x9a>
     f96:	82 2b       	or	r24, r18
     f98:	8b bb       	out	0x1b, r24	; 27
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	08 95       	ret
     f9e:	28 b3       	in	r18, 0x18	; 24
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <DIO_setpinvalue+0xb6>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	6a 95       	dec	r22
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <DIO_setpinvalue+0xb2>
     fae:	82 2b       	or	r24, r18
     fb0:	88 bb       	out	0x18, r24	; 24
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	08 95       	ret
     fb6:	25 b3       	in	r18, 0x15	; 21
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_setpinvalue+0xce>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	6a 95       	dec	r22
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_setpinvalue+0xca>
     fc6:	82 2b       	or	r24, r18
     fc8:	85 bb       	out	0x15, r24	; 21
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	08 95       	ret
     fce:	22 b3       	in	r18, 0x12	; 18
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_setpinvalue+0xe6>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	6a 95       	dec	r22
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_setpinvalue+0xe2>
     fde:	82 2b       	or	r24, r18
     fe0:	82 bb       	out	0x12, r24	; 18
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	08 95       	ret
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	08 95       	ret
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	08 95       	ret
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	08 95       	ret

00000ff2 <DIO_readpin>:
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	99 f0       	breq	.+38     	; 0x101c <DIO_readpin+0x2a>
     ff6:	28 f0       	brcs	.+10     	; 0x1002 <DIO_readpin+0x10>
     ff8:	82 30       	cpi	r24, 0x02	; 2
     ffa:	e9 f0       	breq	.+58     	; 0x1036 <DIO_readpin+0x44>
     ffc:	83 30       	cpi	r24, 0x03	; 3
     ffe:	41 f1       	breq	.+80     	; 0x1050 <DIO_readpin+0x5e>
    1000:	34 c0       	rjmp	.+104    	; 0x106a <DIO_readpin+0x78>
    1002:	89 b3       	in	r24, 0x19	; 25
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_readpin+0x1a>
    1008:	95 95       	asr	r25
    100a:	87 95       	ror	r24
    100c:	6a 95       	dec	r22
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_readpin+0x16>
    1010:	81 70       	andi	r24, 0x01	; 1
    1012:	89 bb       	out	0x19, r24	; 25
    1014:	fa 01       	movw	r30, r20
    1016:	80 83       	st	Z, r24
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	08 95       	ret
    101c:	86 b3       	in	r24, 0x16	; 22
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_readpin+0x34>
    1022:	95 95       	asr	r25
    1024:	87 95       	ror	r24
    1026:	6a 95       	dec	r22
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_readpin+0x30>
    102a:	81 70       	andi	r24, 0x01	; 1
    102c:	86 bb       	out	0x16, r24	; 22
    102e:	fa 01       	movw	r30, r20
    1030:	80 83       	st	Z, r24
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	08 95       	ret
    1036:	83 b3       	in	r24, 0x13	; 19
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_readpin+0x4e>
    103c:	95 95       	asr	r25
    103e:	87 95       	ror	r24
    1040:	6a 95       	dec	r22
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_readpin+0x4a>
    1044:	81 70       	andi	r24, 0x01	; 1
    1046:	83 bb       	out	0x13, r24	; 19
    1048:	fa 01       	movw	r30, r20
    104a:	80 83       	st	Z, r24
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	08 95       	ret
    1050:	80 b3       	in	r24, 0x10	; 16
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 c0       	rjmp	.+4      	; 0x105a <DIO_readpin+0x68>
    1056:	95 95       	asr	r25
    1058:	87 95       	ror	r24
    105a:	6a 95       	dec	r22
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <DIO_readpin+0x64>
    105e:	81 70       	andi	r24, 0x01	; 1
    1060:	80 bb       	out	0x10, r24	; 16
    1062:	fa 01       	movw	r30, r20
    1064:	80 83       	st	Z, r24
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	08 95       	ret
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	08 95       	ret

0000106e <DIO_togglepin>:
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	91 f0       	breq	.+36     	; 0x1096 <DIO_togglepin+0x28>
    1072:	28 f0       	brcs	.+10     	; 0x107e <DIO_togglepin+0x10>
    1074:	82 30       	cpi	r24, 0x02	; 2
    1076:	d9 f0       	breq	.+54     	; 0x10ae <DIO_togglepin+0x40>
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	29 f1       	breq	.+74     	; 0x10c6 <DIO_togglepin+0x58>
    107c:	30 c0       	rjmp	.+96     	; 0x10de <DIO_togglepin+0x70>
    107e:	2b b3       	in	r18, 0x1b	; 27
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_togglepin+0x1c>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	6a 95       	dec	r22
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_togglepin+0x18>
    108e:	82 27       	eor	r24, r18
    1090:	8b bb       	out	0x1b, r24	; 27
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	08 95       	ret
    1096:	28 b3       	in	r18, 0x18	; 24
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_togglepin+0x34>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	6a 95       	dec	r22
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_togglepin+0x30>
    10a6:	82 27       	eor	r24, r18
    10a8:	88 bb       	out	0x18, r24	; 24
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	08 95       	ret
    10ae:	25 b3       	in	r18, 0x15	; 21
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_togglepin+0x4c>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	6a 95       	dec	r22
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_togglepin+0x48>
    10be:	82 27       	eor	r24, r18
    10c0:	85 bb       	out	0x15, r24	; 21
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	08 95       	ret
    10c6:	22 b3       	in	r18, 0x12	; 18
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_togglepin+0x64>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	6a 95       	dec	r22
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIO_togglepin+0x60>
    10d6:	82 27       	eor	r24, r18
    10d8:	82 bb       	out	0x12, r24	; 18
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	08 95       	ret
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	08 95       	ret

000010e2 <SET_GLOBALINTERRUPT>:
/** RETURNS    : VOID                                   */
/********************************************************/
void SET_GLOBALINTERRUPT(void)
{
	#if GLOBAL_INTERRUPT_STATE  ==  GLOBAL_INTERRUPT_STATE_ENABLE /** ENABLE GLOBAL INTERRUPTS **/
	  set_bit(SREG , 7);
    10e2:	8f b7       	in	r24, 0x3f	; 63
    10e4:	80 68       	ori	r24, 0x80	; 128
    10e6:	8f bf       	out	0x3f, r24	; 63
    10e8:	08 95       	ret

000010ea <INT0_init>:
/** ARGUMENTS  : VOID                                   */
/** RETURNS    : VOID                                   */
/********************************************************/
void INT0_init(void)
{
	SET_GLOBALINTERRUPT(); /** ENABLE GLOBAL INTERRUPTS */
    10ea:	0e 94 71 08 	call	0x10e2	; 0x10e2 <SET_GLOBALINTERRUPT>
	  clear_bit(MCUCR , 0);
	  clear_bit(MCUCR , 1);
	  
	#elif EXTERNAL_INT0_TRIGGER  == INT_TRIGGER_ANY_CHANGE
	
	  set_bit(MCUCR , 0);
    10ee:	85 b7       	in	r24, 0x35	; 53
    10f0:	81 60       	ori	r24, 0x01	; 1
    10f2:	85 bf       	out	0x35, r24	; 53
	  clear_bit(MCUCR ,1);
    10f4:	85 b7       	in	r24, 0x35	; 53
    10f6:	8d 7f       	andi	r24, 0xFD	; 253
    10f8:	85 bf       	out	0x35, r24	; 53
	  
	#endif
	
	/* Enable INT0 */
	set_bit(GICR , 6);	
    10fa:	8b b7       	in	r24, 0x3b	; 59
    10fc:	80 64       	ori	r24, 0x40	; 64
    10fe:	8b bf       	out	0x3b, r24	; 59
    1100:	08 95       	ret

00001102 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
    1102:	83 b7       	in	r24, 0x33	; 51
    1104:	8f 77       	andi	r24, 0x7F	; 127
    1106:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
    1108:	83 b7       	in	r24, 0x33	; 51
    110a:	8f 7b       	andi	r24, 0xBF	; 191
    110c:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
    110e:	83 b7       	in	r24, 0x33	; 51
    1110:	87 7f       	andi	r24, 0xF7	; 247
    1112:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
    1114:	83 b7       	in	r24, 0x33	; 51
    1116:	8f 7e       	andi	r24, 0xEF	; 239
    1118:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
    111a:	83 b7       	in	r24, 0x33	; 51
    111c:	8f 7d       	andi	r24, 0xDF	; 223
    111e:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	08 95       	ret

00001124 <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
    1124:	83 b7       	in	r24, 0x33	; 51
    1126:	81 60       	ori	r24, 0x01	; 1
    1128:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
    112a:	83 b7       	in	r24, 0x33	; 51
    112c:	8d 7f       	andi	r24, 0xFD	; 253
    112e:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
    1130:	83 b7       	in	r24, 0x33	; 51
    1132:	8b 7f       	andi	r24, 0xFB	; 251
    1134:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	08 95       	ret

0000113a <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
    113a:	83 b7       	in	r24, 0x33	; 51
    113c:	8e 7f       	andi	r24, 0xFE	; 254
    113e:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
    1140:	83 b7       	in	r24, 0x33	; 51
    1142:	8d 7f       	andi	r24, 0xFD	; 253
    1144:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
    1146:	83 b7       	in	r24, 0x33	; 51
    1148:	8b 7f       	andi	r24, 0xFB	; 251
    114a:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	08 95       	ret

00001150 <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    1150:	0e 94 30 0a 	call	0x1460	; 0x1460 <__floatunsisf>
    1154:	2f e6       	ldi	r18, 0x6F	; 111
    1156:	32 e1       	ldi	r19, 0x12	; 18
    1158:	43 e0       	ldi	r20, 0x03	; 3
    115a:	5d e3       	ldi	r21, 0x3D	; 61
    115c:	0e 94 8f 09 	call	0x131e	; 0x131e <__divsf3>
    1160:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fixunssfsi>
    1164:	60 93 ab 00 	sts	0x00AB, r22	; 0x8000ab <u32_gs_tmr0nuofovs>
    1168:	70 93 ac 00 	sts	0x00AC, r23	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    116c:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    1170:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
    1174:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
    1176:	0e 94 92 08 	call	0x1124	; 0x1124 <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    1180:	0a c0       	rjmp	.+20     	; 0x1196 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
    1182:	08 b6       	in	r0, 0x38	; 56
    1184:	00 fe       	sbrs	r0, 0
    1186:	fd cf       	rjmp	.-6      	; 0x1182 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
    1188:	88 b7       	in	r24, 0x38	; 56
    118a:	81 60       	ori	r24, 0x01	; 1
    118c:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
    118e:	4f 5f       	subi	r20, 0xFF	; 255
    1190:	5f 4f       	sbci	r21, 0xFF	; 255
    1192:	6f 4f       	sbci	r22, 0xFF	; 255
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    1196:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <u32_gs_tmr0nuofovs>
    119a:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    119e:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    11a2:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
    11a6:	48 17       	cp	r20, r24
    11a8:	59 07       	cpc	r21, r25
    11aa:	6a 07       	cpc	r22, r26
    11ac:	7b 07       	cpc	r23, r27
    11ae:	48 f3       	brcs	.-46     	; 0x1182 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
    11b0:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <u32_gs_tmr0nuofovs>
    11b4:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    11b8:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    11bc:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
    11c0:	0e 94 9d 08 	call	0x113a	; 0x113a <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	08 95       	ret

000011c8 <TMR0_delaymicros>:
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	u32_gs_tmr0nuofovs = (u32_a_delaymicros / 32);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	68 94       	set
    11ce:	14 f8       	bld	r1, 4
    11d0:	b6 95       	lsr	r27
    11d2:	a7 95       	ror	r26
    11d4:	97 95       	ror	r25
    11d6:	87 95       	ror	r24
    11d8:	16 94       	lsr	r1
    11da:	d1 f7       	brne	.-12     	; 0x11d0 <TMR0_delaymicros+0x8>
    11dc:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <u32_gs_tmr0nuofovs>
    11e0:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    11e4:	a0 93 ad 00 	sts	0x00AD, r26	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    11e8:	b0 93 ae 00 	sts	0x00AE, r27	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
	
	TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
    11ec:	12 be       	out	0x32, r1	; 50
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
    11ee:	0e 94 92 08 	call	0x1124	; 0x1124 <TMR0_start>
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delaymicros(uint32_t u32_a_delaymicros)
{
	uint32_t u32_a_overflowcounter = 0 ;
    11f2:	40 e0       	ldi	r20, 0x00	; 0
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    11f8:	0a c0       	rjmp	.+20     	; 0x120e <TMR0_delaymicros+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
    11fa:	08 b6       	in	r0, 0x38	; 56
    11fc:	00 fe       	sbrs	r0, 0
    11fe:	fd cf       	rjmp	.-6      	; 0x11fa <TMR0_delaymicros+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
    1200:	88 b7       	in	r24, 0x38	; 56
    1202:	81 60       	ori	r24, 0x01	; 1
    1204:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
    1206:	4f 5f       	subi	r20, 0xFF	; 255
    1208:	5f 4f       	sbci	r21, 0xFF	; 255
    120a:	6f 4f       	sbci	r22, 0xFF	; 255
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
    120e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <u32_gs_tmr0nuofovs>
    1212:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
    1216:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
    121a:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
    121e:	48 17       	cp	r20, r24
    1220:	59 07       	cpc	r21, r25
    1222:	6a 07       	cpc	r22, r26
    1224:	7b 07       	cpc	r23, r27
    1226:	48 f3       	brcs	.-46     	; 0x11fa <TMR0_delaymicros+0x32>
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_a_overflowcounter = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop(); /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
    1228:	0e 94 9d 08 	call	0x113a	; 0x113a <TMR0_stop>
	
	return en_a_delaystatus ; 
}
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	08 95       	ret

00001230 <TMR1_init>:
	 
	#elif TMR1_CLK_SOURCE == TMR1_INTERNAL_CLK_SOURCE
	
	 #if TMR1_MODE == NORMAL_MODE
	  
	  clear_bit(TCCR1A , 0);
    1230:	8f b5       	in	r24, 0x2f	; 47
    1232:	8e 7f       	andi	r24, 0xFE	; 254
    1234:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1A , 1);
    1236:	8f b5       	in	r24, 0x2f	; 47
    1238:	8d 7f       	andi	r24, 0xFD	; 253
    123a:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1B , 3);
    123c:	8e b5       	in	r24, 0x2e	; 46
    123e:	87 7f       	andi	r24, 0xF7	; 247
    1240:	8e bd       	out	0x2e, r24	; 46
	  clear_bit(TCCR1B , 4);
    1242:	8e b5       	in	r24, 0x2e	; 46
    1244:	8f 7e       	andi	r24, 0xEF	; 239
    1246:	8e bd       	out	0x2e, r24	; 46
	  
	  /* NON PWM MODE */
	  set_bit(TCCR1A , 2);
    1248:	8f b5       	in	r24, 0x2f	; 47
    124a:	84 60       	ori	r24, 0x04	; 4
    124c:	8f bd       	out	0x2f, r24	; 47
	  set_bit(TCCR1A , 3);
    124e:	8f b5       	in	r24, 0x2f	; 47
    1250:	88 60       	ori	r24, 0x08	; 8
    1252:	8f bd       	out	0x2f, r24	; 47
	  
	  /* ENABLE INTERRUPT */
	  set_bit(SREG , 7);   /** ENABLE GLOBAL INTTERUPTS **/
    1254:	8f b7       	in	r24, 0x3f	; 63
    1256:	80 68       	ori	r24, 0x80	; 128
    1258:	8f bf       	out	0x3f, r24	; 63
	  set_bit(TIMSK , 2);  /** NABLE TMR1 INTERRUPT **/
    125a:	89 b7       	in	r24, 0x39	; 57
    125c:	9a b7       	in	r25, 0x3a	; 58
    125e:	84 60       	ori	r24, 0x04	; 4
    1260:	9a bf       	out	0x3a, r25	; 58
    1262:	89 bf       	out	0x39, r24	; 57
	 /* SET THE OC1B BIT AS OUTPUT */
	 DIO_setpindir(DIO_PORTD , DIO_PIN4 , DIO_PIN_OUTPUT);
	#endif
	#endif
#endif
}
    1264:	08 95       	ret

00001266 <TMR1_start>:
/******************************************************************************/
TMR1_start_status TMR1_start(void)
{
  TMR1_start_status en_a_startstatus = TMR1_NOT_VALID_START ; /** VARIABLE TO HOLD THE RETURN STATUS **/
  
  TCNT1 = 0 ;   /** SET THE INITIAL VALUE IN TCNT1 REGISTER **/
    1266:	1d bc       	out	0x2d, r1	; 45
    1268:	1c bc       	out	0x2c, r1	; 44

         en_a_startstatus = TMR1_VALID_START ; /** STATUS IS VALID **/
	 
	 #elif TMR1_PRESCALLER_VALUE == NO_PRESCALER
	 
	 set_bit(TCCR1B , 0);
    126a:	8e b5       	in	r24, 0x2e	; 46
    126c:	81 60       	ori	r24, 0x01	; 1
    126e:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 1);
    1270:	8e b5       	in	r24, 0x2e	; 46
    1272:	8d 7f       	andi	r24, 0xFD	; 253
    1274:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 2);
    1276:	8e b5       	in	r24, 0x2e	; 46
    1278:	8b 7f       	andi	r24, 0xFB	; 251
    127a:	8e bd       	out	0x2e, r24	; 46

	 #endif
	#endif

  return en_a_startstatus ; /** RETURN THE FINAL STATUS **/
}
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	08 95       	ret

00001280 <TMR1_stop>:
TMR1_stop_status TMR1_stop(void)
{
     TMR1_stop_status en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** VARIABLE TO HOLD THE RETURN STATUS  **/
	
     /* TURN THE CLOCK OFF */
     clear_bit(TCCR1B , 0);
    1280:	8e b5       	in	r24, 0x2e	; 46
    1282:	8e 7f       	andi	r24, 0xFE	; 254
    1284:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 1);
    1286:	8e b5       	in	r24, 0x2e	; 46
    1288:	8d 7f       	andi	r24, 0xFD	; 253
    128a:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 2);
    128c:	8e b5       	in	r24, 0x2e	; 46
    128e:	8b 7f       	andi	r24, 0xFB	; 251
    1290:	8e bd       	out	0x2e, r24	; 46

     en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** UPDATE THE STOP STATUS **/

     return en_a_stopstatus ; /** RETURN THE FINAL STATUS **/

}
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	08 95       	ret

00001296 <TMR1_getvalue>:
/** ARGUMENTS  : u16_a_value                                                 **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR1_getvalue(uint16t * u16_a_value)
{
	*u16_a_value = TCNT1 ; /** GET THE VALUE FROM TIMER1 COUNTING REGISTER **/
    1296:	2c b5       	in	r18, 0x2c	; 44
    1298:	3d b5       	in	r19, 0x2d	; 45
    129a:	fc 01       	movw	r30, r24
    129c:	31 83       	std	Z+1, r19	; 0x01
    129e:	20 83       	st	Z, r18
    12a0:	08 95       	ret

000012a2 <TMR1_setcounterval>:
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
void TMR1_setcounterval(uint16t u16_a_tmrval)
{
	TCNT1 = u16_a_tmrval ; /** SET THE PASSED VALUE IN TIMER COUNTING REGISTER **/
    12a2:	9d bd       	out	0x2d, r25	; 45
    12a4:	8c bd       	out	0x2c, r24	; 44
    12a6:	08 95       	ret

000012a8 <TMR2_init>:
	/* TIMER MODE OF TMR0 */
	#elif TIMER2_CLK_SRC == INTERNAL_CLK_SRC
	
	#if TIMER2_MODE == TMR2_NORMAL_MODE
	
	clear_bit(TCCR2 , 7);
    12a8:	85 b5       	in	r24, 0x25	; 37
    12aa:	8f 77       	andi	r24, 0x7F	; 127
    12ac:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 6);
    12ae:	85 b5       	in	r24, 0x25	; 37
    12b0:	8f 7b       	andi	r24, 0xBF	; 191
    12b2:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 3);
    12b4:	85 b5       	in	r24, 0x25	; 37
    12b6:	87 7f       	andi	r24, 0xF7	; 247
    12b8:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 4);
    12ba:	85 b5       	in	r24, 0x25	; 37
    12bc:	8f 7e       	andi	r24, 0xEF	; 239
    12be:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 5);
    12c0:	85 b5       	in	r24, 0x25	; 37
    12c2:	8f 7d       	andi	r24, 0xDF	; 223
    12c4:	85 bd       	out	0x25, r24	; 37
	
	/* ENABLE INTERRUPT */
	set_bit(SREG , 7);
    12c6:	8f b7       	in	r24, 0x3f	; 63
    12c8:	80 68       	ori	r24, 0x80	; 128
    12ca:	8f bf       	out	0x3f, r24	; 63
	set_bit(TIMSK , 6);
    12cc:	89 b7       	in	r24, 0x39	; 57
    12ce:	80 64       	ori	r24, 0x40	; 64
    12d0:	89 bf       	out	0x39, r24	; 57
	#endif
	#endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	08 95       	ret

000012d6 <TMR2_start>:
	
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR2 , 0);
    12d6:	85 b5       	in	r24, 0x25	; 37
    12d8:	81 60       	ori	r24, 0x01	; 1
    12da:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    12dc:	85 b5       	in	r24, 0x25	; 37
    12de:	8d 7f       	andi	r24, 0xFD	; 253
    12e0:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    12e2:	85 b5       	in	r24, 0x25	; 37
    12e4:	8b 7f       	andi	r24, 0xFB	; 251
    12e6:	85 bd       	out	0x25, r24	; 37
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	08 95       	ret

000012ec <TMR2_stop>:
TMR2_stop_error TMR2_stop(void)
{
	TMR2_stop_error en_a_stopStatus = TMR2_VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR2 , 0);
    12ec:	85 b5       	in	r24, 0x25	; 37
    12ee:	8e 7f       	andi	r24, 0xFE	; 254
    12f0:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
    12f2:	85 b5       	in	r24, 0x25	; 37
    12f4:	8d 7f       	andi	r24, 0xFD	; 253
    12f6:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
    12f8:	85 b5       	in	r24, 0x25	; 37
    12fa:	8b 7f       	andi	r24, 0xFB	; 251
    12fc:	85 bd       	out	0x25, r24	; 37
	
	en_a_stopStatus = TMR2_VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret

00001302 <TMR2_getovs>:
	u32_a_ovs = (u16_a_delay / 0.256);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
	

	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	u32_a_ovs = (u16_a_delay / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
    1302:	bc 01       	movw	r22, r24
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 30 0a 	call	0x1460	; 0x1460 <__floatunsisf>
    130c:	2f e6       	ldi	r18, 0x6F	; 111
    130e:	32 e1       	ldi	r19, 0x12	; 18
    1310:	43 e0       	ldi	r20, 0x03	; 3
    1312:	5d e3       	ldi	r21, 0x3D	; 61
    1314:	0e 94 8f 09 	call	0x131e	; 0x131e <__divsf3>
    1318:	0e 94 01 0a 	call	0x1402	; 0x1402 <__fixunssfsi>
	
	#endif
	
	return u32_a_ovs ;  /** RETURN THE CALCULATED NUMBER OF OVERFLOWS **/
}
    131c:	08 95       	ret

0000131e <__divsf3>:
    131e:	0e 94 a3 09 	call	0x1346	; 0x1346 <__divsf3x>
    1322:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__fp_round>
    1326:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__fp_pscB>
    132a:	58 f0       	brcs	.+22     	; 0x1342 <__divsf3+0x24>
    132c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__fp_pscA>
    1330:	40 f0       	brcs	.+16     	; 0x1342 <__divsf3+0x24>
    1332:	29 f4       	brne	.+10     	; 0x133e <__divsf3+0x20>
    1334:	5f 3f       	cpi	r21, 0xFF	; 255
    1336:	29 f0       	breq	.+10     	; 0x1342 <__divsf3+0x24>
    1338:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_inf>
    133c:	51 11       	cpse	r21, r1
    133e:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__fp_szero>
    1342:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__fp_nan>

00001346 <__divsf3x>:
    1346:	0e 94 95 0a 	call	0x152a	; 0x152a <__fp_split3>
    134a:	68 f3       	brcs	.-38     	; 0x1326 <__divsf3+0x8>

0000134c <__divsf3_pse>:
    134c:	99 23       	and	r25, r25
    134e:	b1 f3       	breq	.-20     	; 0x133c <__divsf3+0x1e>
    1350:	55 23       	and	r21, r21
    1352:	91 f3       	breq	.-28     	; 0x1338 <__divsf3+0x1a>
    1354:	95 1b       	sub	r25, r21
    1356:	55 0b       	sbc	r21, r21
    1358:	bb 27       	eor	r27, r27
    135a:	aa 27       	eor	r26, r26
    135c:	62 17       	cp	r22, r18
    135e:	73 07       	cpc	r23, r19
    1360:	84 07       	cpc	r24, r20
    1362:	38 f0       	brcs	.+14     	; 0x1372 <__divsf3_pse+0x26>
    1364:	9f 5f       	subi	r25, 0xFF	; 255
    1366:	5f 4f       	sbci	r21, 0xFF	; 255
    1368:	22 0f       	add	r18, r18
    136a:	33 1f       	adc	r19, r19
    136c:	44 1f       	adc	r20, r20
    136e:	aa 1f       	adc	r26, r26
    1370:	a9 f3       	breq	.-22     	; 0x135c <__divsf3_pse+0x10>
    1372:	35 d0       	rcall	.+106    	; 0x13de <__divsf3_pse+0x92>
    1374:	0e 2e       	mov	r0, r30
    1376:	3a f0       	brmi	.+14     	; 0x1386 <__divsf3_pse+0x3a>
    1378:	e0 e8       	ldi	r30, 0x80	; 128
    137a:	32 d0       	rcall	.+100    	; 0x13e0 <__divsf3_pse+0x94>
    137c:	91 50       	subi	r25, 0x01	; 1
    137e:	50 40       	sbci	r21, 0x00	; 0
    1380:	e6 95       	lsr	r30
    1382:	00 1c       	adc	r0, r0
    1384:	ca f7       	brpl	.-14     	; 0x1378 <__divsf3_pse+0x2c>
    1386:	2b d0       	rcall	.+86     	; 0x13de <__divsf3_pse+0x92>
    1388:	fe 2f       	mov	r31, r30
    138a:	29 d0       	rcall	.+82     	; 0x13de <__divsf3_pse+0x92>
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	bb 1f       	adc	r27, r27
    1394:	26 17       	cp	r18, r22
    1396:	37 07       	cpc	r19, r23
    1398:	48 07       	cpc	r20, r24
    139a:	ab 07       	cpc	r26, r27
    139c:	b0 e8       	ldi	r27, 0x80	; 128
    139e:	09 f0       	breq	.+2      	; 0x13a2 <__divsf3_pse+0x56>
    13a0:	bb 0b       	sbc	r27, r27
    13a2:	80 2d       	mov	r24, r0
    13a4:	bf 01       	movw	r22, r30
    13a6:	ff 27       	eor	r31, r31
    13a8:	93 58       	subi	r25, 0x83	; 131
    13aa:	5f 4f       	sbci	r21, 0xFF	; 255
    13ac:	3a f0       	brmi	.+14     	; 0x13bc <__divsf3_pse+0x70>
    13ae:	9e 3f       	cpi	r25, 0xFE	; 254
    13b0:	51 05       	cpc	r21, r1
    13b2:	78 f0       	brcs	.+30     	; 0x13d2 <__divsf3_pse+0x86>
    13b4:	0c 94 6d 0a 	jmp	0x14da	; 0x14da <__fp_inf>
    13b8:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__fp_szero>
    13bc:	5f 3f       	cpi	r21, 0xFF	; 255
    13be:	e4 f3       	brlt	.-8      	; 0x13b8 <__divsf3_pse+0x6c>
    13c0:	98 3e       	cpi	r25, 0xE8	; 232
    13c2:	d4 f3       	brlt	.-12     	; 0x13b8 <__divsf3_pse+0x6c>
    13c4:	86 95       	lsr	r24
    13c6:	77 95       	ror	r23
    13c8:	67 95       	ror	r22
    13ca:	b7 95       	ror	r27
    13cc:	f7 95       	ror	r31
    13ce:	9f 5f       	subi	r25, 0xFF	; 255
    13d0:	c9 f7       	brne	.-14     	; 0x13c4 <__divsf3_pse+0x78>
    13d2:	88 0f       	add	r24, r24
    13d4:	91 1d       	adc	r25, r1
    13d6:	96 95       	lsr	r25
    13d8:	87 95       	ror	r24
    13da:	97 f9       	bld	r25, 7
    13dc:	08 95       	ret
    13de:	e1 e0       	ldi	r30, 0x01	; 1
    13e0:	66 0f       	add	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	88 1f       	adc	r24, r24
    13e6:	bb 1f       	adc	r27, r27
    13e8:	62 17       	cp	r22, r18
    13ea:	73 07       	cpc	r23, r19
    13ec:	84 07       	cpc	r24, r20
    13ee:	ba 07       	cpc	r27, r26
    13f0:	20 f0       	brcs	.+8      	; 0x13fa <__divsf3_pse+0xae>
    13f2:	62 1b       	sub	r22, r18
    13f4:	73 0b       	sbc	r23, r19
    13f6:	84 0b       	sbc	r24, r20
    13f8:	ba 0b       	sbc	r27, r26
    13fa:	ee 1f       	adc	r30, r30
    13fc:	88 f7       	brcc	.-30     	; 0x13e0 <__divsf3_pse+0x94>
    13fe:	e0 95       	com	r30
    1400:	08 95       	ret

00001402 <__fixunssfsi>:
    1402:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fp_splitA>
    1406:	88 f0       	brcs	.+34     	; 0x142a <__fixunssfsi+0x28>
    1408:	9f 57       	subi	r25, 0x7F	; 127
    140a:	98 f0       	brcs	.+38     	; 0x1432 <__fixunssfsi+0x30>
    140c:	b9 2f       	mov	r27, r25
    140e:	99 27       	eor	r25, r25
    1410:	b7 51       	subi	r27, 0x17	; 23
    1412:	b0 f0       	brcs	.+44     	; 0x1440 <__fixunssfsi+0x3e>
    1414:	e1 f0       	breq	.+56     	; 0x144e <__fixunssfsi+0x4c>
    1416:	66 0f       	add	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	88 1f       	adc	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	1a f0       	brmi	.+6      	; 0x1426 <__fixunssfsi+0x24>
    1420:	ba 95       	dec	r27
    1422:	c9 f7       	brne	.-14     	; 0x1416 <__fixunssfsi+0x14>
    1424:	14 c0       	rjmp	.+40     	; 0x144e <__fixunssfsi+0x4c>
    1426:	b1 30       	cpi	r27, 0x01	; 1
    1428:	91 f0       	breq	.+36     	; 0x144e <__fixunssfsi+0x4c>
    142a:	0e 94 b7 0a 	call	0x156e	; 0x156e <__fp_zero>
    142e:	b1 e0       	ldi	r27, 0x01	; 1
    1430:	08 95       	ret
    1432:	0c 94 b7 0a 	jmp	0x156e	; 0x156e <__fp_zero>
    1436:	67 2f       	mov	r22, r23
    1438:	78 2f       	mov	r23, r24
    143a:	88 27       	eor	r24, r24
    143c:	b8 5f       	subi	r27, 0xF8	; 248
    143e:	39 f0       	breq	.+14     	; 0x144e <__fixunssfsi+0x4c>
    1440:	b9 3f       	cpi	r27, 0xF9	; 249
    1442:	cc f3       	brlt	.-14     	; 0x1436 <__fixunssfsi+0x34>
    1444:	86 95       	lsr	r24
    1446:	77 95       	ror	r23
    1448:	67 95       	ror	r22
    144a:	b3 95       	inc	r27
    144c:	d9 f7       	brne	.-10     	; 0x1444 <__fixunssfsi+0x42>
    144e:	3e f4       	brtc	.+14     	; 0x145e <__fixunssfsi+0x5c>
    1450:	90 95       	com	r25
    1452:	80 95       	com	r24
    1454:	70 95       	com	r23
    1456:	61 95       	neg	r22
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	8f 4f       	sbci	r24, 0xFF	; 255
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	08 95       	ret

00001460 <__floatunsisf>:
    1460:	e8 94       	clt
    1462:	09 c0       	rjmp	.+18     	; 0x1476 <__floatsisf+0x12>

00001464 <__floatsisf>:
    1464:	97 fb       	bst	r25, 7
    1466:	3e f4       	brtc	.+14     	; 0x1476 <__floatsisf+0x12>
    1468:	90 95       	com	r25
    146a:	80 95       	com	r24
    146c:	70 95       	com	r23
    146e:	61 95       	neg	r22
    1470:	7f 4f       	sbci	r23, 0xFF	; 255
    1472:	8f 4f       	sbci	r24, 0xFF	; 255
    1474:	9f 4f       	sbci	r25, 0xFF	; 255
    1476:	99 23       	and	r25, r25
    1478:	a9 f0       	breq	.+42     	; 0x14a4 <__floatsisf+0x40>
    147a:	f9 2f       	mov	r31, r25
    147c:	96 e9       	ldi	r25, 0x96	; 150
    147e:	bb 27       	eor	r27, r27
    1480:	93 95       	inc	r25
    1482:	f6 95       	lsr	r31
    1484:	87 95       	ror	r24
    1486:	77 95       	ror	r23
    1488:	67 95       	ror	r22
    148a:	b7 95       	ror	r27
    148c:	f1 11       	cpse	r31, r1
    148e:	f8 cf       	rjmp	.-16     	; 0x1480 <__floatsisf+0x1c>
    1490:	fa f4       	brpl	.+62     	; 0x14d0 <__floatsisf+0x6c>
    1492:	bb 0f       	add	r27, r27
    1494:	11 f4       	brne	.+4      	; 0x149a <__floatsisf+0x36>
    1496:	60 ff       	sbrs	r22, 0
    1498:	1b c0       	rjmp	.+54     	; 0x14d0 <__floatsisf+0x6c>
    149a:	6f 5f       	subi	r22, 0xFF	; 255
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	8f 4f       	sbci	r24, 0xFF	; 255
    14a0:	9f 4f       	sbci	r25, 0xFF	; 255
    14a2:	16 c0       	rjmp	.+44     	; 0x14d0 <__floatsisf+0x6c>
    14a4:	88 23       	and	r24, r24
    14a6:	11 f0       	breq	.+4      	; 0x14ac <__floatsisf+0x48>
    14a8:	96 e9       	ldi	r25, 0x96	; 150
    14aa:	11 c0       	rjmp	.+34     	; 0x14ce <__floatsisf+0x6a>
    14ac:	77 23       	and	r23, r23
    14ae:	21 f0       	breq	.+8      	; 0x14b8 <__floatsisf+0x54>
    14b0:	9e e8       	ldi	r25, 0x8E	; 142
    14b2:	87 2f       	mov	r24, r23
    14b4:	76 2f       	mov	r23, r22
    14b6:	05 c0       	rjmp	.+10     	; 0x14c2 <__floatsisf+0x5e>
    14b8:	66 23       	and	r22, r22
    14ba:	71 f0       	breq	.+28     	; 0x14d8 <__floatsisf+0x74>
    14bc:	96 e8       	ldi	r25, 0x86	; 134
    14be:	86 2f       	mov	r24, r22
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	2a f0       	brmi	.+10     	; 0x14d0 <__floatsisf+0x6c>
    14c6:	9a 95       	dec	r25
    14c8:	66 0f       	add	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	da f7       	brpl	.-10     	; 0x14c6 <__floatsisf+0x62>
    14d0:	88 0f       	add	r24, r24
    14d2:	96 95       	lsr	r25
    14d4:	87 95       	ror	r24
    14d6:	97 f9       	bld	r25, 7
    14d8:	08 95       	ret

000014da <__fp_inf>:
    14da:	97 f9       	bld	r25, 7
    14dc:	9f 67       	ori	r25, 0x7F	; 127
    14de:	80 e8       	ldi	r24, 0x80	; 128
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	08 95       	ret

000014e6 <__fp_nan>:
    14e6:	9f ef       	ldi	r25, 0xFF	; 255
    14e8:	80 ec       	ldi	r24, 0xC0	; 192
    14ea:	08 95       	ret

000014ec <__fp_pscA>:
    14ec:	00 24       	eor	r0, r0
    14ee:	0a 94       	dec	r0
    14f0:	16 16       	cp	r1, r22
    14f2:	17 06       	cpc	r1, r23
    14f4:	18 06       	cpc	r1, r24
    14f6:	09 06       	cpc	r0, r25
    14f8:	08 95       	ret

000014fa <__fp_pscB>:
    14fa:	00 24       	eor	r0, r0
    14fc:	0a 94       	dec	r0
    14fe:	12 16       	cp	r1, r18
    1500:	13 06       	cpc	r1, r19
    1502:	14 06       	cpc	r1, r20
    1504:	05 06       	cpc	r0, r21
    1506:	08 95       	ret

00001508 <__fp_round>:
    1508:	09 2e       	mov	r0, r25
    150a:	03 94       	inc	r0
    150c:	00 0c       	add	r0, r0
    150e:	11 f4       	brne	.+4      	; 0x1514 <__fp_round+0xc>
    1510:	88 23       	and	r24, r24
    1512:	52 f0       	brmi	.+20     	; 0x1528 <__fp_round+0x20>
    1514:	bb 0f       	add	r27, r27
    1516:	40 f4       	brcc	.+16     	; 0x1528 <__fp_round+0x20>
    1518:	bf 2b       	or	r27, r31
    151a:	11 f4       	brne	.+4      	; 0x1520 <__fp_round+0x18>
    151c:	60 ff       	sbrs	r22, 0
    151e:	04 c0       	rjmp	.+8      	; 0x1528 <__fp_round+0x20>
    1520:	6f 5f       	subi	r22, 0xFF	; 255
    1522:	7f 4f       	sbci	r23, 0xFF	; 255
    1524:	8f 4f       	sbci	r24, 0xFF	; 255
    1526:	9f 4f       	sbci	r25, 0xFF	; 255
    1528:	08 95       	ret

0000152a <__fp_split3>:
    152a:	57 fd       	sbrc	r21, 7
    152c:	90 58       	subi	r25, 0x80	; 128
    152e:	44 0f       	add	r20, r20
    1530:	55 1f       	adc	r21, r21
    1532:	59 f0       	breq	.+22     	; 0x154a <__fp_splitA+0x10>
    1534:	5f 3f       	cpi	r21, 0xFF	; 255
    1536:	71 f0       	breq	.+28     	; 0x1554 <__fp_splitA+0x1a>
    1538:	47 95       	ror	r20

0000153a <__fp_splitA>:
    153a:	88 0f       	add	r24, r24
    153c:	97 fb       	bst	r25, 7
    153e:	99 1f       	adc	r25, r25
    1540:	61 f0       	breq	.+24     	; 0x155a <__fp_splitA+0x20>
    1542:	9f 3f       	cpi	r25, 0xFF	; 255
    1544:	79 f0       	breq	.+30     	; 0x1564 <__fp_splitA+0x2a>
    1546:	87 95       	ror	r24
    1548:	08 95       	ret
    154a:	12 16       	cp	r1, r18
    154c:	13 06       	cpc	r1, r19
    154e:	14 06       	cpc	r1, r20
    1550:	55 1f       	adc	r21, r21
    1552:	f2 cf       	rjmp	.-28     	; 0x1538 <__fp_split3+0xe>
    1554:	46 95       	lsr	r20
    1556:	f1 df       	rcall	.-30     	; 0x153a <__fp_splitA>
    1558:	08 c0       	rjmp	.+16     	; 0x156a <__fp_splitA+0x30>
    155a:	16 16       	cp	r1, r22
    155c:	17 06       	cpc	r1, r23
    155e:	18 06       	cpc	r1, r24
    1560:	99 1f       	adc	r25, r25
    1562:	f1 cf       	rjmp	.-30     	; 0x1546 <__fp_splitA+0xc>
    1564:	86 95       	lsr	r24
    1566:	71 05       	cpc	r23, r1
    1568:	61 05       	cpc	r22, r1
    156a:	08 94       	sec
    156c:	08 95       	ret

0000156e <__fp_zero>:
    156e:	e8 94       	clt

00001570 <__fp_szero>:
    1570:	bb 27       	eor	r27, r27
    1572:	66 27       	eor	r22, r22
    1574:	77 27       	eor	r23, r23
    1576:	cb 01       	movw	r24, r22
    1578:	97 f9       	bld	r25, 7
    157a:	08 95       	ret

0000157c <__divmodsi4>:
    157c:	05 2e       	mov	r0, r21
    157e:	97 fb       	bst	r25, 7
    1580:	1e f4       	brtc	.+6      	; 0x1588 <__divmodsi4+0xc>
    1582:	00 94       	com	r0
    1584:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__negsi2>
    1588:	57 fd       	sbrc	r21, 7
    158a:	07 d0       	rcall	.+14     	; 0x159a <__divmodsi4_neg2>
    158c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__udivmodsi4>
    1590:	07 fc       	sbrc	r0, 7
    1592:	03 d0       	rcall	.+6      	; 0x159a <__divmodsi4_neg2>
    1594:	4e f4       	brtc	.+18     	; 0x15a8 <__divmodsi4_exit>
    1596:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <__negsi2>

0000159a <__divmodsi4_neg2>:
    159a:	50 95       	com	r21
    159c:	40 95       	com	r20
    159e:	30 95       	com	r19
    15a0:	21 95       	neg	r18
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255
    15a4:	4f 4f       	sbci	r20, 0xFF	; 255
    15a6:	5f 4f       	sbci	r21, 0xFF	; 255

000015a8 <__divmodsi4_exit>:
    15a8:	08 95       	ret

000015aa <__negsi2>:
    15aa:	90 95       	com	r25
    15ac:	80 95       	com	r24
    15ae:	70 95       	com	r23
    15b0:	61 95       	neg	r22
    15b2:	7f 4f       	sbci	r23, 0xFF	; 255
    15b4:	8f 4f       	sbci	r24, 0xFF	; 255
    15b6:	9f 4f       	sbci	r25, 0xFF	; 255
    15b8:	08 95       	ret

000015ba <__umulhisi3>:
    15ba:	a2 9f       	mul	r26, r18
    15bc:	b0 01       	movw	r22, r0
    15be:	b3 9f       	mul	r27, r19
    15c0:	c0 01       	movw	r24, r0
    15c2:	a3 9f       	mul	r26, r19
    15c4:	70 0d       	add	r23, r0
    15c6:	81 1d       	adc	r24, r1
    15c8:	11 24       	eor	r1, r1
    15ca:	91 1d       	adc	r25, r1
    15cc:	b2 9f       	mul	r27, r18
    15ce:	70 0d       	add	r23, r0
    15d0:	81 1d       	adc	r24, r1
    15d2:	11 24       	eor	r1, r1
    15d4:	91 1d       	adc	r25, r1
    15d6:	08 95       	ret

000015d8 <__udivmodsi4>:
    15d8:	a1 e2       	ldi	r26, 0x21	; 33
    15da:	1a 2e       	mov	r1, r26
    15dc:	aa 1b       	sub	r26, r26
    15de:	bb 1b       	sub	r27, r27
    15e0:	fd 01       	movw	r30, r26
    15e2:	0d c0       	rjmp	.+26     	; 0x15fe <__udivmodsi4_ep>

000015e4 <__udivmodsi4_loop>:
    15e4:	aa 1f       	adc	r26, r26
    15e6:	bb 1f       	adc	r27, r27
    15e8:	ee 1f       	adc	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	a2 17       	cp	r26, r18
    15ee:	b3 07       	cpc	r27, r19
    15f0:	e4 07       	cpc	r30, r20
    15f2:	f5 07       	cpc	r31, r21
    15f4:	20 f0       	brcs	.+8      	; 0x15fe <__udivmodsi4_ep>
    15f6:	a2 1b       	sub	r26, r18
    15f8:	b3 0b       	sbc	r27, r19
    15fa:	e4 0b       	sbc	r30, r20
    15fc:	f5 0b       	sbc	r31, r21

000015fe <__udivmodsi4_ep>:
    15fe:	66 1f       	adc	r22, r22
    1600:	77 1f       	adc	r23, r23
    1602:	88 1f       	adc	r24, r24
    1604:	99 1f       	adc	r25, r25
    1606:	1a 94       	dec	r1
    1608:	69 f7       	brne	.-38     	; 0x15e4 <__udivmodsi4_loop>
    160a:	60 95       	com	r22
    160c:	70 95       	com	r23
    160e:	80 95       	com	r24
    1610:	90 95       	com	r25
    1612:	9b 01       	movw	r18, r22
    1614:	ac 01       	movw	r20, r24
    1616:	bd 01       	movw	r22, r26
    1618:	cf 01       	movw	r24, r30
    161a:	08 95       	ret

0000161c <_exit>:
    161c:	f8 94       	cli

0000161e <__stop_program>:
    161e:	ff cf       	rjmp	.-2      	; 0x161e <__stop_program>
