
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000a64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fbb  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b03  00000000  00000000  00002c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012e4  00000000  00000000  00003776  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00004a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a7c  00000000  00000000  00004dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f22  00000000  00000000  00005868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000678a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 01 02 	call	0x402	; 0x402 <main>
  74:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
uint8_t u8_g_edge  ;  /** GLOBAL COUNTER FOR NUMBER OF EDGES **/
uint16t u16_g_time ; /** GLOBAL VARIABLE FOR TIME **/

void APP_init()
{
	u8_g_edge = 0 ,  u16_g_time = 0 ; /** INITIALIZATION FOR EDGES COUNTER **/
  7c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <u8_g_edge>
  80:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <u16_g_time+0x1>
  84:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <u16_g_time>
	
	DIO_setpindir(DIO_PORTD , DIO_PIN2 , DIO_PIN_INPUT); /** INT0 PIN **/
  88:	40 e0       	ldi	r20, 0x00	; 0
  8a:	62 e0       	ldi	r22, 0x02	; 2
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
	
	INT0_init(); /** INITIALIZE INT0 **/
  92:	0e 94 08 03 	call	0x610	; 0x610 <INT0_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
  96:	0e 94 14 03 	call	0x628	; 0x628 <TMR0_init>
	
	TMR1_init(); /** INITIALIZE TIMER1 **/
  9a:	0e 94 ac 03 	call	0x758	; 0x758 <TMR1_init>
	
	LCD_init(); /** INITIALIZE LCD **/
  9e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <LCD_init>
	
	TMR0_delayms(50); /** DELAY FOR LCD INITIALIZATION **/
  a2:	62 e3       	ldi	r22, 0x32	; 50
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 3b 03 	call	0x676	; 0x676 <TMR0_delayms>
	
	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 3f 01 	call	0x27e	; 0x27e <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0e 94 3f 01 	call	0x27e	; 0x27e <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	0e 94 3f 01 	call	0x27e	; 0x27e <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 3f 01 	call	0x27e	; 0x27e <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** ROTATION DIRECTION **/
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	0e 94 8d 01 	call	0x31a	; 0x31a <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 8d 01 	call	0x31a	; 0x31a <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 8d 01 	call	0x31a	; 0x31a <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	0e 94 8d 01 	call	0x31a	; 0x31a <MOTOR_rotateclkdir>
  de:	08 95       	ret

000000e0 <APP_start>:

void APP_start()
{
	//MOTOR_applyspeed(MOTOR1_ID , speed_50);
	
	DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH);
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	62 e0       	ldi	r22, 0x02	; 2
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
	
// 	DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH);
 	TMR0_delaymicos(64);
  ea:	60 e4       	ldi	r22, 0x40	; 64
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 77 03 	call	0x6ee	; 0x6ee <TMR0_delaymicos>
// 	
 	DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW);
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
 	TMR0_delaymicos(64);
 100:	60 e4       	ldi	r22, 0x40	; 64
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 77 03 	call	0x6ee	; 0x6ee <TMR0_delaymicos>
 10c:	08 95       	ret

0000010e <__vector_1>:
	
}


ISR(INT0_vect) /** ISR OF INT0 **/
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	MOTOR_turnoff(MOTOR1_ID);
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 c7 01 	call	0x38e	; 0x38e <MOTOR_turnoff>
	MOTOR_turnoff(MOTOR2_ID);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 c7 01 	call	0x38e	; 0x38e <MOTOR_turnoff>
	MOTOR_turnoff(MOTOR3_ID);
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 c7 01 	call	0x38e	; 0x38e <MOTOR_turnoff>
	MOTOR_turnoff(MOTOR4_ID);
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 c7 01 	call	0x38e	; 0x38e <MOTOR_turnoff>
// 		TMR1_getvalue(&u16_g_time);
// 		 
// 		u8_g_edge = 0 ; /** REINITIALIZE THE EDGES COUNTER TO 0 **/
// 	}
	
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <LCD_sendcmd>:
/** FUNCTION TO SEND COMMAND TO LCD                       */
/** ARGUMENTS   : COMMAND                                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_sendcmd(uint8_t u8_a_cmd)
{
 16a:	cf 93       	push	r28
 16c:	c8 2f       	mov	r28, r24
	TMR0_init();
 16e:	0e 94 14 03 	call	0x628	; 0x628 <TMR0_init>
		DIO_setpinvalue(LCD_8BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
		TMR0_delayms(5); /** LOW **/
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);  /** COMMAND MODE       **/
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);  /** WRITE TO LCD MODE  **/
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);   /** PREPARE FOR LATCH  **/
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	63 e0       	ldi	r22, 0x03	; 3
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
		
		PORTA = ((u8_a_cmd & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB(HIGH NIBBLE) **/
 190:	8b b3       	in	r24, 0x1b	; 27
 192:	9c 2f       	mov	r25, r28
 194:	90 7f       	andi	r25, 0xF0	; 240
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	89 2b       	or	r24, r25
 19a:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	63 e0       	ldi	r22, 0x03	; 3
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
		TMR0_delayms(1);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 3b 03 	call	0x676	; 0x676 <TMR0_delayms>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
		
		
		PORTA = (((u8_a_cmd << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB(LOW NIBBLE) **/
 1bc:	20 e1       	ldi	r18, 0x10	; 16
 1be:	c2 9f       	mul	r28, r18
 1c0:	c0 01       	movw	r24, r0
 1c2:	11 24       	eor	r1, r1
 1c4:	9b b3       	in	r25, 0x1b	; 27
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	89 2b       	or	r24, r25
 1ca:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	63 e0       	ldi	r22, 0x03	; 3
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
		TMR0_delayms(1);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 3b 03 	call	0x676	; 0x676 <TMR0_delayms>
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** LATCH **/
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	63 e0       	ldi	r22, 0x03	; 3
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
		
		TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT COMMAND **/
 1ec:	65 e0       	ldi	r22, 0x05	; 5
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 3b 03 	call	0x676	; 0x676 <TMR0_delayms>
		
		#endif
}
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <LCD_init>:
/**********************************************************/
LCD_status LCD_init(void)
{
	LCD_status en_a_lcdinitstatus = VALID__LCD_INIT ; /** VARIABLE TO OLD THE RETURN STATUS OF THE FUNCTION **/
	
	TMR0_init();
 1fc:	0e 94 14 03 	call	0x628	; 0x628 <TMR0_init>
		LCD_sendcmd(LCD_CLEAR);       /** CLEAR THE LCD                                    **/
		
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT); /** SET RS PIN AS OUTPUT PIN **/
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT); /** SET RW PIN AS OUTPUT PIN **/
 20a:	41 e0       	ldi	r20, 0x01	; 1
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);  /** SET E PIN AS OUTPUT PIN  **/
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
		
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D4_PIN , DIO_PIN_OUTPUT); /** 4 DATA PINS AS OUTPUT **/
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	64 e0       	ldi	r22, 0x04	; 4
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D5_PIN , DIO_PIN_OUTPUT);
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	65 e0       	ldi	r22, 0x05	; 5
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D6_PIN , DIO_PIN_OUTPUT);
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	66 e0       	ldi	r22, 0x06	; 6
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D7_PIN , DIO_PIN_OUTPUT);
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	67 e0       	ldi	r22, 0x07	; 7
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
		
		TMR0_delayms(20); /** DELAY FOR LCD TO BE INITIALIZED **/
 246:	64 e1       	ldi	r22, 0x14	; 20
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 3b 03 	call	0x676	; 0x676 <TMR0_delayms>
		
		/** SEND SOME COMMANDS TO THE LCD FOR INITIAL SET   **/
		
		LCD_sendcmd(LCD_4BIT_MODE_CMD1); /** SEND THREE COMMANDS FOR LCD TO SET 4 BIT OPERATION MODE ( 2 LINES , 5*8 MATRIX ) **/
 252:	83 e3       	ldi	r24, 0x33	; 51
 254:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD2);
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD3);
 25e:	88 e2       	ldi	r24, 0x28	; 40
 260:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_sendcmd>
		
		LCD_sendcmd(LCD_CURSOR_OFF);     /** NO NEED FOR CURSOR SO IT IS OFF                  **/
 264:	8c e0       	ldi	r24, 0x0C	; 12
 266:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_sendcmd>
		LCD_sendcmd(LCD_CURSOR_INC);     /** DIRECTION OF WRITING FROM LEFT TO RIGHT          **/
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_sendcmd>
		LCD_sendcmd(LCD_RETURN_HOME);    /** CURSOR STARTS FROM ITS HOME POSITION             **/
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_sendcmd>
		LCD_sendcmd(LCD_CLEAR);          /** CLEAR THE LCD                                    **/
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 b5 00 	call	0x16a	; 0x16a <LCD_sendcmd>
		
		#endif 
		
}
 27c:	08 95       	ret

0000027e <MOTOR_init>:
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	b9 f0       	breq	.+46     	; 0x2b0 <MOTOR_init+0x32>
 282:	28 f0       	brcs	.+10     	; 0x28e <MOTOR_init+0x10>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	29 f1       	breq	.+74     	; 0x2d2 <MOTOR_init+0x54>
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	a1 f1       	breq	.+104    	; 0x2f4 <MOTOR_init+0x76>
 28c:	44 c0       	rjmp	.+136    	; 0x316 <MOTOR_init+0x98>
 28e:	41 e0       	ldi	r20, 0x01	; 1
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	62 e0       	ldi	r22, 0x02	; 2
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	08 95       	ret
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 2ba:	41 e0       	ldi	r20, 0x01	; 1
 2bc:	64 e0       	ldi	r22, 0x04	; 4
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	65 e0       	ldi	r22, 0x05	; 5
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 95       	ret
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	08 95       	ret
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	63 e0       	ldi	r22, 0x03	; 3
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	64 e0       	ldi	r22, 0x04	; 4
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	65 e0       	ldi	r22, 0x05	; 5
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 06 02 	call	0x40c	; 0x40c <DIO_setpindir>
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	08 95       	ret
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	08 95       	ret

0000031a <MOTOR_rotateclkdir>:
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	91 f0       	breq	.+36     	; 0x342 <MOTOR_rotateclkdir+0x28>
 31e:	28 f0       	brcs	.+10     	; 0x32a <MOTOR_rotateclkdir+0x10>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	d9 f0       	breq	.+54     	; 0x35a <MOTOR_rotateclkdir+0x40>
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	29 f1       	breq	.+74     	; 0x372 <MOTOR_rotateclkdir+0x58>
 328:	30 c0       	rjmp	.+96     	; 0x38a <MOTOR_rotateclkdir+0x70>
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	08 95       	ret
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	63 e0       	ldi	r22, 0x03	; 3
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	64 e0       	ldi	r22, 0x04	; 4
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	08 95       	ret
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	63 e0       	ldi	r22, 0x03	; 3
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	64 e0       	ldi	r22, 0x04	; 4
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 95       	ret
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	08 95       	ret

0000038e <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	91 f0       	breq	.+36     	; 0x3b6 <MOTOR_turnoff+0x28>
 392:	28 f0       	brcs	.+10     	; 0x39e <MOTOR_turnoff+0x10>
 394:	82 30       	cpi	r24, 0x02	; 2
 396:	d9 f0       	breq	.+54     	; 0x3ce <MOTOR_turnoff+0x40>
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	29 f1       	breq	.+74     	; 0x3e6 <MOTOR_turnoff+0x58>
 39c:	30 c0       	rjmp	.+96     	; 0x3fe <MOTOR_turnoff+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW); /** THE TWO PINS ARE HIGH **/
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
 3b2:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW); /** THE TWO PINS ARE HIGH **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);
		break;
 3b4:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** THE TWO PINS ARE HIGH **/
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	63 e0       	ldi	r22, 0x03	; 3
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);
 3c0:	41 e0       	ldi	r20, 0x01	; 1
 3c2:	64 e0       	ldi	r22, 0x04	; 4
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
 3ca:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** THE TWO PINS ARE HIGH **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);
		break;
 3cc:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** THE TWO PINS ARE HIGH **/
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
 3e2:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** THE TWO PINS ARE HIGH **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);
		break;
 3e4:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** THE TWO PINS ARE HIGH **/
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	63 e0       	ldi	r22, 0x03	; 3
 3ea:	82 e0       	ldi	r24, 0x02	; 2
 3ec:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	64 e0       	ldi	r22, 0x04	; 4
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
 3fa:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** THE TWO PINS ARE HIGH **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);
		break;
 3fc:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
 3fe:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
 400:	08 95       	ret

00000402 <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init();
 402:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	
    /* Replace with your application code */
    while (1) 
    {
		APP_start();
 406:	0e 94 70 00 	call	0xe0	; 0xe0 <APP_start>
 40a:	fd cf       	rjmp	.-6      	; 0x406 <main+0x4>

0000040c <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
 40c:	44 23       	and	r20, r20
 40e:	19 f0       	breq	.+6      	; 0x416 <DIO_setpindir+0xa>
 410:	41 30       	cpi	r20, 0x01	; 1
 412:	e9 f1       	breq	.+122    	; 0x48e <DIO_setpindir+0x82>
 414:	74 c0       	rjmp	.+232    	; 0x4fe <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	99 f0       	breq	.+38     	; 0x440 <DIO_setpindir+0x34>
 41a:	28 f0       	brcs	.+10     	; 0x426 <DIO_setpindir+0x1a>
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	e9 f0       	breq	.+58     	; 0x45a <DIO_setpindir+0x4e>
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	41 f1       	breq	.+80     	; 0x474 <DIO_setpindir+0x68>
 424:	6e c0       	rjmp	.+220    	; 0x502 <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
 426:	2a b3       	in	r18, 0x1a	; 26
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_setpindir+0x26>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_setpindir+0x22>
 436:	80 95       	com	r24
 438:	82 23       	and	r24, r18
 43a:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 43c:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
 43e:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
 440:	27 b3       	in	r18, 0x17	; 23
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_setpindir+0x40>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_setpindir+0x3c>
 450:	80 95       	com	r24
 452:	82 23       	and	r24, r18
 454:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 456:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
 458:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
 45a:	24 b3       	in	r18, 0x14	; 20
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_setpindir+0x5a>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	6a 95       	dec	r22
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_setpindir+0x56>
 46a:	80 95       	com	r24
 46c:	82 23       	and	r24, r18
 46e:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 470:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
 472:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
 474:	21 b3       	in	r18, 0x11	; 17
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_setpindir+0x74>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_setpindir+0x70>
 484:	80 95       	com	r24
 486:	82 23       	and	r24, r18
 488:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 48a:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
 48c:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	91 f0       	breq	.+36     	; 0x4b6 <DIO_setpindir+0xaa>
 492:	28 f0       	brcs	.+10     	; 0x49e <DIO_setpindir+0x92>
 494:	82 30       	cpi	r24, 0x02	; 2
 496:	d9 f0       	breq	.+54     	; 0x4ce <DIO_setpindir+0xc2>
 498:	83 30       	cpi	r24, 0x03	; 3
 49a:	29 f1       	breq	.+74     	; 0x4e6 <DIO_setpindir+0xda>
 49c:	34 c0       	rjmp	.+104    	; 0x506 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 49e:	2a b3       	in	r18, 0x1a	; 26
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_setpindir+0x9e>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	6a 95       	dec	r22
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_setpindir+0x9a>
 4ae:	82 2b       	or	r24, r18
 4b0:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 4b2:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 4b4:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 4b6:	27 b3       	in	r18, 0x17	; 23
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_setpindir+0xb6>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_setpindir+0xb2>
 4c6:	82 2b       	or	r24, r18
 4c8:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 4ca:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 4cc:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 4ce:	24 b3       	in	r18, 0x14	; 20
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_setpindir+0xce>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	6a 95       	dec	r22
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_setpindir+0xca>
 4de:	82 2b       	or	r24, r18
 4e0:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 4e2:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 4e4:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 4e6:	21 b3       	in	r18, 0x11	; 17
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_setpindir+0xe6>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_setpindir+0xe2>
 4f6:	82 2b       	or	r24, r18
 4f8:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 4fa:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 4fc:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 506:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
 508:	08 95       	ret

0000050a <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
 50a:	44 23       	and	r20, r20
 50c:	19 f0       	breq	.+6      	; 0x514 <DIO_setpinvalue+0xa>
 50e:	41 30       	cpi	r20, 0x01	; 1
 510:	e9 f1       	breq	.+122    	; 0x58c <DIO_setpinvalue+0x82>
 512:	74 c0       	rjmp	.+232    	; 0x5fc <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	99 f0       	breq	.+38     	; 0x53e <DIO_setpinvalue+0x34>
 518:	28 f0       	brcs	.+10     	; 0x524 <DIO_setpinvalue+0x1a>
 51a:	82 30       	cpi	r24, 0x02	; 2
 51c:	e9 f0       	breq	.+58     	; 0x558 <DIO_setpinvalue+0x4e>
 51e:	83 30       	cpi	r24, 0x03	; 3
 520:	41 f1       	breq	.+80     	; 0x572 <DIO_setpinvalue+0x68>
 522:	6e c0       	rjmp	.+220    	; 0x600 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 524:	2b b3       	in	r18, 0x1b	; 27
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_setpinvalue+0x26>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_setpinvalue+0x22>
 534:	80 95       	com	r24
 536:	82 23       	and	r24, r18
 538:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 53a:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 53c:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 53e:	28 b3       	in	r18, 0x18	; 24
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_setpinvalue+0x40>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_setpinvalue+0x3c>
 54e:	80 95       	com	r24
 550:	82 23       	and	r24, r18
 552:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 554:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 556:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 558:	25 b3       	in	r18, 0x15	; 21
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_setpinvalue+0x5a>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	6a 95       	dec	r22
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_setpinvalue+0x56>
 568:	80 95       	com	r24
 56a:	82 23       	and	r24, r18
 56c:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 56e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 570:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 572:	22 b3       	in	r18, 0x12	; 18
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_setpinvalue+0x74>
 57a:	88 0f       	add	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_setpinvalue+0x70>
 582:	80 95       	com	r24
 584:	82 23       	and	r24, r18
 586:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 588:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 58a:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	91 f0       	breq	.+36     	; 0x5b4 <DIO_setpinvalue+0xaa>
 590:	28 f0       	brcs	.+10     	; 0x59c <DIO_setpinvalue+0x92>
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	d9 f0       	breq	.+54     	; 0x5cc <DIO_setpinvalue+0xc2>
 596:	83 30       	cpi	r24, 0x03	; 3
 598:	29 f1       	breq	.+74     	; 0x5e4 <DIO_setpinvalue+0xda>
 59a:	34 c0       	rjmp	.+104    	; 0x604 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 59c:	2b b3       	in	r18, 0x1b	; 27
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_setpinvalue+0x9e>
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	6a 95       	dec	r22
 5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_setpinvalue+0x9a>
 5ac:	82 2b       	or	r24, r18
 5ae:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 5b0:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 5b2:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 5b4:	28 b3       	in	r18, 0x18	; 24
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_setpinvalue+0xb6>
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	6a 95       	dec	r22
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_setpinvalue+0xb2>
 5c4:	82 2b       	or	r24, r18
 5c6:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 5c8:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 5ca:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 5cc:	25 b3       	in	r18, 0x15	; 21
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_setpinvalue+0xce>
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	6a 95       	dec	r22
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_setpinvalue+0xca>
 5dc:	82 2b       	or	r24, r18
 5de:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 5e0:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 5e2:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 5e4:	22 b3       	in	r18, 0x12	; 18
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_setpinvalue+0xe6>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	6a 95       	dec	r22
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_setpinvalue+0xe2>
 5f4:	82 2b       	or	r24, r18
 5f6:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 5f8:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 5fa:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 604:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 606:	08 95       	ret

00000608 <SET_GLOBALINTERRUPT>:
/** RETURNS    : VOID                                   */
/********************************************************/
void SET_GLOBALINTERRUPT(void)
{
	#if GLOBAL_INTERRUPT_STATE  ==  GLOBAL_INTERRUPT_STATE_ENABLE /** ENABLE GLOBAL INTERRUPTS **/
	  set_bit(SREG , 7);
 608:	8f b7       	in	r24, 0x3f	; 63
 60a:	80 68       	ori	r24, 0x80	; 128
 60c:	8f bf       	out	0x3f, r24	; 63
 60e:	08 95       	ret

00000610 <INT0_init>:
/** ARGUMENTS  : VOID                                   */
/** RETURNS    : VOID                                   */
/********************************************************/
void INT0_init(void)
{
	SET_GLOBALINTERRUPT(); /** ENABLE GLOBAL INTERRUPTS */
 610:	0e 94 04 03 	call	0x608	; 0x608 <SET_GLOBALINTERRUPT>
	  clear_bit(MCUCR , 0);
	  clear_bit(MCUCR , 1);
	  
	#elif EXTERNAL_INT0_TRIGGER  == INT_TRIGGER_ANY_CHANGE
	
	  set_bit(MCUCR , 0);
 614:	85 b7       	in	r24, 0x35	; 53
 616:	81 60       	ori	r24, 0x01	; 1
 618:	85 bf       	out	0x35, r24	; 53
	  clear_bit(MCUCR ,1);
 61a:	85 b7       	in	r24, 0x35	; 53
 61c:	8d 7f       	andi	r24, 0xFD	; 253
 61e:	85 bf       	out	0x35, r24	; 53
	  
	#endif
	
	/* Enable INT0 */
	set_bit(GICR , 6);	
 620:	8b b7       	in	r24, 0x3b	; 59
 622:	80 64       	ori	r24, 0x40	; 64
 624:	8b bf       	out	0x3b, r24	; 59
 626:	08 95       	ret

00000628 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 628:	83 b7       	in	r24, 0x33	; 51
 62a:	8f 77       	andi	r24, 0x7F	; 127
 62c:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 62e:	83 b7       	in	r24, 0x33	; 51
 630:	8f 7b       	andi	r24, 0xBF	; 191
 632:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 634:	83 b7       	in	r24, 0x33	; 51
 636:	87 7f       	andi	r24, 0xF7	; 247
 638:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 63a:	83 b7       	in	r24, 0x33	; 51
 63c:	8f 7e       	andi	r24, 0xEF	; 239
 63e:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 640:	83 b7       	in	r24, 0x33	; 51
 642:	8f 7d       	andi	r24, 0xDF	; 223
 644:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	08 95       	ret

0000064a <TMR0_start>:
{
	TMR0_start_error en_a_startstatus = VALID_START ; /** VARIABLE TO RETURN THE STATUS OF START **/
	
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024
	
	set_bit(TCCR0 , 0);
 64a:	83 b7       	in	r24, 0x33	; 51
 64c:	81 60       	ori	r24, 0x01	; 1
 64e:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 650:	83 b7       	in	r24, 0x33	; 51
 652:	8d 7f       	andi	r24, 0xFD	; 253
 654:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 2);
 656:	83 b7       	in	r24, 0x33	; 51
 658:	84 60       	ori	r24, 0x04	; 4
 65a:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	08 95       	ret

00000660 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 660:	83 b7       	in	r24, 0x33	; 51
 662:	8e 7f       	andi	r24, 0xFE	; 254
 664:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 666:	83 b7       	in	r24, 0x33	; 51
 668:	8d 7f       	andi	r24, 0xFD	; 253
 66a:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 66c:	83 b7       	in	r24, 0x33	; 51
 66e:	8b 7f       	andi	r24, 0xFB	; 251
 670:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	08 95       	ret

00000676 <TMR0_delayms>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   16 MHZ                         **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	 
        u32_gs_tmr0nuofovs = (u32_a_delayms / 16.384);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/ 
 676:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__floatunsisf>
 67a:	2f e6       	ldi	r18, 0x6F	; 111
 67c:	32 e1       	ldi	r19, 0x12	; 18
 67e:	43 e8       	ldi	r20, 0x83	; 131
 680:	51 e4       	ldi	r21, 0x41	; 65
 682:	0e 94 c7 03 	call	0x78e	; 0x78e <__divsf3>
 686:	0e 94 39 04 	call	0x872	; 0x872 <__fixunssfsi>
 68a:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 68e:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 692:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 696:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
        TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 69a:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 69c:	0e 94 25 03 	call	0x64a	; 0x64a <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 6a0:	40 e0       	ldi	r20, 0x00	; 0
 6a2:	50 e0       	ldi	r21, 0x00	; 0
 6a4:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 6a6:	0a c0       	rjmp	.+20     	; 0x6bc <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 6a8:	08 b6       	in	r0, 0x38	; 56
 6aa:	00 fe       	sbrs	r0, 0
 6ac:	fd cf       	rjmp	.-6      	; 0x6a8 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 6ae:	88 b7       	in	r24, 0x38	; 56
 6b0:	81 60       	ori	r24, 0x01	; 1
 6b2:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 6b4:	4f 5f       	subi	r20, 0xFF	; 255
 6b6:	5f 4f       	sbci	r21, 0xFF	; 255
 6b8:	6f 4f       	sbci	r22, 0xFF	; 255
 6ba:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 6bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 6c0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6c4:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 6c8:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 6cc:	48 17       	cp	r20, r24
 6ce:	59 07       	cpc	r21, r25
 6d0:	6a 07       	cpc	r22, r26
 6d2:	7b 07       	cpc	r23, r27
 6d4:	48 f3       	brcs	.-46     	; 0x6a8 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 6d6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 6da:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 6de:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 6e2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 6e6:	0e 94 30 03 	call	0x660	; 0x660 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	08 95       	ret

000006ee <TMR0_delaymicos>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   1 MHZ                          **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	
	u32_gs_tmr0nuofovs = (u32_a_delaymicros / 32768);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
 6ee:	dc 01       	movw	r26, r24
 6f0:	cb 01       	movw	r24, r22
 6f2:	07 2e       	mov	r0, r23
 6f4:	7f e0       	ldi	r23, 0x0F	; 15
 6f6:	b6 95       	lsr	r27
 6f8:	a7 95       	ror	r26
 6fa:	97 95       	ror	r25
 6fc:	87 95       	ror	r24
 6fe:	7a 95       	dec	r23
 700:	d1 f7       	brne	.-12     	; 0x6f6 <TMR0_delaymicos+0x8>
 702:	70 2d       	mov	r23, r0
 704:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 708:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 70c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 710:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 714:	12 be       	out	0x32, r1	; 50
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 716:	0e 94 25 03 	call	0x64a	; 0x64a <TMR0_start>
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delaymicos(uint32_t u32_a_delaymicros)
{
	uint32_t u32_a_overflowcounter = 0 ;
 71a:	40 e0       	ldi	r20, 0x00	; 0
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 720:	0a c0       	rjmp	.+20     	; 0x736 <TMR0_delaymicos+0x48>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 722:	08 b6       	in	r0, 0x38	; 56
 724:	00 fe       	sbrs	r0, 0
 726:	fd cf       	rjmp	.-6      	; 0x722 <TMR0_delaymicos+0x34>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 728:	88 b7       	in	r24, 0x38	; 56
 72a:	81 60       	ori	r24, 0x01	; 1
 72c:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 72e:	4f 5f       	subi	r20, 0xFF	; 255
 730:	5f 4f       	sbci	r21, 0xFF	; 255
 732:	6f 4f       	sbci	r22, 0xFF	; 255
 734:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 736:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 73a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 73e:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 742:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 746:	48 17       	cp	r20, r24
 748:	59 07       	cpc	r21, r25
 74a:	6a 07       	cpc	r22, r26
 74c:	7b 07       	cpc	r23, r27
 74e:	48 f3       	brcs	.-46     	; 0x722 <TMR0_delaymicos+0x34>
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_a_overflowcounter = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop(); /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 750:	0e 94 30 03 	call	0x660	; 0x660 <TMR0_stop>
	
	return en_a_delaystatus ; 
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	08 95       	ret

00000758 <TMR1_init>:
	 
	#elif TMR1_CLK_SOURCE == TMR1_INTERNAL_CLK_SOURCE
	
	 #if TMR1_MODE == NORMAL_MODE
	  
	  clear_bit(TCCR1A , 0);
 758:	8f b5       	in	r24, 0x2f	; 47
 75a:	8e 7f       	andi	r24, 0xFE	; 254
 75c:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1A , 1);
 75e:	8f b5       	in	r24, 0x2f	; 47
 760:	8d 7f       	andi	r24, 0xFD	; 253
 762:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1B , 3);
 764:	8e b5       	in	r24, 0x2e	; 46
 766:	87 7f       	andi	r24, 0xF7	; 247
 768:	8e bd       	out	0x2e, r24	; 46
	  clear_bit(TCCR1B , 4);
 76a:	8e b5       	in	r24, 0x2e	; 46
 76c:	8f 7e       	andi	r24, 0xEF	; 239
 76e:	8e bd       	out	0x2e, r24	; 46
	  
	  /* NON PWM MODE */
	  set_bit(TCCR1A , 2);
 770:	8f b5       	in	r24, 0x2f	; 47
 772:	84 60       	ori	r24, 0x04	; 4
 774:	8f bd       	out	0x2f, r24	; 47
	  set_bit(TCCR1A , 3);
 776:	8f b5       	in	r24, 0x2f	; 47
 778:	88 60       	ori	r24, 0x08	; 8
 77a:	8f bd       	out	0x2f, r24	; 47
	  
	  /* ENABLE INTERRUPT */
	  set_bit(SREG , 7);   /** ENABLE GLOBAL INTTERUPTS **/
 77c:	8f b7       	in	r24, 0x3f	; 63
 77e:	80 68       	ori	r24, 0x80	; 128
 780:	8f bf       	out	0x3f, r24	; 63
	  set_bit(TIMSK , 2);  /** NABLE TMR1 INTERRUPT **/
 782:	89 b7       	in	r24, 0x39	; 57
 784:	9a b7       	in	r25, 0x3a	; 58
 786:	84 60       	ori	r24, 0x04	; 4
 788:	9a bf       	out	0x3a, r25	; 58
 78a:	89 bf       	out	0x39, r24	; 57
	 /* SET THE OC1B BIT AS OUTPUT */
	 DIO_setpindir(DIO_PORTD , DIO_PIN4 , DIO_PIN_OUTPUT);
	#endif
	#endif
#endif
}
 78c:	08 95       	ret

0000078e <__divsf3>:
 78e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <__divsf3x>
 792:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_round>
 796:	0e 94 b5 04 	call	0x96a	; 0x96a <__fp_pscB>
 79a:	58 f0       	brcs	.+22     	; 0x7b2 <__divsf3+0x24>
 79c:	0e 94 ae 04 	call	0x95c	; 0x95c <__fp_pscA>
 7a0:	40 f0       	brcs	.+16     	; 0x7b2 <__divsf3+0x24>
 7a2:	29 f4       	brne	.+10     	; 0x7ae <__divsf3+0x20>
 7a4:	5f 3f       	cpi	r21, 0xFF	; 255
 7a6:	29 f0       	breq	.+10     	; 0x7b2 <__divsf3+0x24>
 7a8:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 7ac:	51 11       	cpse	r21, r1
 7ae:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>
 7b2:	0c 94 ab 04 	jmp	0x956	; 0x956 <__fp_nan>

000007b6 <__divsf3x>:
 7b6:	0e 94 cd 04 	call	0x99a	; 0x99a <__fp_split3>
 7ba:	68 f3       	brcs	.-38     	; 0x796 <__divsf3+0x8>

000007bc <__divsf3_pse>:
 7bc:	99 23       	and	r25, r25
 7be:	b1 f3       	breq	.-20     	; 0x7ac <__divsf3+0x1e>
 7c0:	55 23       	and	r21, r21
 7c2:	91 f3       	breq	.-28     	; 0x7a8 <__divsf3+0x1a>
 7c4:	95 1b       	sub	r25, r21
 7c6:	55 0b       	sbc	r21, r21
 7c8:	bb 27       	eor	r27, r27
 7ca:	aa 27       	eor	r26, r26
 7cc:	62 17       	cp	r22, r18
 7ce:	73 07       	cpc	r23, r19
 7d0:	84 07       	cpc	r24, r20
 7d2:	38 f0       	brcs	.+14     	; 0x7e2 <__divsf3_pse+0x26>
 7d4:	9f 5f       	subi	r25, 0xFF	; 255
 7d6:	5f 4f       	sbci	r21, 0xFF	; 255
 7d8:	22 0f       	add	r18, r18
 7da:	33 1f       	adc	r19, r19
 7dc:	44 1f       	adc	r20, r20
 7de:	aa 1f       	adc	r26, r26
 7e0:	a9 f3       	breq	.-22     	; 0x7cc <__divsf3_pse+0x10>
 7e2:	35 d0       	rcall	.+106    	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7e4:	0e 2e       	mov	r0, r30
 7e6:	3a f0       	brmi	.+14     	; 0x7f6 <__divsf3_pse+0x3a>
 7e8:	e0 e8       	ldi	r30, 0x80	; 128
 7ea:	32 d0       	rcall	.+100    	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 7ec:	91 50       	subi	r25, 0x01	; 1
 7ee:	50 40       	sbci	r21, 0x00	; 0
 7f0:	e6 95       	lsr	r30
 7f2:	00 1c       	adc	r0, r0
 7f4:	ca f7       	brpl	.-14     	; 0x7e8 <__divsf3_pse+0x2c>
 7f6:	2b d0       	rcall	.+86     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7f8:	fe 2f       	mov	r31, r30
 7fa:	29 d0       	rcall	.+82     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 7fc:	66 0f       	add	r22, r22
 7fe:	77 1f       	adc	r23, r23
 800:	88 1f       	adc	r24, r24
 802:	bb 1f       	adc	r27, r27
 804:	26 17       	cp	r18, r22
 806:	37 07       	cpc	r19, r23
 808:	48 07       	cpc	r20, r24
 80a:	ab 07       	cpc	r26, r27
 80c:	b0 e8       	ldi	r27, 0x80	; 128
 80e:	09 f0       	breq	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 810:	bb 0b       	sbc	r27, r27
 812:	80 2d       	mov	r24, r0
 814:	bf 01       	movw	r22, r30
 816:	ff 27       	eor	r31, r31
 818:	93 58       	subi	r25, 0x83	; 131
 81a:	5f 4f       	sbci	r21, 0xFF	; 255
 81c:	3a f0       	brmi	.+14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 81e:	9e 3f       	cpi	r25, 0xFE	; 254
 820:	51 05       	cpc	r21, r1
 822:	78 f0       	brcs	.+30     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 824:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__fp_inf>
 828:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_szero>
 82c:	5f 3f       	cpi	r21, 0xFF	; 255
 82e:	e4 f3       	brlt	.-8      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 830:	98 3e       	cpi	r25, 0xE8	; 232
 832:	d4 f3       	brlt	.-12     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 834:	86 95       	lsr	r24
 836:	77 95       	ror	r23
 838:	67 95       	ror	r22
 83a:	b7 95       	ror	r27
 83c:	f7 95       	ror	r31
 83e:	9f 5f       	subi	r25, 0xFF	; 255
 840:	c9 f7       	brne	.-14     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 842:	88 0f       	add	r24, r24
 844:	91 1d       	adc	r25, r1
 846:	96 95       	lsr	r25
 848:	87 95       	ror	r24
 84a:	97 f9       	bld	r25, 7
 84c:	08 95       	ret
 84e:	e1 e0       	ldi	r30, 0x01	; 1
 850:	66 0f       	add	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	bb 1f       	adc	r27, r27
 858:	62 17       	cp	r22, r18
 85a:	73 07       	cpc	r23, r19
 85c:	84 07       	cpc	r24, r20
 85e:	ba 07       	cpc	r27, r26
 860:	20 f0       	brcs	.+8      	; 0x86a <__stack+0xb>
 862:	62 1b       	sub	r22, r18
 864:	73 0b       	sbc	r23, r19
 866:	84 0b       	sbc	r24, r20
 868:	ba 0b       	sbc	r27, r26
 86a:	ee 1f       	adc	r30, r30
 86c:	88 f7       	brcc	.-30     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 86e:	e0 95       	com	r30
 870:	08 95       	ret

00000872 <__fixunssfsi>:
 872:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__fp_splitA>
 876:	88 f0       	brcs	.+34     	; 0x89a <__fixunssfsi+0x28>
 878:	9f 57       	subi	r25, 0x7F	; 127
 87a:	98 f0       	brcs	.+38     	; 0x8a2 <__fixunssfsi+0x30>
 87c:	b9 2f       	mov	r27, r25
 87e:	99 27       	eor	r25, r25
 880:	b7 51       	subi	r27, 0x17	; 23
 882:	b0 f0       	brcs	.+44     	; 0x8b0 <__fixunssfsi+0x3e>
 884:	e1 f0       	breq	.+56     	; 0x8be <__fixunssfsi+0x4c>
 886:	66 0f       	add	r22, r22
 888:	77 1f       	adc	r23, r23
 88a:	88 1f       	adc	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	1a f0       	brmi	.+6      	; 0x896 <__fixunssfsi+0x24>
 890:	ba 95       	dec	r27
 892:	c9 f7       	brne	.-14     	; 0x886 <__fixunssfsi+0x14>
 894:	14 c0       	rjmp	.+40     	; 0x8be <__fixunssfsi+0x4c>
 896:	b1 30       	cpi	r27, 0x01	; 1
 898:	91 f0       	breq	.+36     	; 0x8be <__fixunssfsi+0x4c>
 89a:	0e 94 ef 04 	call	0x9de	; 0x9de <__fp_zero>
 89e:	b1 e0       	ldi	r27, 0x01	; 1
 8a0:	08 95       	ret
 8a2:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__fp_zero>
 8a6:	67 2f       	mov	r22, r23
 8a8:	78 2f       	mov	r23, r24
 8aa:	88 27       	eor	r24, r24
 8ac:	b8 5f       	subi	r27, 0xF8	; 248
 8ae:	39 f0       	breq	.+14     	; 0x8be <__fixunssfsi+0x4c>
 8b0:	b9 3f       	cpi	r27, 0xF9	; 249
 8b2:	cc f3       	brlt	.-14     	; 0x8a6 <__fixunssfsi+0x34>
 8b4:	86 95       	lsr	r24
 8b6:	77 95       	ror	r23
 8b8:	67 95       	ror	r22
 8ba:	b3 95       	inc	r27
 8bc:	d9 f7       	brne	.-10     	; 0x8b4 <__fixunssfsi+0x42>
 8be:	3e f4       	brtc	.+14     	; 0x8ce <__fixunssfsi+0x5c>
 8c0:	90 95       	com	r25
 8c2:	80 95       	com	r24
 8c4:	70 95       	com	r23
 8c6:	61 95       	neg	r22
 8c8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ca:	8f 4f       	sbci	r24, 0xFF	; 255
 8cc:	9f 4f       	sbci	r25, 0xFF	; 255
 8ce:	08 95       	ret

000008d0 <__floatunsisf>:
 8d0:	e8 94       	clt
 8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__floatsisf+0x12>

000008d4 <__floatsisf>:
 8d4:	97 fb       	bst	r25, 7
 8d6:	3e f4       	brtc	.+14     	; 0x8e6 <__floatsisf+0x12>
 8d8:	90 95       	com	r25
 8da:	80 95       	com	r24
 8dc:	70 95       	com	r23
 8de:	61 95       	neg	r22
 8e0:	7f 4f       	sbci	r23, 0xFF	; 255
 8e2:	8f 4f       	sbci	r24, 0xFF	; 255
 8e4:	9f 4f       	sbci	r25, 0xFF	; 255
 8e6:	99 23       	and	r25, r25
 8e8:	a9 f0       	breq	.+42     	; 0x914 <__floatsisf+0x40>
 8ea:	f9 2f       	mov	r31, r25
 8ec:	96 e9       	ldi	r25, 0x96	; 150
 8ee:	bb 27       	eor	r27, r27
 8f0:	93 95       	inc	r25
 8f2:	f6 95       	lsr	r31
 8f4:	87 95       	ror	r24
 8f6:	77 95       	ror	r23
 8f8:	67 95       	ror	r22
 8fa:	b7 95       	ror	r27
 8fc:	f1 11       	cpse	r31, r1
 8fe:	f8 cf       	rjmp	.-16     	; 0x8f0 <__floatsisf+0x1c>
 900:	fa f4       	brpl	.+62     	; 0x940 <__floatsisf+0x6c>
 902:	bb 0f       	add	r27, r27
 904:	11 f4       	brne	.+4      	; 0x90a <__floatsisf+0x36>
 906:	60 ff       	sbrs	r22, 0
 908:	1b c0       	rjmp	.+54     	; 0x940 <__floatsisf+0x6c>
 90a:	6f 5f       	subi	r22, 0xFF	; 255
 90c:	7f 4f       	sbci	r23, 0xFF	; 255
 90e:	8f 4f       	sbci	r24, 0xFF	; 255
 910:	9f 4f       	sbci	r25, 0xFF	; 255
 912:	16 c0       	rjmp	.+44     	; 0x940 <__floatsisf+0x6c>
 914:	88 23       	and	r24, r24
 916:	11 f0       	breq	.+4      	; 0x91c <__floatsisf+0x48>
 918:	96 e9       	ldi	r25, 0x96	; 150
 91a:	11 c0       	rjmp	.+34     	; 0x93e <__floatsisf+0x6a>
 91c:	77 23       	and	r23, r23
 91e:	21 f0       	breq	.+8      	; 0x928 <__floatsisf+0x54>
 920:	9e e8       	ldi	r25, 0x8E	; 142
 922:	87 2f       	mov	r24, r23
 924:	76 2f       	mov	r23, r22
 926:	05 c0       	rjmp	.+10     	; 0x932 <__floatsisf+0x5e>
 928:	66 23       	and	r22, r22
 92a:	71 f0       	breq	.+28     	; 0x948 <__floatsisf+0x74>
 92c:	96 e8       	ldi	r25, 0x86	; 134
 92e:	86 2f       	mov	r24, r22
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	60 e0       	ldi	r22, 0x00	; 0
 934:	2a f0       	brmi	.+10     	; 0x940 <__floatsisf+0x6c>
 936:	9a 95       	dec	r25
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	da f7       	brpl	.-10     	; 0x936 <__floatsisf+0x62>
 940:	88 0f       	add	r24, r24
 942:	96 95       	lsr	r25
 944:	87 95       	ror	r24
 946:	97 f9       	bld	r25, 7
 948:	08 95       	ret

0000094a <__fp_inf>:
 94a:	97 f9       	bld	r25, 7
 94c:	9f 67       	ori	r25, 0x7F	; 127
 94e:	80 e8       	ldi	r24, 0x80	; 128
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	60 e0       	ldi	r22, 0x00	; 0
 954:	08 95       	ret

00000956 <__fp_nan>:
 956:	9f ef       	ldi	r25, 0xFF	; 255
 958:	80 ec       	ldi	r24, 0xC0	; 192
 95a:	08 95       	ret

0000095c <__fp_pscA>:
 95c:	00 24       	eor	r0, r0
 95e:	0a 94       	dec	r0
 960:	16 16       	cp	r1, r22
 962:	17 06       	cpc	r1, r23
 964:	18 06       	cpc	r1, r24
 966:	09 06       	cpc	r0, r25
 968:	08 95       	ret

0000096a <__fp_pscB>:
 96a:	00 24       	eor	r0, r0
 96c:	0a 94       	dec	r0
 96e:	12 16       	cp	r1, r18
 970:	13 06       	cpc	r1, r19
 972:	14 06       	cpc	r1, r20
 974:	05 06       	cpc	r0, r21
 976:	08 95       	ret

00000978 <__fp_round>:
 978:	09 2e       	mov	r0, r25
 97a:	03 94       	inc	r0
 97c:	00 0c       	add	r0, r0
 97e:	11 f4       	brne	.+4      	; 0x984 <__fp_round+0xc>
 980:	88 23       	and	r24, r24
 982:	52 f0       	brmi	.+20     	; 0x998 <__fp_round+0x20>
 984:	bb 0f       	add	r27, r27
 986:	40 f4       	brcc	.+16     	; 0x998 <__fp_round+0x20>
 988:	bf 2b       	or	r27, r31
 98a:	11 f4       	brne	.+4      	; 0x990 <__fp_round+0x18>
 98c:	60 ff       	sbrs	r22, 0
 98e:	04 c0       	rjmp	.+8      	; 0x998 <__fp_round+0x20>
 990:	6f 5f       	subi	r22, 0xFF	; 255
 992:	7f 4f       	sbci	r23, 0xFF	; 255
 994:	8f 4f       	sbci	r24, 0xFF	; 255
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	08 95       	ret

0000099a <__fp_split3>:
 99a:	57 fd       	sbrc	r21, 7
 99c:	90 58       	subi	r25, 0x80	; 128
 99e:	44 0f       	add	r20, r20
 9a0:	55 1f       	adc	r21, r21
 9a2:	59 f0       	breq	.+22     	; 0x9ba <__fp_splitA+0x10>
 9a4:	5f 3f       	cpi	r21, 0xFF	; 255
 9a6:	71 f0       	breq	.+28     	; 0x9c4 <__fp_splitA+0x1a>
 9a8:	47 95       	ror	r20

000009aa <__fp_splitA>:
 9aa:	88 0f       	add	r24, r24
 9ac:	97 fb       	bst	r25, 7
 9ae:	99 1f       	adc	r25, r25
 9b0:	61 f0       	breq	.+24     	; 0x9ca <__fp_splitA+0x20>
 9b2:	9f 3f       	cpi	r25, 0xFF	; 255
 9b4:	79 f0       	breq	.+30     	; 0x9d4 <__fp_splitA+0x2a>
 9b6:	87 95       	ror	r24
 9b8:	08 95       	ret
 9ba:	12 16       	cp	r1, r18
 9bc:	13 06       	cpc	r1, r19
 9be:	14 06       	cpc	r1, r20
 9c0:	55 1f       	adc	r21, r21
 9c2:	f2 cf       	rjmp	.-28     	; 0x9a8 <__fp_split3+0xe>
 9c4:	46 95       	lsr	r20
 9c6:	f1 df       	rcall	.-30     	; 0x9aa <__fp_splitA>
 9c8:	08 c0       	rjmp	.+16     	; 0x9da <__fp_splitA+0x30>
 9ca:	16 16       	cp	r1, r22
 9cc:	17 06       	cpc	r1, r23
 9ce:	18 06       	cpc	r1, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	f1 cf       	rjmp	.-30     	; 0x9b6 <__fp_splitA+0xc>
 9d4:	86 95       	lsr	r24
 9d6:	71 05       	cpc	r23, r1
 9d8:	61 05       	cpc	r22, r1
 9da:	08 94       	sec
 9dc:	08 95       	ret

000009de <__fp_zero>:
 9de:	e8 94       	clt

000009e0 <__fp_szero>:
 9e0:	bb 27       	eor	r27, r27
 9e2:	66 27       	eor	r22, r22
 9e4:	77 27       	eor	r23, r23
 9e6:	cb 01       	movw	r24, r22
 9e8:	97 f9       	bld	r25, 7
 9ea:	08 95       	ret

000009ec <_exit>:
 9ec:	f8 94       	cli

000009ee <__stop_program>:
 9ee:	ff cf       	rjmp	.-2      	; 0x9ee <__stop_program>
