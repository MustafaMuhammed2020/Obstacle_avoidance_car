
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000016d4  00001768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000a6  008000a6  000017ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003681  00000000  00000000  00001b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101e  00000000  00000000  000051ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002005  00000000  00000000  000061cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  000081d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000efd  00000000  00000000  000087b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143e  00000000  00000000  000096ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000aaeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 01 03 	jmp	0x602	; 0x602 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4c 03 	jmp	0x698	; 0x698 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4e 07 	call	0xe9c	; 0xe9c <main>
      8a:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint32_t u32_g_tick = 0 ;            /** GLOBAL VARIABLE TO BE COMPARED WITH DELAY TICKS **/   

/** FUNCTION TO INITIALIZE APPLICATION MODULES **/
void APP_init()
{
    ICU_init(); /** INITIALIZE ICU **/
      92:	0e 94 a0 03 	call	0x740	; 0x740 <ICU_init>

	US_init(); /** INITILAIZATION ULTRASONIC MODULE **/
      96:	0e 94 37 07 	call	0xe6e	; 0xe6e <US_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
      9a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <TMR0_init>
	
	TMR2_init() ; /** INITIALIZE TIMER 2 **/
      9e:	0e 94 ae 09 	call	0x135c	; 0x135c <TMR2_init>
	
	KEYPAD_init() ; /** INITIALIZE KEYPAD **/
      a2:	0e 94 c1 03 	call	0x782	; 0x782 <KEYPAD_init>
	
	Button_init(); /** INITIALIZATION OF BUTTON **/
      a6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <Button_init>
	
	LCD_init(); /** INITIALIZE LCD **/
      aa:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <LCD_init>
	
	TMR0_delayms(MS_DELAY_50); /** DELAY FOR LCD INITIALIZATION **/
      ae:	62 e3       	ldi	r22, 0x32	; 50
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>

	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 29 06 	call	0xc52	; 0xc52 <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 29 06 	call	0xc52	; 0xc52 <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 29 06 	call	0xc52	; 0xc52 <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 29 06 	call	0xc52	; 0xc52 <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_rotateclkdir>
      ea:	08 95       	ret

000000ec <APP_setentry>:

}

/** FUNCTION TO SET DEFAULTS **/
void APP_setentry()
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <APP_setentry+0x6>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_a_btnstatus = 0 , u8_a_pressednum = 0 ;
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	1a 82       	std	Y+2, r1	; 0x02
	
 	u32_g_tick = 0 ;
      fa:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
      fe:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     102:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     106:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     10a:	88 e8       	ldi	r24, 0x88	; 136
     10c:	93 e1       	ldi	r25, 0x13	; 19
     10e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <TMR2_getovs>
     112:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     116:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     11a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     11e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>

 	TMR2_start() ; /** START TIMER 2 **/
     122:	0e 94 c5 09 	call	0x138a	; 0x138a <TMR2_start>

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     126:	39 c0       	rjmp	.+114    	; 0x19a <APP_setentry+0xae>
	{
 		LCD_goto(LCD_POS_0 , LCD_POS_1);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
 		LCD_writestr("Set Def. Rot");
     130:	80 e6       	ldi	r24, 0x60	; 96
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_writestr>

 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON PRESSED **/
     138:	ae 01       	movw	r20, r28
     13a:	4f 5f       	subi	r20, 0xFF	; 255
     13c:	5f 4f       	sbci	r21, 0xFF	; 255
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 81 03 	call	0x702	; 0x702 <Is_pressed>
 		TMR0_delayms(MS_DELAY_100); /** WAIT 100 MS FOR BUTTON TO SETTLE **/
     146:	64 e6       	ldi	r22, 0x64	; 100
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>
 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON IS STILL PRESSED **/
     152:	ae 01       	movw	r20, r28
     154:	4f 5f       	subi	r20, 0xFF	; 255
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 81 03 	call	0x702	; 0x702 <Is_pressed>

		if (u8_a_btnstatus) /** IF THE BUTTON PRESSED **/
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 23       	and	r24, r24
     164:	d1 f0       	breq	.+52     	; 0x19a <APP_setentry+0xae>
 		{
 			u8_g_rotationcounter++ ; /** INCREASE ROTATION COUNTER BY 1 **/
     166:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <u8_g_rotationcounter>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <u8_g_rotationcounter>

 			if (u8_g_rotationcounter == LEFT_ROTATION) /** LEFT ROTATION **/
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	41 f4       	brne	.+16     	; 0x184 <APP_setentry+0x98>
 			{
				LCD_goto(LCD_POS_1 , LCD_POS_1);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
				LCD_writestr("LEFT ROTATION");
     17a:	8d e6       	ldi	r24, 0x6D	; 109
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_writestr>
     182:	0a c0       	rjmp	.+20     	; 0x198 <APP_setentry+0xac>
			}
	 		else if(u8_g_rotationcounter == RIGHT_ROTATION) /** RIGHT ROTATION **/
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	41 f4       	brne	.+16     	; 0x198 <APP_setentry+0xac>
	 		{
 				LCD_goto(LCD_POS_1 , LCD_POS_1);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
 				LCD_writestr("RIGHT ROTATION");
     190:	8b e7       	ldi	r24, 0x7B	; 123
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_writestr>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
     198:	19 82       	std	Y+1, r1	; 0x01
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

 	TMR2_start() ; /** START TIMER 2 **/

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     19a:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     19e:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     1a2:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     1a6:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     1aa:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     1ae:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     1b2:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     1b6:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     1ba:	48 17       	cp	r20, r24
     1bc:	59 07       	cpc	r21, r25
     1be:	6a 07       	cpc	r22, r26
     1c0:	7b 07       	cpc	r23, r27
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <APP_setentry+0xda>
     1c4:	b1 cf       	rjmp	.-158    	; 0x128 <APP_setentry+0x3c>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
 		}
 	}
	
 	TMR2_stop(); /** STOP TIMER 2 **/
     1c6:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TMR2_stop>
		
	do /** ACCEPT KEYPAD BUTTON 1 FROM USER **/
	{
 		KEYPAD_read(&u8_a_pressednum);
     1ca:	ce 01       	movw	r24, r28
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	0e 94 ff 03 	call	0x7fe	; 0x7fe <KEYPAD_read>
 	} while (u8_a_pressednum != START_BTN);
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	81 33       	cpi	r24, 0x31	; 49
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <APP_setentry+0xde>

 	 LCD_sendcmd(LCD_CLEAR);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     1de:	64 e1       	ldi	r22, 0x14	; 20
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>
	 
	 LCD_goto(LCD_POS_0 , LCD_POS_2);
     1ea:	62 e0       	ldi	r22, 0x02	; 2
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
	 LCD_writestr("WAITING..");
     1f2:	8a e8       	ldi	r24, 0x8A	; 138
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_writestr>
	 
	 TMR0_delayms(MS_DELAY_2000); /** WAIT 2 SECONDS **/
     1fa:	60 ed       	ldi	r22, 0xD0	; 208
     1fc:	77 e0       	ldi	r23, 0x07	; 7
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>
	 
	 LCD_sendcmd(LCD_CLEAR);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     20c:	64 e1       	ldi	r22, 0x14	; 20
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>
	 
	 LCD_goto(LCD_POS_0, LCD_POS_1) ; /** DISPLAY THE DISTANCE **/
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
	 LCD_writestr("Dis:");
     220:	84 e9       	ldi	r24, 0x94	; 148
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_writestr>
	 
	 LCD_goto(LCD_POS_0, LCD_POS_8) ; /** DISPLAY THE SPEED **/
     228:	68 e0       	ldi	r22, 0x08	; 8
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
	 LCD_writechar('S');
     230:	83 e5       	ldi	r24, 0x53	; 83
     232:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_writechar>
	 LCD_writechar(':');
     236:	8a e3       	ldi	r24, 0x3A	; 58
     238:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_writechar>
	 
	 LCD_goto(LCD_POS_1, LCD_POS_1) ; /** DISPLAY THE DIRECTION OF MOVEMENT **/
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
	 LCD_writestr("Dir:");
     244:	89 e9       	ldi	r24, 0x99	; 153
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_writestr>
	 
}
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <APP_start>:

void APP_start()
{	
	u32_g_tick = 0 , u32_g_delay = 0 ; /** VARIABLES TO HANDLE THE DELAY **/
     256:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
     25a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     25e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     262:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
     266:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <u32_g_delay>
     26a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <u32_g_delay+0x1>
     26e:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <u32_g_delay+0x2>
     272:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <u32_g_delay+0x3>
	
	US_sendtrigger(); /** SEND TRIGGER **/
     276:	0e 94 3d 07 	call	0xe7a	; 0xe7a <US_sendtrigger>
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     27a:	88 e8       	ldi	r24, 0x88	; 136
     27c:	93 e1       	ldi	r25, 0x13	; 19
     27e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <TMR2_getovs>
     282:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     286:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     28a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     28e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     292:	9f c0       	rjmp	.+318    	; 0x3d2 <APP_start+0x17c>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
     294:	af e9       	ldi	r26, 0x9F	; 159
     296:	b6 e4       	ldi	r27, 0x46	; 70
     298:	0e 94 37 0b 	call	0x166e	; 0x166e <__umulhisi3>
     29c:	88 0f       	add	r24, r24
     29e:	89 2f       	mov	r24, r25
     2a0:	88 1f       	adc	r24, r24
     2a2:	99 0b       	sbc	r25, r25
     2a4:	91 95       	neg	r25
     2a6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <u8_g_distance>
			
			TMR2_start() ; /** START TIMER 2 **/
     2aa:	0e 94 c5 09 	call	0x138a	; 0x138a <TMR2_start>
		
			while (u32_g_tick < u32_g_delay && (u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE )
     2ae:	38 c0       	rjmp	.+112    	; 0x320 <APP_start+0xca>
			{
				/** MOVE WITH 50% SPEED FOR 5 MIN **/
				MOTOR_turnon(MOTOR1_ID);
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
				LCD_goto(LCD_POS_0, LCD_POS_10) ;
     2c8:	6a e0       	ldi	r22, 0x0A	; 10
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
				LCD_writestr("50%");
     2d0:	8e e9       	ldi	r24, 0x9E	; 158
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_writestr>
				TMR0_delaymicros(SPEED_50_ON_TIME);
     2d8:	60 ef       	ldi	r22, 0xF0	; 240
     2da:	73 e2       	ldi	r23, 0x23	; 35
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 3e 09 	call	0x127c	; 0x127c <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     2f6:	83 e0       	ldi	r24, 0x03	; 3
     2f8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
				LCD_goto(LCD_POS_0, LCD_POS_5) ;
     2fc:	65 e0       	ldi	r22, 0x05	; 5
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
				LCD_writeint(u8_g_distance);
     304:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_writeint>
				LCD_goto(LCD_POS_1, LCD_POS_5) ;
     312:	65 e0       	ldi	r22, 0x05	; 5
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
				LCD_writechar('F');
     31a:	86 e4       	ldi	r24, 0x46	; 70
     31c:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_writechar>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
			
			TMR2_start() ; /** START TIMER 2 **/
		
			while (u32_g_tick < u32_g_delay && (u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE )
     320:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     324:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     328:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     32c:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     330:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     334:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     338:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     33c:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     340:	48 17       	cp	r20, r24
     342:	59 07       	cpc	r21, r25
     344:	6a 07       	cpc	r22, r26
     346:	7b 07       	cpc	r23, r27
     348:	40 f4       	brcc	.+16     	; 0x35a <APP_start+0x104>
     34a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     34e:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     352:	80 3b       	cpi	r24, 0xB0	; 176
     354:	90 48       	sbci	r25, 0x80	; 128
     356:	08 f0       	brcs	.+2      	; 0x35a <APP_start+0x104>
     358:	ab cf       	rjmp	.-170    	; 0x2b0 <APP_start+0x5a>
				LCD_writeint(u8_g_distance);
				LCD_goto(LCD_POS_1, LCD_POS_5) ;
				LCD_writechar('F');
			}
					
			TMR2_stop() ; /** STOP TIMER2 AFTER THE 5 SECONDS **/
     35a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TMR2_stop>
					
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     370:	83 e0       	ldi	r24, 0x03	; 3
     372:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
			LCD_goto(LCD_POS_0, LCD_POS_10) ;
     376:	6a e0       	ldi	r22, 0x0A	; 10
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
			LCD_writestr("30%");
     37e:	82 ea       	ldi	r24, 0xA2	; 162
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_writestr>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     386:	64 e6       	ldi	r22, 0x64	; 100
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 3e 09 	call	0x127c	; 0x127c <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
			LCD_goto(LCD_POS_0, LCD_POS_5) ;
     3aa:	65 e0       	ldi	r22, 0x05	; 5
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
			LCD_writeint(u8_g_distance);
     3b2:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_writeint>
			LCD_goto(LCD_POS_1, LCD_POS_5) ;
     3c0:	65 e0       	ldi	r22, 0x05	; 5
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
			LCD_writechar('F');
     3c8:	86 e4       	ldi	r24, 0x46	; 70
     3ca:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_writechar>
			US_sendtrigger(); /** SEND TRIGGER **/
     3ce:	0e 94 3d 07 	call	0xe7a	; 0xe7a <US_sendtrigger>
	
	US_sendtrigger(); /** SEND TRIGGER **/
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     3d2:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <u16_g_time>
     3d6:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     3da:	20 3b       	cpi	r18, 0xB0	; 176
     3dc:	80 e8       	ldi	r24, 0x80	; 128
     3de:	38 07       	cpc	r19, r24
     3e0:	08 f0       	brcs	.+2      	; 0x3e4 <APP_start+0x18e>
     3e2:	58 cf       	rjmp	.-336    	; 0x294 <APP_start+0x3e>
     3e4:	3a c0       	rjmp	.+116    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
	{
		/** CONTINUE WITH 30% **/
		MOTOR_turnon(MOTOR1_ID);
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
		LCD_goto(LCD_POS_0, LCD_POS_10) ;
     3fe:	6a e0       	ldi	r22, 0x0A	; 10
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
		LCD_writestr("30%");
     406:	82 ea       	ldi	r24, 0xA2	; 162
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_writestr>
		TMR0_delaymicros(SPEED_30_ON_TIME);
     40e:	64 e6       	ldi	r22, 0x64	; 100
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 3e 09 	call	0x127c	; 0x127c <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
		
		LCD_goto(LCD_POS_0, LCD_POS_5) ;
     432:	65 e0       	ldi	r22, 0x05	; 5
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
		LCD_writeint(u8_g_distance);
     43a:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_writeint>
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
     448:	65 e0       	ldi	r22, 0x05	; 5
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
		LCD_writechar('F');
     450:	86 e4       	ldi	r24, 0x46	; 70
     452:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_writechar>
		US_sendtrigger(); /** SEND TRIGGER **/
     456:	0e 94 3d 07 	call	0xe7a	; 0xe7a <US_sendtrigger>
			LCD_goto(LCD_POS_1, LCD_POS_5) ;
			LCD_writechar('F');
			US_sendtrigger(); /** SEND TRIGGER **/
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
     45a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     45e:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     462:	80 36       	cpi	r24, 0x60	; 96
     464:	96 43       	sbci	r25, 0x36	; 54
     466:	08 f0       	brcs	.+2      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     468:	be cf       	rjmp	.-132    	; 0x3e6 <APP_start+0x190>
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
		LCD_writechar('F');
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	
	u32_g_tick = 0 ;
     46a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
     46e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     472:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     476:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     47a:	84 ef       	ldi	r24, 0xF4	; 244
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <TMR2_getovs>
     482:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     486:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     48a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     48e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     492:	48 c0       	rjmp	.+144    	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
	{
		/** STOP THEN ROTATE **/
		MOTOR_turnoff(MOTOR1_ID);
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
		
		LCD_goto(LCD_POS_0, LCD_POS_10) ;
     4ac:	6a e0       	ldi	r22, 0x0A	; 10
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
		LCD_writestr("30%");
     4b4:	82 ea       	ldi	r24, 0xA2	; 162
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_writestr>
		
		LCD_goto(LCD_POS_0, LCD_POS_5) ;
     4bc:	65 e0       	ldi	r22, 0x05	; 5
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
		LCD_writeint(u8_g_distance);
     4c4:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_writeint>
		
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
     4d2:	65 e0       	ldi	r22, 0x05	; 5
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
		LCD_writechar('R');
     4da:	82 e5       	ldi	r24, 0x52	; 82
     4dc:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_writechar>
		
		TMR2_start() ; /** START TIMER 2 **/
     4e0:	0e 94 c5 09 	call	0x138a	; 0x138a <TMR2_start>
		while (u32_g_tick < u32_g_delay)
     4e4:	06 c0       	rjmp	.+12     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
     4e6:	82 e0       	ldi	r24, 0x02	; 2
     4e8:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     4ec:	83 e0       	ldi	r24, 0x03	; 3
     4ee:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
		
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
		LCD_writechar('R');
		
		TMR2_start() ; /** START TIMER 2 **/
		while (u32_g_tick < u32_g_delay)
     4f2:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     4f6:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     4fa:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     4fe:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     502:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     506:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     50a:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     50e:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     512:	48 17       	cp	r20, r24
     514:	59 07       	cpc	r21, r25
     516:	6a 07       	cpc	r22, r26
     518:	7b 07       	cpc	r23, r27
     51a:	28 f3       	brcs	.-54     	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop(); /** STOP TIMER 2 **/
     51c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <TMR2_stop>
			
		US_sendtrigger(); /** SEND TRIGGER **/
     520:	0e 94 3d 07 	call	0xe7a	; 0xe7a <US_sendtrigger>
	}
	
	u32_g_tick = 0 ;
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     524:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     528:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     52c:	80 54       	subi	r24, 0x40	; 64
     52e:	94 42       	sbci	r25, 0x24	; 36
     530:	80 32       	cpi	r24, 0x20	; 32
     532:	92 41       	sbci	r25, 0x12	; 18
     534:	08 f4       	brcc	.+2      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
     536:	ae cf       	rjmp	.-164    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     538:	5b c0       	rjmp	.+182    	; 0x5f0 <__EEPROM_REGION_LENGTH__+0x1f0>
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
	{
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	0e 94 b1 06 	call	0xd62	; 0xd62 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR2_ID);
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	0e 94 b1 06 	call	0xd62	; 0xd62 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR3_ID);
     546:	82 e0       	ldi	r24, 0x02	; 2
     548:	0e 94 b1 06 	call	0xd62	; 0xd62 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR4_ID);
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	0e 94 b1 06 	call	0xd62	; 0xd62 <MOTOR_rotateanticlkdir>
		
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     552:	3a c0       	rjmp	.+116    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
		   {
			  /** GO BACKWARDS WITH 30% SPEED **/
			  MOTOR_turnon(MOTOR1_ID);
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
			  MOTOR_turnon(MOTOR2_ID);
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
		      MOTOR_turnon(MOTOR3_ID);
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
			  MOTOR_turnon(MOTOR4_ID);
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	0e 94 11 07 	call	0xe22	; 0xe22 <MOTOR_turnon>
			  LCD_goto(LCD_POS_0, LCD_POS_10) ;
     56c:	6a e0       	ldi	r22, 0x0A	; 10
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
			  LCD_writestr("30%");
     574:	82 ea       	ldi	r24, 0xA2	; 162
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 73 05 	call	0xae6	; 0xae6 <LCD_writestr>
			  TMR0_delaymicros(SPEED_30_ON_TIME);
     57c:	64 e6       	ldi	r22, 0x64	; 100
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 3e 09 	call	0x127c	; 0x127c <TMR0_delaymicros>
			
			  MOTOR_turnoff(MOTOR1_ID);
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR2_ID);
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR3_ID);
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR4_ID);
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <MOTOR_turnoff>
			   LCD_goto(LCD_POS_0, LCD_POS_5) ;
     5a0:	65 e0       	ldi	r22, 0x05	; 5
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
			  LCD_writeint(u8_g_distance);
     5a8:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <LCD_writeint>
			  LCD_goto(LCD_POS_1, LCD_POS_5) ;
     5b6:	65 e0       	ldi	r22, 0x05	; 5
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0e 94 86 05 	call	0xb0c	; 0xb0c <LCD_goto>
			  LCD_writechar('B');
     5be:	82 e4       	ldi	r24, 0x42	; 66
     5c0:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_writechar>
			  US_sendtrigger(); /** SEND TRIGGER **/
     5c4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <US_sendtrigger>
		MOTOR_rotateanticlkdir(MOTOR2_ID);
		MOTOR_rotateanticlkdir(MOTOR3_ID);
		MOTOR_rotateanticlkdir(MOTOR4_ID);
		
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     5c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     5cc:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     5d0:	80 31       	cpi	r24, 0x10	; 16
     5d2:	96 42       	sbci	r25, 0x26	; 38
     5d4:	08 f4       	brcc	.+2      	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
     5d6:	be cf       	rjmp	.-132    	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
			  LCD_goto(LCD_POS_1, LCD_POS_5) ;
			  LCD_writechar('B');
			  US_sendtrigger(); /** SEND TRIGGER **/
		   }
		
			MOTOR_rotateclkdir(MOTOR1_ID); /** RETURN TO DEFAULT DIRECTION  **/
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR2_ID);
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR3_ID);
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR4_ID);
     5ea:	83 e0       	ldi	r24, 0x03	; 3
     5ec:	0e 94 77 06 	call	0xcee	; 0xcee <MOTOR_rotateclkdir>
		TMR2_stop(); /** STOP TIMER 2 **/
			
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
     5f0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     5f4:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     5f8:	80 34       	cpi	r24, 0x40	; 64
     5fa:	94 42       	sbci	r25, 0x24	; 36
     5fc:	08 f4       	brcc	.+2      	; 0x600 <__EEPROM_REGION_LENGTH__+0x200>
     5fe:	9d cf       	rjmp	.-198    	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
			MOTOR_rotateclkdir(MOTOR1_ID); /** RETURN TO DEFAULT DIRECTION  **/
			MOTOR_rotateclkdir(MOTOR2_ID);
			MOTOR_rotateclkdir(MOTOR3_ID);
			MOTOR_rotateclkdir(MOTOR4_ID);
	}
}
     600:	08 95       	ret

00000602 <__vector_1>:



/** EXTI0 **/
ISR(INT0_vect)
{
     602:	1f 92       	push	r1
     604:	0f 92       	push	r0
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	0f 92       	push	r0
     60a:	11 24       	eor	r1, r1
     60c:	2f 93       	push	r18
     60e:	3f 93       	push	r19
     610:	4f 93       	push	r20
     612:	5f 93       	push	r21
     614:	6f 93       	push	r22
     616:	7f 93       	push	r23
     618:	8f 93       	push	r24
     61a:	9f 93       	push	r25
     61c:	af 93       	push	r26
     61e:	bf 93       	push	r27
     620:	ef 93       	push	r30
     622:	ff 93       	push	r31
	u8_echoedge++ ; /** INCREASE THE ECHO BY 1 **/
     624:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <u8_echoedge>
     628:	8f 5f       	subi	r24, 0xFF	; 255
     62a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <u8_echoedge>
	
	if(u8_echoedge == FIRST_EDGE ) /** FIRST CHANGE (RISING EDGE) **/
     62e:	81 30       	cpi	r24, 0x01	; 1
     630:	19 f4       	brne	.+6      	; 0x638 <__vector_1+0x36>
	{
		ICU_start(); /** START ICU / COUNTING **/
     632:	0e 94 b8 03 	call	0x770	; 0x770 <ICU_start>
     636:	1f c0       	rjmp	.+62     	; 0x676 <__vector_1+0x74>
	}
	
	else if(u8_echoedge == SECOND_EDGE) /** SECOND CHANGE (FALLING EDGE) **/
     638:	82 30       	cpi	r24, 0x02	; 2
     63a:	e9 f4       	brne	.+58     	; 0x676 <__vector_1+0x74>
	{
		ICU_stop(); /** STOP ICU / COUNTING **/
     63c:	0e 94 be 03 	call	0x77c	; 0x77c <ICU_stop>
		
		u16_g_time = ICU_getvalue(); /** GET PULSE LENGTH **/
     640:	0e 94 a6 03 	call	0x74c	; 0x74c <ICU_getvalue>
     644:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <u16_g_time+0x1>
     648:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <u16_g_time>
		
		ICU_setcounterval(INITIATE_COUNTER_VAL); /** START COUNTING FROM ZERO **/
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 bb 03 	call	0x776	; 0x776 <ICU_setcounterval>
				
		u8_echoedge = 0 ;     /** REINITIALIZE ECHO EDGE TO 0 TO REPEAT IN ANY CHANGE AGAIN **/
     654:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <u8_echoedge>
		
		u8_g_distance = (u16_g_time / US_DIVIDER) ; /** CALCULATE THE DISTANCE **/
     658:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <u16_g_time>
     65c:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     660:	af e9       	ldi	r26, 0x9F	; 159
     662:	b6 e4       	ldi	r27, 0x46	; 70
     664:	0e 94 37 0b 	call	0x166e	; 0x166e <__umulhisi3>
     668:	88 0f       	add	r24, r24
     66a:	89 2f       	mov	r24, r25
     66c:	88 1f       	adc	r24, r24
     66e:	99 0b       	sbc	r25, r25
     670:	91 95       	neg	r25
     672:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <u8_g_distance>
	}
}
     676:	ff 91       	pop	r31
     678:	ef 91       	pop	r30
     67a:	bf 91       	pop	r27
     67c:	af 91       	pop	r26
     67e:	9f 91       	pop	r25
     680:	8f 91       	pop	r24
     682:	7f 91       	pop	r23
     684:	6f 91       	pop	r22
     686:	5f 91       	pop	r21
     688:	4f 91       	pop	r20
     68a:	3f 91       	pop	r19
     68c:	2f 91       	pop	r18
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <__vector_9>:


/** TIMER 1 OVERFLOW **/ 
ISR(TIMER1_OVF_vect)
{
     698:	1f 92       	push	r1
     69a:	0f 92       	push	r0
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	0f 92       	push	r0
     6a0:	11 24       	eor	r1, r1
	/** DO NOTHING **/ 
}
     6a2:	0f 90       	pop	r0
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	0f 90       	pop	r0
     6a8:	1f 90       	pop	r1
     6aa:	18 95       	reti

000006ac <__vector_5>:

/** TIMER 0 OVERFLOW  **/
ISR(TIMER2_OVF_vect)
{
     6ac:	1f 92       	push	r1
     6ae:	0f 92       	push	r0
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	0f 92       	push	r0
     6b4:	11 24       	eor	r1, r1
     6b6:	8f 93       	push	r24
     6b8:	9f 93       	push	r25
     6ba:	af 93       	push	r26
     6bc:	bf 93       	push	r27
	u32_g_tick++ ; /** INCREASE TICKS **/  
     6be:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     6c2:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__data_end+0x1>
     6c6:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <__data_end+0x2>
     6ca:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <__data_end+0x3>
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	a1 1d       	adc	r26, r1
     6d2:	b1 1d       	adc	r27, r1
     6d4:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
     6d8:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__data_end+0x1>
     6dc:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <__data_end+0x2>
     6e0:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <__data_end+0x3>
}
     6e4:	bf 91       	pop	r27
     6e6:	af 91       	pop	r26
     6e8:	9f 91       	pop	r25
     6ea:	8f 91       	pop	r24
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(void)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(BUTTON1_PORT , BUTTON1_PIN , DIO_PIN_INPUT);
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	63 e0       	ldi	r22, 0x03	; 3
     6fa:	83 e0       	ldi	r24, 0x03	; 3
     6fc:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
     700:	08 95       	ret

00000702 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
en_a_button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	1f 92       	push	r1
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	8a 01       	movw	r16, r20
	en_a_button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
     712:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
     714:	ae 01       	movw	r20, r28
     716:	4f 5f       	subi	r20, 0xFF	; 255
     718:	5f 4f       	sbci	r21, 0xFF	; 255
     71a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <DIO_readpin>
	
	if (!pin_status) 
     71e:	81 11       	cpse	r24, r1
     720:	05 c0       	rjmp	.+10     	; 0x72c <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	f8 01       	movw	r30, r16
     726:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	04 c0       	rjmp	.+8      	; 0x734 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	f8 01       	movw	r30, r16
     730:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     732:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
     734:	0f 90       	pop	r0
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <ICU_init>:
/**************************************************************/
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	TMR1_init(); /** INITIALIZE TIMER 1 MODULE **/
     740:	0e 94 72 09 	call	0x12e4	; 0x12e4 <TMR1_init>
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
     744:	0e 94 cf 08 	call	0x119e	; 0x119e <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	08 95       	ret

0000074c <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	00 d0       	rcall	.+0      	; 0x752 <ICU_getvalue+0x6>
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
     756:	1a 82       	std	Y+2, r1	; 0x02
     758:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
     75a:	ce 01       	movw	r24, r28
     75c:	01 96       	adiw	r24, 0x01	; 1
     75e:	0e 94 a5 09 	call	0x134a	; 0x134a <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <ICU_start>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_start(void)
{
	TMR1_start(); /** START TIMER1 COUNTING **/
     770:	0e 94 8d 09 	call	0x131a	; 0x131a <TMR1_start>
     774:	08 95       	ret

00000776 <ICU_setcounterval>:
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_setcounterval(uint16t u16_a_counterval)
{
	TMR1_setcounterval(u16_a_counterval);
     776:	0e 94 ab 09 	call	0x1356	; 0x1356 <TMR1_setcounterval>
     77a:	08 95       	ret

0000077c <ICU_stop>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_stop(void)
{
	TMR1_stop();  /** STOP TIMER1 COUNTING **/
     77c:	0e 94 9a 09 	call	0x1334	; 0x1334 <TMR1_stop>
     780:	08 95       	ret

00000782 <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
     782:	41 e0       	ldi	r20, 0x01	; 1
     784:	65 e0       	ldi	r22, 0x05	; 5
     786:	83 e0       	ldi	r24, 0x03	; 3
     788:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
     78c:	41 e0       	ldi	r20, 0x01	; 1
     78e:	66 e0       	ldi	r22, 0x06	; 6
     790:	83 e0       	ldi	r24, 0x03	; 3
     792:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
     796:	41 e0       	ldi	r20, 0x01	; 1
     798:	67 e0       	ldi	r22, 0x07	; 7
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>

	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
     7a0:	40 e0       	ldi	r20, 0x00	; 0
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	83 e0       	ldi	r24, 0x03	; 3
     7a6:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	61 e0       	ldi	r22, 0x01	; 1
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	64 e0       	ldi	r22, 0x04	; 4
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
	DIO_setpinvalue(ROW_PORT_DATA , R3 ,  DIO_PIN_LOW);


    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
     7be:	41 e0       	ldi	r20, 0x01	; 1
     7c0:	65 e0       	ldi	r22, 0x05	; 5
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	66 e0       	ldi	r22, 0x06	; 6
     7cc:	83 e0       	ldi	r24, 0x03	; 3
     7ce:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
     7d2:	41 e0       	ldi	r20, 0x01	; 1
     7d4:	67 e0       	ldi	r22, 0x07	; 7
     7d6:	83 e0       	ldi	r24, 0x03	; 3
     7d8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	83 e0       	ldi	r24, 0x03	; 3
     7e2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
     7e6:	41 e0       	ldi	r20, 0x01	; 1
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	83 e0       	ldi	r24, 0x03	; 3
     7ec:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
     7f0:	41 e0       	ldi	r20, 0x01	; 1
     7f2:	64 e0       	ldi	r22, 0x04	; 4
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	08 95       	ret

000007fe <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	00 d0       	rcall	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 d0       	rcall	.+0      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     80e:	00 d0       	rcall	.+0      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
     816:	85 e0       	ldi	r24, 0x05	; 5
     818:	89 83       	std	Y+1, r24	; 0x01
     81a:	86 e0       	ldi	r24, 0x06	; 6
     81c:	8a 83       	std	Y+2, r24	; 0x02
     81e:	87 e0       	ldi	r24, 0x07	; 7
     820:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
     822:	1c 82       	std	Y+4, r1	; 0x04
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	8d 83       	std	Y+5, r24	; 0x05
     828:	84 e0       	ldi	r24, 0x04	; 4
     82a:	8e 83       	std	Y+6, r24	; 0x06

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     82c:	00 e0       	ldi	r16, 0x00	; 0
     82e:	79 c0       	rjmp	.+242    	; 0x922 <__stack+0xc3>
    {
		if (u8_a_rowiterator == 3 )
     830:	03 30       	cpi	r16, 0x03	; 3
     832:	39 f4       	brne	.+14     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	62 c0       	rjmp	.+196    	; 0x906 <__stack+0xa7>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
		}
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
     842:	e1 e0       	ldi	r30, 0x01	; 1
     844:	f0 e0       	ldi	r31, 0x00	; 0
     846:	ec 0f       	add	r30, r28
     848:	fd 1f       	adc	r31, r29
     84a:	e0 0f       	add	r30, r16
     84c:	f1 1d       	adc	r31, r1
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	60 81       	ld	r22, Z
     852:	83 e0       	ldi	r24, 0x03	; 3
     854:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     858:	f2 cf       	rjmp	.-28     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
     85a:	e4 e0       	ldi	r30, 0x04	; 4
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	ec 0f       	add	r30, r28
     860:	fd 1f       	adc	r31, r29
     862:	e1 0f       	add	r30, r17
     864:	f1 1d       	adc	r31, r1
     866:	a7 01       	movw	r20, r14
     868:	60 81       	ld	r22, Z
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
     870:	f7 01       	movw	r30, r14
     872:	80 81       	ld	r24, Z
     874:	81 11       	cpse	r24, r1
     876:	46 c0       	rjmp	.+140    	; 0x904 <__stack+0xa5>
            {
                if (u8_a_rowiterator == 0)
     878:	01 11       	cpse	r16, r1
     87a:	11 c0       	rjmp	.+34     	; 0x89e <__stack+0x3f>
                {
                    if (u8_a_coulumniterator == 0)
     87c:	11 11       	cpse	r17, r1
     87e:	03 c0       	rjmp	.+6      	; 0x886 <__stack+0x27>
                    {
                        *u8_a_value = '1' ;
     880:	81 e3       	ldi	r24, 0x31	; 49
     882:	80 83       	st	Z, r24
     884:	33 c0       	rjmp	.+102    	; 0x8ec <__stack+0x8d>
                    }
                    else if (u8_a_coulumniterator == 1)
     886:	11 30       	cpi	r17, 0x01	; 1
     888:	21 f4       	brne	.+8      	; 0x892 <__stack+0x33>
                    {
                        *u8_a_value = '2' ;
     88a:	82 e3       	ldi	r24, 0x32	; 50
     88c:	f7 01       	movw	r30, r14
     88e:	80 83       	st	Z, r24
     890:	2d c0       	rjmp	.+90     	; 0x8ec <__stack+0x8d>
                    }
                    else if (u8_a_coulumniterator == 2)
     892:	12 30       	cpi	r17, 0x02	; 2
     894:	59 f5       	brne	.+86     	; 0x8ec <__stack+0x8d>
                    {
                        *u8_a_value = '3' ;
     896:	83 e3       	ldi	r24, 0x33	; 51
     898:	f7 01       	movw	r30, r14
     89a:	80 83       	st	Z, r24
     89c:	27 c0       	rjmp	.+78     	; 0x8ec <__stack+0x8d>
                    }
                }

                else if (u8_a_rowiterator == 1)
     89e:	01 30       	cpi	r16, 0x01	; 1
     8a0:	91 f4       	brne	.+36     	; 0x8c6 <__stack+0x67>
                {
                    if (u8_a_coulumniterator == 0)
     8a2:	11 11       	cpse	r17, r1
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <__stack+0x4f>
                    {
                        *u8_a_value = '4' ;
     8a6:	84 e3       	ldi	r24, 0x34	; 52
     8a8:	f7 01       	movw	r30, r14
     8aa:	80 83       	st	Z, r24
     8ac:	1f c0       	rjmp	.+62     	; 0x8ec <__stack+0x8d>
                    }
                    else if (u8_a_coulumniterator == 1)
     8ae:	11 30       	cpi	r17, 0x01	; 1
     8b0:	21 f4       	brne	.+8      	; 0x8ba <__stack+0x5b>
                    {
                        *u8_a_value = '5' ;
     8b2:	85 e3       	ldi	r24, 0x35	; 53
     8b4:	f7 01       	movw	r30, r14
     8b6:	80 83       	st	Z, r24
     8b8:	19 c0       	rjmp	.+50     	; 0x8ec <__stack+0x8d>
                    }
                    else if (u8_a_coulumniterator == 2)
     8ba:	12 30       	cpi	r17, 0x02	; 2
     8bc:	b9 f4       	brne	.+46     	; 0x8ec <__stack+0x8d>
                    {
                        *u8_a_value = '6' ;
     8be:	86 e3       	ldi	r24, 0x36	; 54
     8c0:	f7 01       	movw	r30, r14
     8c2:	80 83       	st	Z, r24
     8c4:	13 c0       	rjmp	.+38     	; 0x8ec <__stack+0x8d>
                    }
                }

                else if (u8_a_rowiterator == 2)
     8c6:	02 30       	cpi	r16, 0x02	; 2
     8c8:	89 f4       	brne	.+34     	; 0x8ec <__stack+0x8d>
                {
                    if (u8_a_coulumniterator == 0)
     8ca:	11 11       	cpse	r17, r1
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
                    {
                        *u8_a_value = '7' ;
     8ce:	87 e3       	ldi	r24, 0x37	; 55
     8d0:	f7 01       	movw	r30, r14
     8d2:	80 83       	st	Z, r24
     8d4:	0b c0       	rjmp	.+22     	; 0x8ec <__stack+0x8d>
                    }
                    else if (u8_a_coulumniterator == 1)
     8d6:	11 30       	cpi	r17, 0x01	; 1
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__stack+0x83>
                    {
                        *u8_a_value = '8' ;
     8da:	88 e3       	ldi	r24, 0x38	; 56
     8dc:	f7 01       	movw	r30, r14
     8de:	80 83       	st	Z, r24
     8e0:	05 c0       	rjmp	.+10     	; 0x8ec <__stack+0x8d>
                    }
                    else if (u8_a_coulumniterator == 2)
     8e2:	12 30       	cpi	r17, 0x02	; 2
     8e4:	19 f4       	brne	.+6      	; 0x8ec <__stack+0x8d>
                    {
                        *u8_a_value = '9' ;
     8e6:	89 e3       	ldi	r24, 0x39	; 57
     8e8:	f7 01       	movw	r30, r14
     8ea:	80 83       	st	Z, r24
                    }
                }
				
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     8ec:	e1 e0       	ldi	r30, 0x01	; 1
     8ee:	f0 e0       	ldi	r31, 0x00	; 0
     8f0:	ec 0f       	add	r30, r28
     8f2:	fd 1f       	adc	r31, r29
     8f4:	e0 0f       	add	r30, r16
     8f6:	f1 1d       	adc	r31, r1
     8f8:	60 81       	ld	r22, Z
     8fa:	83 e0       	ldi	r24, 0x03	; 3
     8fc:	0e 94 91 08 	call	0x1122	; 0x1122 <DIO_togglepin>
				return KEYPAD_readSuccess;
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	13 c0       	rjmp	.+38     	; 0x92a <__stack+0xcb>
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     904:	1f 5f       	subi	r17, 0xFF	; 255
     906:	13 30       	cpi	r17, 0x03	; 3
     908:	08 f4       	brcc	.+2      	; 0x90c <__stack+0xad>
     90a:	a7 cf       	rjmp	.-178    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
				return KEYPAD_readSuccess;
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     90c:	e1 e0       	ldi	r30, 0x01	; 1
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ec 0f       	add	r30, r28
     912:	fd 1f       	adc	r31, r29
     914:	e0 0f       	add	r30, r16
     916:	f1 1d       	adc	r31, r1
     918:	60 81       	ld	r22, Z
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	0e 94 91 08 	call	0x1122	; 0x1122 <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     920:	0f 5f       	subi	r16, 0xFF	; 255
     922:	03 30       	cpi	r16, 0x03	; 3
     924:	08 f4       	brcc	.+2      	; 0x928 <__stack+0xc9>
     926:	84 cf       	rjmp	.-248    	; 0x830 <__DATA_REGION_LENGTH__+0x30>
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
    }
    return KEYPAD_readFail;
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	26 96       	adiw	r28, 0x06	; 6
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	de bf       	out	0x3e, r29	; 62
     932:	0f be       	out	0x3f, r0	; 63
     934:	cd bf       	out	0x3d, r28	; 61
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     944:	cf 93       	push	r28
     946:	c8 2f       	mov	r28, r24
     948:	0e 94 db 08 	call	0x11b6	; 0x11b6 <TMR0_init>
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	62 e0       	ldi	r22, 0x02	; 2
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	63 e0       	ldi	r22, 0x03	; 3
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     96a:	8b b3       	in	r24, 0x1b	; 27
     96c:	9c 2f       	mov	r25, r28
     96e:	90 7f       	andi	r25, 0xF0	; 240
     970:	8f 70       	andi	r24, 0x0F	; 15
     972:	89 2b       	or	r24, r25
     974:	8b bb       	out	0x1b, r24	; 27
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	63 e0       	ldi	r22, 0x03	; 3
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     980:	61 e0       	ldi	r22, 0x01	; 1
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	63 e0       	ldi	r22, 0x03	; 3
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     996:	20 e1       	ldi	r18, 0x10	; 16
     998:	c2 9f       	mul	r28, r18
     99a:	c0 01       	movw	r24, r0
     99c:	11 24       	eor	r1, r1
     99e:	9b b3       	in	r25, 0x1b	; 27
     9a0:	9f 70       	andi	r25, 0x0F	; 15
     9a2:	89 2b       	or	r24, r25
     9a4:	8b bb       	out	0x1b, r24	; 27
     9a6:	41 e0       	ldi	r20, 0x01	; 1
     9a8:	63 e0       	ldi	r22, 0x03	; 3
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	63 e0       	ldi	r22, 0x03	; 3
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     9c6:	65 e0       	ldi	r22, 0x05	; 5
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>
     9d2:	cf 91       	pop	r28
     9d4:	08 95       	ret

000009d6 <LCD_init>:
     9d6:	0e 94 db 08 	call	0x11b6	; 0x11b6 <TMR0_init>
     9da:	41 e0       	ldi	r20, 0x01	; 1
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
     9e4:	41 e0       	ldi	r20, 0x01	; 1
     9e6:	62 e0       	ldi	r22, 0x02	; 2
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
     9ee:	41 e0       	ldi	r20, 0x01	; 1
     9f0:	63 e0       	ldi	r22, 0x03	; 3
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	64 e0       	ldi	r22, 0x04	; 4
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
     a02:	41 e0       	ldi	r20, 0x01	; 1
     a04:	65 e0       	ldi	r22, 0x05	; 5
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	66 e0       	ldi	r22, 0x06	; 6
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
     a16:	41 e0       	ldi	r20, 0x01	; 1
     a18:	67 e0       	ldi	r22, 0x07	; 7
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
     a20:	64 e1       	ldi	r22, 0x14	; 20
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>
     a2c:	83 e3       	ldi	r24, 0x33	; 51
     a2e:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_sendcmd>
     a32:	82 e3       	ldi	r24, 0x32	; 50
     a34:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_sendcmd>
     a38:	88 e2       	ldi	r24, 0x28	; 40
     a3a:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_sendcmd>
     a3e:	8c e0       	ldi	r24, 0x0C	; 12
     a40:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_sendcmd>
     a44:	86 e0       	ldi	r24, 0x06	; 6
     a46:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_sendcmd>
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_sendcmd>
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_sendcmd>
     a56:	08 95       	ret

00000a58 <LCD_writechar>:
     a58:	cf 93       	push	r28
     a5a:	c8 2f       	mov	r28, r24
     a5c:	41 e0       	ldi	r20, 0x01	; 1
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	62 e0       	ldi	r22, 0x02	; 2
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	63 e0       	ldi	r22, 0x03	; 3
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     a7a:	8b b3       	in	r24, 0x1b	; 27
     a7c:	9c 2f       	mov	r25, r28
     a7e:	90 7f       	andi	r25, 0xF0	; 240
     a80:	8f 70       	andi	r24, 0x0F	; 15
     a82:	89 2b       	or	r24, r25
     a84:	8b bb       	out	0x1b, r24	; 27
     a86:	41 e0       	ldi	r20, 0x01	; 1
     a88:	63 e0       	ldi	r22, 0x03	; 3
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     a90:	61 e0       	ldi	r22, 0x01	; 1
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	63 e0       	ldi	r22, 0x03	; 3
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     aa6:	20 e1       	ldi	r18, 0x10	; 16
     aa8:	c2 9f       	mul	r28, r18
     aaa:	c0 01       	movw	r24, r0
     aac:	11 24       	eor	r1, r1
     aae:	9b b3       	in	r25, 0x1b	; 27
     ab0:	9f 70       	andi	r25, 0x0F	; 15
     ab2:	89 2b       	or	r24, r25
     ab4:	8b bb       	out	0x1b, r24	; 27
     ab6:	41 e0       	ldi	r20, 0x01	; 1
     ab8:	63 e0       	ldi	r22, 0x03	; 3
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     ac0:	61 e0       	ldi	r22, 0x01	; 1
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>
     acc:	40 e0       	ldi	r20, 0x00	; 0
     ace:	63 e0       	ldi	r22, 0x03	; 3
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
     ad6:	65 e0       	ldi	r22, 0x05	; 5
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 02 09 	call	0x1204	; 0x1204 <TMR0_delayms>
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <LCD_writestr>:
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	8c 01       	movw	r16, r24
     aee:	c0 e0       	ldi	r28, 0x00	; 0
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <LCD_writestr+0x12>
     af2:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_writechar>
     af6:	cf 5f       	subi	r28, 0xFF	; 255
     af8:	f8 01       	movw	r30, r16
     afa:	ec 0f       	add	r30, r28
     afc:	f1 1d       	adc	r31, r1
     afe:	80 81       	ld	r24, Z
     b00:	81 11       	cpse	r24, r1
     b02:	f7 cf       	rjmp	.-18     	; 0xaf2 <LCD_writestr+0xc>
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	08 95       	ret

00000b0c <LCD_goto>:
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	00 d0       	rcall	.+0      	; 0xb12 <LCD_goto+0x6>
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	90 e8       	ldi	r25, 0x80	; 128
     b18:	99 83       	std	Y+1, r25	; 0x01
     b1a:	90 ec       	ldi	r25, 0xC0	; 192
     b1c:	9a 83       	std	Y+2, r25	; 0x02
     b1e:	e1 e0       	ldi	r30, 0x01	; 1
     b20:	f0 e0       	ldi	r31, 0x00	; 0
     b22:	ec 0f       	add	r30, r28
     b24:	fd 1f       	adc	r31, r29
     b26:	e8 0f       	add	r30, r24
     b28:	f1 1d       	adc	r31, r1
     b2a:	80 81       	ld	r24, Z
     b2c:	86 0f       	add	r24, r22
     b2e:	0e 94 a2 04 	call	0x944	; 0x944 <LCD_sendcmd>
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	2a 97       	sbiw	r28, 0x0a	; 10
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     b52:	99 23       	and	r25, r25
     b54:	dc f5       	brge	.+118    	; 0xbcc <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
     b56:	90 95       	com	r25
     b58:	80 95       	com	r24
     b5a:	70 95       	com	r23
     b5c:	61 95       	neg	r22
     b5e:	7f 4f       	sbci	r23, 0xFF	; 255
     b60:	8f 4f       	sbci	r24, 0xFF	; 255
     b62:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     b64:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     b66:	13 c0       	rjmp	.+38     	; 0xb8e <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     b68:	2a e0       	ldi	r18, 0x0A	; 10
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	0e 94 18 0b 	call	0x1630	; 0x1630 <__divmodsi4>
     b74:	e1 e0       	ldi	r30, 0x01	; 1
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	ec 0f       	add	r30, r28
     b7a:	fd 1f       	adc	r31, r29
     b7c:	e1 0f       	add	r30, r17
     b7e:	f1 1d       	adc	r31, r1
     b80:	60 5d       	subi	r22, 0xD0	; 208
     b82:	60 83       	st	Z, r22
			s32_a_num /= 10;
     b84:	62 2f       	mov	r22, r18
     b86:	73 2f       	mov	r23, r19
     b88:	84 2f       	mov	r24, r20
     b8a:	95 2f       	mov	r25, r21
			i++;
     b8c:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     b8e:	16 16       	cp	r1, r22
     b90:	17 06       	cpc	r1, r23
     b92:	18 06       	cpc	r1, r24
     b94:	19 06       	cpc	r1, r25
     b96:	44 f3       	brlt	.-48     	; 0xb68 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     b98:	e1 e0       	ldi	r30, 0x01	; 1
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	ec 0f       	add	r30, r28
     b9e:	fd 1f       	adc	r31, r29
     ba0:	e1 0f       	add	r30, r17
     ba2:	f1 1d       	adc	r31, r1
     ba4:	8d e2       	ldi	r24, 0x2D	; 45
     ba6:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     ba8:	1f 5f       	subi	r17, 0xFF	; 255
     baa:	0d c0       	rjmp	.+26     	; 0xbc6 <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
     bac:	e1 2f       	mov	r30, r17
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	31 97       	sbiw	r30, 0x01	; 1
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	8c 0f       	add	r24, r28
     bb8:	9d 1f       	adc	r25, r29
     bba:	e8 0f       	add	r30, r24
     bbc:	f9 1f       	adc	r31, r25
     bbe:	80 81       	ld	r24, Z
     bc0:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     bc4:	11 50       	subi	r17, 0x01	; 1
     bc6:	11 11       	cpse	r17, r1
     bc8:	f1 cf       	rjmp	.-30     	; 0xbac <LCD_writeint+0x70>
     bca:	39 c0       	rjmp	.+114    	; 0xc3e <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     bcc:	61 15       	cp	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	81 05       	cpc	r24, r1
     bd2:	91 05       	cpc	r25, r1
     bd4:	21 f4       	brne	.+8      	; 0xbde <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
     bd6:	80 e3       	ldi	r24, 0x30	; 48
     bd8:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_writechar>
     bdc:	30 c0       	rjmp	.+96     	; 0xc3e <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     bde:	16 16       	cp	r1, r22
     be0:	17 06       	cpc	r1, r23
     be2:	18 06       	cpc	r1, r24
     be4:	19 06       	cpc	r1, r25
     be6:	ac f0       	brlt	.+42     	; 0xc12 <LCD_writeint+0xd6>
     be8:	2a c0       	rjmp	.+84     	; 0xc3e <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     bea:	2a e0       	ldi	r18, 0x0A	; 10
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	0e 94 18 0b 	call	0x1630	; 0x1630 <__divmodsi4>
     bf6:	e1 e0       	ldi	r30, 0x01	; 1
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	ec 0f       	add	r30, r28
     bfc:	fd 1f       	adc	r31, r29
     bfe:	e1 0f       	add	r30, r17
     c00:	f1 1d       	adc	r31, r1
     c02:	60 5d       	subi	r22, 0xD0	; 208
     c04:	60 83       	st	Z, r22
			s32_a_num /= 10;
     c06:	62 2f       	mov	r22, r18
     c08:	73 2f       	mov	r23, r19
     c0a:	84 2f       	mov	r24, r20
     c0c:	95 2f       	mov	r25, r21
			i++;
     c0e:	1f 5f       	subi	r17, 0xFF	; 255
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <LCD_writeint+0xd8>
     c12:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     c14:	16 16       	cp	r1, r22
     c16:	17 06       	cpc	r1, r23
     c18:	18 06       	cpc	r1, r24
     c1a:	19 06       	cpc	r1, r25
     c1c:	34 f3       	brlt	.-52     	; 0xbea <LCD_writeint+0xae>
     c1e:	0d c0       	rjmp	.+26     	; 0xc3a <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     c20:	e1 2f       	mov	r30, r17
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	31 97       	sbiw	r30, 0x01	; 1
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	8c 0f       	add	r24, r28
     c2c:	9d 1f       	adc	r25, r29
     c2e:	e8 0f       	add	r30, r24
     c30:	f9 1f       	adc	r31, r25
     c32:	80 81       	ld	r24, Z
     c34:	0e 94 2c 05 	call	0xa58	; 0xa58 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     c38:	11 50       	subi	r17, 0x01	; 1
     c3a:	11 11       	cpse	r17, r1
     c3c:	f1 cf       	rjmp	.-30     	; 0xc20 <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     c3e:	2a 96       	adiw	r28, 0x0a	; 10
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	08 95       	ret

00000c52 <MOTOR_init>:
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
	
	switch(u8_a_motorid)
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	b9 f0       	breq	.+46     	; 0xc84 <MOTOR_init+0x32>
     c56:	28 f0       	brcs	.+10     	; 0xc62 <MOTOR_init+0x10>
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	29 f1       	breq	.+74     	; 0xca6 <MOTOR_init+0x54>
     c5c:	83 30       	cpi	r24, 0x03	; 3
     c5e:	a1 f1       	breq	.+104    	; 0xcc8 <MOTOR_init+0x76>
     c60:	44 c0       	rjmp	.+136    	; 0xcea <MOTOR_init+0x98>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
     c62:	41 e0       	ldi	r20, 0x01	; 1
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	62 e0       	ldi	r22, 0x02	; 2
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     c80:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
		break;
     c82:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
     c84:	41 e0       	ldi	r20, 0x01	; 1
     c86:	63 e0       	ldi	r22, 0x03	; 3
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	64 e0       	ldi	r22, 0x04	; 4
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     c98:	41 e0       	ldi	r20, 0x01	; 1
     c9a:	65 e0       	ldi	r22, 0x05	; 5
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     ca2:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     ca4:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
     cb0:	41 e0       	ldi	r20, 0x01	; 1
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	62 e0       	ldi	r22, 0x02	; 2
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     cc4:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     cc6:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	63 e0       	ldi	r22, 0x03	; 3
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
     cd2:	41 e0       	ldi	r20, 0x01	; 1
     cd4:	64 e0       	ldi	r22, 0x04	; 4
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	65 e0       	ldi	r22, 0x05	; 5
     ce0:	82 e0       	ldi	r24, 0x02	; 2
     ce2:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     ce6:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     ce8:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_initstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     cea:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_initstatus ; /** RETURN THE FINAL STATUS **/
}
     cec:	08 95       	ret

00000cee <MOTOR_rotateclkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	91 f0       	breq	.+36     	; 0xd16 <MOTOR_rotateclkdir+0x28>
     cf2:	28 f0       	brcs	.+10     	; 0xcfe <MOTOR_rotateclkdir+0x10>
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	d9 f0       	breq	.+54     	; 0xd2e <MOTOR_rotateclkdir+0x40>
     cf8:	83 30       	cpi	r24, 0x03	; 3
     cfa:	29 f1       	breq	.+74     	; 0xd46 <MOTOR_rotateclkdir+0x58>
     cfc:	30 c0       	rjmp	.+96     	; 0xd5e <MOTOR_rotateclkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d12:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d14:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	63 e0       	ldi	r22, 0x03	; 3
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d20:	40 e0       	ldi	r20, 0x00	; 0
     d22:	64 e0       	ldi	r22, 0x04	; 4
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d2a:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d2c:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d2e:	41 e0       	ldi	r20, 0x01	; 1
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d42:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d44:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	63 e0       	ldi	r22, 0x03	; 3
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	64 e0       	ldi	r22, 0x04	; 4
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d5a:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d5c:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motordirectionstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d5e:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motordirectionstatus ; /** RETURN THE FINAL STATUS **/
}
     d60:	08 95       	ret

00000d62 <MOTOR_rotateanticlkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	91 f0       	breq	.+36     	; 0xd8a <MOTOR_rotateanticlkdir+0x28>
     d66:	28 f0       	brcs	.+10     	; 0xd72 <MOTOR_rotateanticlkdir+0x10>
     d68:	82 30       	cpi	r24, 0x02	; 2
     d6a:	d9 f0       	breq	.+54     	; 0xda2 <MOTOR_rotateanticlkdir+0x40>
     d6c:	83 30       	cpi	r24, 0x03	; 3
     d6e:	29 f1       	breq	.+74     	; 0xdba <MOTOR_rotateanticlkdir+0x58>
     d70:	30 c0       	rjmp	.+96     	; 0xdd2 <MOTOR_rotateanticlkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     d72:	40 e0       	ldi	r20, 0x00	; 0
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     d7c:	41 e0       	ldi	r20, 0x01	; 1
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d86:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     d88:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	63 e0       	ldi	r22, 0x03	; 3
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	64 e0       	ldi	r22, 0x04	; 4
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d9e:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     da0:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     dac:	41 e0       	ldi	r20, 0x01	; 1
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	82 e0       	ldi	r24, 0x02	; 2
     db2:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     db6:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     db8:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	63 e0       	ldi	r22, 0x03	; 3
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     dc4:	41 e0       	ldi	r20, 0x01	; 1
     dc6:	64 e0       	ldi	r22, 0x04	; 4
     dc8:	82 e0       	ldi	r24, 0x02	; 2
     dca:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dce:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     dd0:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motorrotatestatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     dd2:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
     dd4:	08 95       	ret

00000dd6 <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	69 f0       	breq	.+26     	; 0xdf4 <MOTOR_turnoff+0x1e>
     dda:	28 f0       	brcs	.+10     	; 0xde6 <MOTOR_turnoff+0x10>
     ddc:	82 30       	cpi	r24, 0x02	; 2
     dde:	89 f0       	breq	.+34     	; 0xe02 <MOTOR_turnoff+0x2c>
     de0:	83 30       	cpi	r24, 0x03	; 3
     de2:	b1 f0       	breq	.+44     	; 0xe10 <MOTOR_turnoff+0x3a>
     de4:	1c c0       	rjmp	.+56     	; 0xe1e <MOTOR_turnoff+0x48>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	62 e0       	ldi	r22, 0x02	; 2
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     df0:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     df2:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	65 e0       	ldi	r22, 0x05	; 5
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dfe:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e00:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	62 e0       	ldi	r22, 0x02	; 2
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e0c:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e0e:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	65 e0       	ldi	r22, 0x05	; 5
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e1a:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     e1c:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e1e:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     e20:	08 95       	ret

00000e22 <MOTOR_turnon>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	69 f0       	breq	.+26     	; 0xe40 <MOTOR_turnon+0x1e>
     e26:	28 f0       	brcs	.+10     	; 0xe32 <MOTOR_turnon+0x10>
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	89 f0       	breq	.+34     	; 0xe4e <MOTOR_turnon+0x2c>
     e2c:	83 30       	cpi	r24, 0x03	; 3
     e2e:	b1 f0       	breq	.+44     	; 0xe5c <MOTOR_turnon+0x3a>
     e30:	1c c0       	rjmp	.+56     	; 0xe6a <MOTOR_turnon+0x48>
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e32:	41 e0       	ldi	r20, 0x01	; 1
     e34:	62 e0       	ldi	r22, 0x02	; 2
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e3c:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e3e:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e40:	41 e0       	ldi	r20, 0x01	; 1
     e42:	65 e0       	ldi	r22, 0x05	; 5
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e4a:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e4c:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	62 e0       	ldi	r22, 0x02	; 2
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e58:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e5a:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	65 e0       	ldi	r22, 0x05	; 5
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e66:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e68:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e6a:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     e6c:	08 95       	ret

00000e6e <US_init>:
/** RETURNS : VOID                                                **/
/*******************************************************************/
void US_init(void)
{
	/** INITIALIZE THE TRIGGER PIN AS OUTPUT PIN **/
	DIO_setpindir(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_OUTPUT);
     e6e:	41 e0       	ldi	r20, 0x01	; 1
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	0e 94 55 07 	call	0xeaa	; 0xeaa <DIO_setpindir>
     e78:	08 95       	ret

00000e7a <US_sendtrigger>:
/** RETURNS : EN_ultrasonicreturn                                 **/
/*******************************************************************/
EN_ultrasonicreturn US_sendtrigger(void)
{
	/** SEND PULSE OF 15 MICROSECOND **/
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_HIGH);
     e7a:	41 e0       	ldi	r20, 0x01	; 1
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
	TMR0_delaymicros(15);
     e84:	6f e0       	ldi	r22, 0x0F	; 15
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 3e 09 	call	0x127c	; 0x127c <TMR0_delaymicros>
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_LOW);
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <DIO_setpinvalue>
}
     e9a:	08 95       	ret

00000e9c <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZE APPLICATION MODULES **/
     e9c:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_setentry(); /** SET THE ENTRY DATA **/
     ea0:	0e 94 76 00 	call	0xec	; 0xec <APP_setentry>
	
    while (1) 
    {	
		APP_start(); /** SUPER LOOP **/	
     ea4:	0e 94 2b 01 	call	0x256	; 0x256 <APP_start>
     ea8:	fd cf       	rjmp	.-6      	; 0xea4 <main+0x8>

00000eaa <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
     eaa:	44 23       	and	r20, r20
     eac:	19 f0       	breq	.+6      	; 0xeb4 <DIO_setpindir+0xa>
     eae:	41 30       	cpi	r20, 0x01	; 1
     eb0:	e9 f1       	breq	.+122    	; 0xf2c <DIO_setpindir+0x82>
     eb2:	74 c0       	rjmp	.+232    	; 0xf9c <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     eb4:	81 30       	cpi	r24, 0x01	; 1
     eb6:	99 f0       	breq	.+38     	; 0xede <DIO_setpindir+0x34>
     eb8:	28 f0       	brcs	.+10     	; 0xec4 <DIO_setpindir+0x1a>
     eba:	82 30       	cpi	r24, 0x02	; 2
     ebc:	e9 f0       	breq	.+58     	; 0xef8 <DIO_setpindir+0x4e>
     ebe:	83 30       	cpi	r24, 0x03	; 3
     ec0:	41 f1       	breq	.+80     	; 0xf12 <DIO_setpindir+0x68>
     ec2:	6e c0       	rjmp	.+220    	; 0xfa0 <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     ec4:	2a b3       	in	r18, 0x1a	; 26
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_setpindir+0x26>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	6a 95       	dec	r22
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_setpindir+0x22>
     ed4:	80 95       	com	r24
     ed6:	82 23       	and	r24, r18
     ed8:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     eda:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
     edc:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     ede:	27 b3       	in	r18, 0x17	; 23
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_setpindir+0x40>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	6a 95       	dec	r22
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_setpindir+0x3c>
     eee:	80 95       	com	r24
     ef0:	82 23       	and	r24, r18
     ef2:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     ef4:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
     ef6:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     ef8:	24 b3       	in	r18, 0x14	; 20
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <DIO_setpindir+0x5a>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	6a 95       	dec	r22
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <DIO_setpindir+0x56>
     f08:	80 95       	com	r24
     f0a:	82 23       	and	r24, r18
     f0c:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f0e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
     f10:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     f12:	21 b3       	in	r18, 0x11	; 17
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_setpindir+0x74>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	6a 95       	dec	r22
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_setpindir+0x70>
     f22:	80 95       	com	r24
     f24:	82 23       	and	r24, r18
     f26:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f28:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
     f2a:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     f2c:	81 30       	cpi	r24, 0x01	; 1
     f2e:	91 f0       	breq	.+36     	; 0xf54 <DIO_setpindir+0xaa>
     f30:	28 f0       	brcs	.+10     	; 0xf3c <DIO_setpindir+0x92>
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	d9 f0       	breq	.+54     	; 0xf6c <DIO_setpindir+0xc2>
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	29 f1       	breq	.+74     	; 0xf84 <DIO_setpindir+0xda>
     f3a:	34 c0       	rjmp	.+104    	; 0xfa4 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     f3c:	2a b3       	in	r18, 0x1a	; 26
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_setpindir+0x9e>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	6a 95       	dec	r22
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_setpindir+0x9a>
     f4c:	82 2b       	or	r24, r18
     f4e:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f50:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     f52:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     f54:	27 b3       	in	r18, 0x17	; 23
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_setpindir+0xb6>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	6a 95       	dec	r22
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_setpindir+0xb2>
     f64:	82 2b       	or	r24, r18
     f66:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f68:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     f6a:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     f6c:	24 b3       	in	r18, 0x14	; 20
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_setpindir+0xce>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	6a 95       	dec	r22
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_setpindir+0xca>
     f7c:	82 2b       	or	r24, r18
     f7e:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f80:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     f82:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     f84:	21 b3       	in	r18, 0x11	; 17
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <DIO_setpindir+0xe6>
     f8c:	88 0f       	add	r24, r24
     f8e:	99 1f       	adc	r25, r25
     f90:	6a 95       	dec	r22
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <DIO_setpindir+0xe2>
     f94:	82 2b       	or	r24, r18
     f96:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f98:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     f9a:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     fa4:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
     fa6:	08 95       	ret

00000fa8 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
     fa8:	44 23       	and	r20, r20
     faa:	19 f0       	breq	.+6      	; 0xfb2 <DIO_setpinvalue+0xa>
     fac:	41 30       	cpi	r20, 0x01	; 1
     fae:	e9 f1       	breq	.+122    	; 0x102a <DIO_setpinvalue+0x82>
     fb0:	74 c0       	rjmp	.+232    	; 0x109a <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	99 f0       	breq	.+38     	; 0xfdc <DIO_setpinvalue+0x34>
     fb6:	28 f0       	brcs	.+10     	; 0xfc2 <DIO_setpinvalue+0x1a>
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	e9 f0       	breq	.+58     	; 0xff6 <DIO_setpinvalue+0x4e>
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	41 f1       	breq	.+80     	; 0x1010 <DIO_setpinvalue+0x68>
     fc0:	6e c0       	rjmp	.+220    	; 0x109e <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     fc2:	2b b3       	in	r18, 0x1b	; 27
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_setpinvalue+0x26>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	6a 95       	dec	r22
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_setpinvalue+0x22>
     fd2:	80 95       	com	r24
     fd4:	82 23       	and	r24, r18
     fd6:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     fd8:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     fda:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     fdc:	28 b3       	in	r18, 0x18	; 24
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_setpinvalue+0x40>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	6a 95       	dec	r22
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_setpinvalue+0x3c>
     fec:	80 95       	com	r24
     fee:	82 23       	and	r24, r18
     ff0:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     ff2:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     ff4:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     ff6:	25 b3       	in	r18, 0x15	; 21
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <DIO_setpinvalue+0x5a>
     ffe:	88 0f       	add	r24, r24
    1000:	99 1f       	adc	r25, r25
    1002:	6a 95       	dec	r22
    1004:	e2 f7       	brpl	.-8      	; 0xffe <DIO_setpinvalue+0x56>
    1006:	80 95       	com	r24
    1008:	82 23       	and	r24, r18
    100a:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    100c:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    100e:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    1010:	22 b3       	in	r18, 0x12	; 18
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_setpinvalue+0x74>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	6a 95       	dec	r22
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_setpinvalue+0x70>
    1020:	80 95       	com	r24
    1022:	82 23       	and	r24, r18
    1024:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1026:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    1028:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	91 f0       	breq	.+36     	; 0x1052 <DIO_setpinvalue+0xaa>
    102e:	28 f0       	brcs	.+10     	; 0x103a <DIO_setpinvalue+0x92>
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	d9 f0       	breq	.+54     	; 0x106a <DIO_setpinvalue+0xc2>
    1034:	83 30       	cpi	r24, 0x03	; 3
    1036:	29 f1       	breq	.+74     	; 0x1082 <DIO_setpinvalue+0xda>
    1038:	34 c0       	rjmp	.+104    	; 0x10a2 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    103a:	2b b3       	in	r18, 0x1b	; 27
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <DIO_setpinvalue+0x9e>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	6a 95       	dec	r22
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <DIO_setpinvalue+0x9a>
    104a:	82 2b       	or	r24, r18
    104c:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    104e:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1050:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1052:	28 b3       	in	r18, 0x18	; 24
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_setpinvalue+0xb6>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	6a 95       	dec	r22
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_setpinvalue+0xb2>
    1062:	82 2b       	or	r24, r18
    1064:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1066:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1068:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    106a:	25 b3       	in	r18, 0x15	; 21
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_setpinvalue+0xce>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	6a 95       	dec	r22
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_setpinvalue+0xca>
    107a:	82 2b       	or	r24, r18
    107c:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    107e:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1080:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1082:	22 b3       	in	r18, 0x12	; 18
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_setpinvalue+0xe6>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	6a 95       	dec	r22
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_setpinvalue+0xe2>
    1092:	82 2b       	or	r24, r18
    1094:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1096:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1098:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    10a2:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
    10a4:	08 95       	ret

000010a6 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	99 f0       	breq	.+38     	; 0x10d0 <DIO_readpin+0x2a>
    10aa:	28 f0       	brcs	.+10     	; 0x10b6 <DIO_readpin+0x10>
    10ac:	82 30       	cpi	r24, 0x02	; 2
    10ae:	e9 f0       	breq	.+58     	; 0x10ea <DIO_readpin+0x44>
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	41 f1       	breq	.+80     	; 0x1104 <DIO_readpin+0x5e>
    10b4:	34 c0       	rjmp	.+104    	; 0x111e <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    10b6:	89 b3       	in	r24, 0x19	; 25
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <DIO_readpin+0x1a>
    10bc:	95 95       	asr	r25
    10be:	87 95       	ror	r24
    10c0:	6a 95       	dec	r22
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <DIO_readpin+0x16>
    10c4:	81 70       	andi	r24, 0x01	; 1
    10c6:	89 bb       	out	0x19, r24	; 25
    10c8:	fa 01       	movw	r30, r20
    10ca:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    10cc:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    10ce:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    10d0:	86 b3       	in	r24, 0x16	; 22
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_readpin+0x34>
    10d6:	95 95       	asr	r25
    10d8:	87 95       	ror	r24
    10da:	6a 95       	dec	r22
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_readpin+0x30>
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	86 bb       	out	0x16, r24	; 22
    10e2:	fa 01       	movw	r30, r20
    10e4:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    10e6:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    10e8:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    10ea:	83 b3       	in	r24, 0x13	; 19
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_readpin+0x4e>
    10f0:	95 95       	asr	r25
    10f2:	87 95       	ror	r24
    10f4:	6a 95       	dec	r22
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_readpin+0x4a>
    10f8:	81 70       	andi	r24, 0x01	; 1
    10fa:	83 bb       	out	0x13, r24	; 19
    10fc:	fa 01       	movw	r30, r20
    10fe:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1100:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    1102:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    1104:	80 b3       	in	r24, 0x10	; 16
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_readpin+0x68>
    110a:	95 95       	asr	r25
    110c:	87 95       	ror	r24
    110e:	6a 95       	dec	r22
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_readpin+0x64>
    1112:	81 70       	andi	r24, 0x01	; 1
    1114:	80 bb       	out	0x10, r24	; 16
    1116:	fa 01       	movw	r30, r20
    1118:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    111a:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    111c:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
    111e:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
    1120:	08 95       	ret

00001122 <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	91 f0       	breq	.+36     	; 0x114a <DIO_togglepin+0x28>
    1126:	28 f0       	brcs	.+10     	; 0x1132 <DIO_togglepin+0x10>
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	d9 f0       	breq	.+54     	; 0x1162 <DIO_togglepin+0x40>
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	29 f1       	breq	.+74     	; 0x117a <DIO_togglepin+0x58>
    1130:	30 c0       	rjmp	.+96     	; 0x1192 <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
    1132:	2b b3       	in	r18, 0x1b	; 27
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_togglepin+0x1c>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	6a 95       	dec	r22
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_togglepin+0x18>
    1142:	82 27       	eor	r24, r18
    1144:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1146:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
    1148:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
    114a:	28 b3       	in	r18, 0x18	; 24
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_togglepin+0x34>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	6a 95       	dec	r22
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_togglepin+0x30>
    115a:	82 27       	eor	r24, r18
    115c:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    115e:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
    1160:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
    1162:	25 b3       	in	r18, 0x15	; 21
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_togglepin+0x4c>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	6a 95       	dec	r22
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_togglepin+0x48>
    1172:	82 27       	eor	r24, r18
    1174:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1176:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
    1178:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
    117a:	22 b3       	in	r18, 0x12	; 18
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_togglepin+0x64>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	6a 95       	dec	r22
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_togglepin+0x60>
    118a:	82 27       	eor	r24, r18
    118c:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    118e:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
    1190:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
    1192:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
    1194:	08 95       	ret

00001196 <SET_GLOBALINTERRUPT>:
    1196:	8f b7       	in	r24, 0x3f	; 63
    1198:	80 68       	ori	r24, 0x80	; 128
    119a:	8f bf       	out	0x3f, r24	; 63
    119c:	08 95       	ret

0000119e <INT0_init>:
    119e:	0e 94 cb 08 	call	0x1196	; 0x1196 <SET_GLOBALINTERRUPT>
    11a2:	85 b7       	in	r24, 0x35	; 53
    11a4:	81 60       	ori	r24, 0x01	; 1
    11a6:	85 bf       	out	0x35, r24	; 53
    11a8:	85 b7       	in	r24, 0x35	; 53
    11aa:	8d 7f       	andi	r24, 0xFD	; 253
    11ac:	85 bf       	out	0x35, r24	; 53
    11ae:	8b b7       	in	r24, 0x3b	; 59
    11b0:	80 64       	ori	r24, 0x40	; 64
    11b2:	8b bf       	out	0x3b, r24	; 59
    11b4:	08 95       	ret

000011b6 <TMR0_init>:
    11b6:	83 b7       	in	r24, 0x33	; 51
    11b8:	8f 77       	andi	r24, 0x7F	; 127
    11ba:	83 bf       	out	0x33, r24	; 51
    11bc:	83 b7       	in	r24, 0x33	; 51
    11be:	8f 7b       	andi	r24, 0xBF	; 191
    11c0:	83 bf       	out	0x33, r24	; 51
    11c2:	83 b7       	in	r24, 0x33	; 51
    11c4:	87 7f       	andi	r24, 0xF7	; 247
    11c6:	83 bf       	out	0x33, r24	; 51
    11c8:	83 b7       	in	r24, 0x33	; 51
    11ca:	8f 7e       	andi	r24, 0xEF	; 239
    11cc:	83 bf       	out	0x33, r24	; 51
    11ce:	83 b7       	in	r24, 0x33	; 51
    11d0:	8f 7d       	andi	r24, 0xDF	; 223
    11d2:	83 bf       	out	0x33, r24	; 51
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	08 95       	ret

000011d8 <TMR0_start>:
    11d8:	83 b7       	in	r24, 0x33	; 51
    11da:	81 60       	ori	r24, 0x01	; 1
    11dc:	83 bf       	out	0x33, r24	; 51
    11de:	83 b7       	in	r24, 0x33	; 51
    11e0:	8d 7f       	andi	r24, 0xFD	; 253
    11e2:	83 bf       	out	0x33, r24	; 51
    11e4:	83 b7       	in	r24, 0x33	; 51
    11e6:	8b 7f       	andi	r24, 0xFB	; 251
    11e8:	83 bf       	out	0x33, r24	; 51
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	08 95       	ret

000011ee <TMR0_stop>:
    11ee:	83 b7       	in	r24, 0x33	; 51
    11f0:	8e 7f       	andi	r24, 0xFE	; 254
    11f2:	83 bf       	out	0x33, r24	; 51
    11f4:	83 b7       	in	r24, 0x33	; 51
    11f6:	8d 7f       	andi	r24, 0xFD	; 253
    11f8:	83 bf       	out	0x33, r24	; 51
    11fa:	83 b7       	in	r24, 0x33	; 51
    11fc:	8b 7f       	andi	r24, 0xFB	; 251
    11fe:	83 bf       	out	0x33, r24	; 51
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	08 95       	ret

00001204 <TMR0_delayms>:
    1204:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__floatunsisf>
    1208:	2f e6       	ldi	r18, 0x6F	; 111
    120a:	32 e1       	ldi	r19, 0x12	; 18
    120c:	43 e0       	ldi	r20, 0x03	; 3
    120e:	5d e3       	ldi	r21, 0x3D	; 61
    1210:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__divsf3>
    1214:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fixunssfsi>
    1218:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <u32_gs_tmr0nuofovs>
    121c:	70 93 b4 00 	sts	0x00B4, r23	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    1220:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    1224:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    1228:	12 be       	out	0x32, r1	; 50
    122a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <TMR0_start>
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	ba 01       	movw	r22, r20
    1234:	0a c0       	rjmp	.+20     	; 0x124a <TMR0_delayms+0x46>
    1236:	08 b6       	in	r0, 0x38	; 56
    1238:	00 fe       	sbrs	r0, 0
    123a:	fd cf       	rjmp	.-6      	; 0x1236 <TMR0_delayms+0x32>
    123c:	88 b7       	in	r24, 0x38	; 56
    123e:	81 60       	ori	r24, 0x01	; 1
    1240:	88 bf       	out	0x38, r24	; 56
    1242:	4f 5f       	subi	r20, 0xFF	; 255
    1244:	5f 4f       	sbci	r21, 0xFF	; 255
    1246:	6f 4f       	sbci	r22, 0xFF	; 255
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <u32_gs_tmr0nuofovs>
    124e:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    1252:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    1256:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    125a:	48 17       	cp	r20, r24
    125c:	59 07       	cpc	r21, r25
    125e:	6a 07       	cpc	r22, r26
    1260:	7b 07       	cpc	r23, r27
    1262:	48 f3       	brcs	.-46     	; 0x1236 <TMR0_delayms+0x32>
    1264:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <u32_gs_tmr0nuofovs>
    1268:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    126c:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    1270:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    1274:	0e 94 f7 08 	call	0x11ee	; 0x11ee <TMR0_stop>
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	08 95       	ret

0000127c <TMR0_delaymicros>:
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	68 94       	set
    1282:	14 f8       	bld	r1, 4
    1284:	b6 95       	lsr	r27
    1286:	a7 95       	ror	r26
    1288:	97 95       	ror	r25
    128a:	87 95       	ror	r24
    128c:	16 94       	lsr	r1
    128e:	d1 f7       	brne	.-12     	; 0x1284 <TMR0_delaymicros+0x8>
    1290:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <u32_gs_tmr0nuofovs>
    1294:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    1298:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    129c:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    12a0:	12 be       	out	0x32, r1	; 50
    12a2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <TMR0_start>
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	ba 01       	movw	r22, r20
    12ac:	0a c0       	rjmp	.+20     	; 0x12c2 <TMR0_delaymicros+0x46>
    12ae:	08 b6       	in	r0, 0x38	; 56
    12b0:	00 fe       	sbrs	r0, 0
    12b2:	fd cf       	rjmp	.-6      	; 0x12ae <TMR0_delaymicros+0x32>
    12b4:	88 b7       	in	r24, 0x38	; 56
    12b6:	81 60       	ori	r24, 0x01	; 1
    12b8:	88 bf       	out	0x38, r24	; 56
    12ba:	4f 5f       	subi	r20, 0xFF	; 255
    12bc:	5f 4f       	sbci	r21, 0xFF	; 255
    12be:	6f 4f       	sbci	r22, 0xFF	; 255
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <u32_gs_tmr0nuofovs>
    12c6:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    12ca:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    12ce:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    12d2:	48 17       	cp	r20, r24
    12d4:	59 07       	cpc	r21, r25
    12d6:	6a 07       	cpc	r22, r26
    12d8:	7b 07       	cpc	r23, r27
    12da:	48 f3       	brcs	.-46     	; 0x12ae <TMR0_delaymicros+0x32>
    12dc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <TMR0_stop>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	08 95       	ret

000012e4 <TMR1_init>:
    12e4:	8f b5       	in	r24, 0x2f	; 47
    12e6:	8e 7f       	andi	r24, 0xFE	; 254
    12e8:	8f bd       	out	0x2f, r24	; 47
    12ea:	8f b5       	in	r24, 0x2f	; 47
    12ec:	8d 7f       	andi	r24, 0xFD	; 253
    12ee:	8f bd       	out	0x2f, r24	; 47
    12f0:	8e b5       	in	r24, 0x2e	; 46
    12f2:	87 7f       	andi	r24, 0xF7	; 247
    12f4:	8e bd       	out	0x2e, r24	; 46
    12f6:	8e b5       	in	r24, 0x2e	; 46
    12f8:	8f 7e       	andi	r24, 0xEF	; 239
    12fa:	8e bd       	out	0x2e, r24	; 46
    12fc:	8f b5       	in	r24, 0x2f	; 47
    12fe:	84 60       	ori	r24, 0x04	; 4
    1300:	8f bd       	out	0x2f, r24	; 47
    1302:	8f b5       	in	r24, 0x2f	; 47
    1304:	88 60       	ori	r24, 0x08	; 8
    1306:	8f bd       	out	0x2f, r24	; 47
    1308:	8f b7       	in	r24, 0x3f	; 63
    130a:	80 68       	ori	r24, 0x80	; 128
    130c:	8f bf       	out	0x3f, r24	; 63
    130e:	89 b7       	in	r24, 0x39	; 57
    1310:	9a b7       	in	r25, 0x3a	; 58
    1312:	84 60       	ori	r24, 0x04	; 4
    1314:	9a bf       	out	0x3a, r25	; 58
    1316:	89 bf       	out	0x39, r24	; 57
    1318:	08 95       	ret

0000131a <TMR1_start>:
    131a:	1d bc       	out	0x2d, r1	; 45
    131c:	1c bc       	out	0x2c, r1	; 44
    131e:	8e b5       	in	r24, 0x2e	; 46
    1320:	81 60       	ori	r24, 0x01	; 1
    1322:	8e bd       	out	0x2e, r24	; 46
    1324:	8e b5       	in	r24, 0x2e	; 46
    1326:	8d 7f       	andi	r24, 0xFD	; 253
    1328:	8e bd       	out	0x2e, r24	; 46
    132a:	8e b5       	in	r24, 0x2e	; 46
    132c:	8b 7f       	andi	r24, 0xFB	; 251
    132e:	8e bd       	out	0x2e, r24	; 46
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	08 95       	ret

00001334 <TMR1_stop>:
    1334:	8e b5       	in	r24, 0x2e	; 46
    1336:	8e 7f       	andi	r24, 0xFE	; 254
    1338:	8e bd       	out	0x2e, r24	; 46
    133a:	8e b5       	in	r24, 0x2e	; 46
    133c:	8d 7f       	andi	r24, 0xFD	; 253
    133e:	8e bd       	out	0x2e, r24	; 46
    1340:	8e b5       	in	r24, 0x2e	; 46
    1342:	8b 7f       	andi	r24, 0xFB	; 251
    1344:	8e bd       	out	0x2e, r24	; 46
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	08 95       	ret

0000134a <TMR1_getvalue>:
    134a:	2c b5       	in	r18, 0x2c	; 44
    134c:	3d b5       	in	r19, 0x2d	; 45
    134e:	fc 01       	movw	r30, r24
    1350:	31 83       	std	Z+1, r19	; 0x01
    1352:	20 83       	st	Z, r18
    1354:	08 95       	ret

00001356 <TMR1_setcounterval>:
    1356:	9d bd       	out	0x2d, r25	; 45
    1358:	8c bd       	out	0x2c, r24	; 44
    135a:	08 95       	ret

0000135c <TMR2_init>:
    135c:	85 b5       	in	r24, 0x25	; 37
    135e:	8f 77       	andi	r24, 0x7F	; 127
    1360:	85 bd       	out	0x25, r24	; 37
    1362:	85 b5       	in	r24, 0x25	; 37
    1364:	8f 7b       	andi	r24, 0xBF	; 191
    1366:	85 bd       	out	0x25, r24	; 37
    1368:	85 b5       	in	r24, 0x25	; 37
    136a:	87 7f       	andi	r24, 0xF7	; 247
    136c:	85 bd       	out	0x25, r24	; 37
    136e:	85 b5       	in	r24, 0x25	; 37
    1370:	8f 7e       	andi	r24, 0xEF	; 239
    1372:	85 bd       	out	0x25, r24	; 37
    1374:	85 b5       	in	r24, 0x25	; 37
    1376:	8f 7d       	andi	r24, 0xDF	; 223
    1378:	85 bd       	out	0x25, r24	; 37
    137a:	8f b7       	in	r24, 0x3f	; 63
    137c:	80 68       	ori	r24, 0x80	; 128
    137e:	8f bf       	out	0x3f, r24	; 63
    1380:	89 b7       	in	r24, 0x39	; 57
    1382:	80 64       	ori	r24, 0x40	; 64
    1384:	89 bf       	out	0x39, r24	; 57
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	08 95       	ret

0000138a <TMR2_start>:
    138a:	85 b5       	in	r24, 0x25	; 37
    138c:	81 60       	ori	r24, 0x01	; 1
    138e:	85 bd       	out	0x25, r24	; 37
    1390:	85 b5       	in	r24, 0x25	; 37
    1392:	8d 7f       	andi	r24, 0xFD	; 253
    1394:	85 bd       	out	0x25, r24	; 37
    1396:	85 b5       	in	r24, 0x25	; 37
    1398:	8b 7f       	andi	r24, 0xFB	; 251
    139a:	85 bd       	out	0x25, r24	; 37
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	08 95       	ret

000013a0 <TMR2_stop>:
    13a0:	85 b5       	in	r24, 0x25	; 37
    13a2:	8e 7f       	andi	r24, 0xFE	; 254
    13a4:	85 bd       	out	0x25, r24	; 37
    13a6:	85 b5       	in	r24, 0x25	; 37
    13a8:	8d 7f       	andi	r24, 0xFD	; 253
    13aa:	85 bd       	out	0x25, r24	; 37
    13ac:	85 b5       	in	r24, 0x25	; 37
    13ae:	8b 7f       	andi	r24, 0xFB	; 251
    13b0:	85 bd       	out	0x25, r24	; 37
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	08 95       	ret

000013b6 <TMR2_getovs>:
    13b6:	bc 01       	movw	r22, r24
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 8a 0a 	call	0x1514	; 0x1514 <__floatunsisf>
    13c0:	2f e6       	ldi	r18, 0x6F	; 111
    13c2:	32 e1       	ldi	r19, 0x12	; 18
    13c4:	43 e0       	ldi	r20, 0x03	; 3
    13c6:	5d e3       	ldi	r21, 0x3D	; 61
    13c8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <__divsf3>
    13cc:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <__fixunssfsi>
    13d0:	08 95       	ret

000013d2 <__divsf3>:
    13d2:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__divsf3x>
    13d6:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__fp_round>
    13da:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__fp_pscB>
    13de:	58 f0       	brcs	.+22     	; 0x13f6 <__divsf3+0x24>
    13e0:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <__fp_pscA>
    13e4:	40 f0       	brcs	.+16     	; 0x13f6 <__divsf3+0x24>
    13e6:	29 f4       	brne	.+10     	; 0x13f2 <__divsf3+0x20>
    13e8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ea:	29 f0       	breq	.+10     	; 0x13f6 <__divsf3+0x24>
    13ec:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_inf>
    13f0:	51 11       	cpse	r21, r1
    13f2:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_szero>
    13f6:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__fp_nan>

000013fa <__divsf3x>:
    13fa:	0e 94 ef 0a 	call	0x15de	; 0x15de <__fp_split3>
    13fe:	68 f3       	brcs	.-38     	; 0x13da <__divsf3+0x8>

00001400 <__divsf3_pse>:
    1400:	99 23       	and	r25, r25
    1402:	b1 f3       	breq	.-20     	; 0x13f0 <__divsf3+0x1e>
    1404:	55 23       	and	r21, r21
    1406:	91 f3       	breq	.-28     	; 0x13ec <__divsf3+0x1a>
    1408:	95 1b       	sub	r25, r21
    140a:	55 0b       	sbc	r21, r21
    140c:	bb 27       	eor	r27, r27
    140e:	aa 27       	eor	r26, r26
    1410:	62 17       	cp	r22, r18
    1412:	73 07       	cpc	r23, r19
    1414:	84 07       	cpc	r24, r20
    1416:	38 f0       	brcs	.+14     	; 0x1426 <__divsf3_pse+0x26>
    1418:	9f 5f       	subi	r25, 0xFF	; 255
    141a:	5f 4f       	sbci	r21, 0xFF	; 255
    141c:	22 0f       	add	r18, r18
    141e:	33 1f       	adc	r19, r19
    1420:	44 1f       	adc	r20, r20
    1422:	aa 1f       	adc	r26, r26
    1424:	a9 f3       	breq	.-22     	; 0x1410 <__divsf3_pse+0x10>
    1426:	35 d0       	rcall	.+106    	; 0x1492 <__divsf3_pse+0x92>
    1428:	0e 2e       	mov	r0, r30
    142a:	3a f0       	brmi	.+14     	; 0x143a <__divsf3_pse+0x3a>
    142c:	e0 e8       	ldi	r30, 0x80	; 128
    142e:	32 d0       	rcall	.+100    	; 0x1494 <__divsf3_pse+0x94>
    1430:	91 50       	subi	r25, 0x01	; 1
    1432:	50 40       	sbci	r21, 0x00	; 0
    1434:	e6 95       	lsr	r30
    1436:	00 1c       	adc	r0, r0
    1438:	ca f7       	brpl	.-14     	; 0x142c <__divsf3_pse+0x2c>
    143a:	2b d0       	rcall	.+86     	; 0x1492 <__divsf3_pse+0x92>
    143c:	fe 2f       	mov	r31, r30
    143e:	29 d0       	rcall	.+82     	; 0x1492 <__divsf3_pse+0x92>
    1440:	66 0f       	add	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	88 1f       	adc	r24, r24
    1446:	bb 1f       	adc	r27, r27
    1448:	26 17       	cp	r18, r22
    144a:	37 07       	cpc	r19, r23
    144c:	48 07       	cpc	r20, r24
    144e:	ab 07       	cpc	r26, r27
    1450:	b0 e8       	ldi	r27, 0x80	; 128
    1452:	09 f0       	breq	.+2      	; 0x1456 <__divsf3_pse+0x56>
    1454:	bb 0b       	sbc	r27, r27
    1456:	80 2d       	mov	r24, r0
    1458:	bf 01       	movw	r22, r30
    145a:	ff 27       	eor	r31, r31
    145c:	93 58       	subi	r25, 0x83	; 131
    145e:	5f 4f       	sbci	r21, 0xFF	; 255
    1460:	3a f0       	brmi	.+14     	; 0x1470 <__divsf3_pse+0x70>
    1462:	9e 3f       	cpi	r25, 0xFE	; 254
    1464:	51 05       	cpc	r21, r1
    1466:	78 f0       	brcs	.+30     	; 0x1486 <__divsf3_pse+0x86>
    1468:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_inf>
    146c:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__fp_szero>
    1470:	5f 3f       	cpi	r21, 0xFF	; 255
    1472:	e4 f3       	brlt	.-8      	; 0x146c <__divsf3_pse+0x6c>
    1474:	98 3e       	cpi	r25, 0xE8	; 232
    1476:	d4 f3       	brlt	.-12     	; 0x146c <__divsf3_pse+0x6c>
    1478:	86 95       	lsr	r24
    147a:	77 95       	ror	r23
    147c:	67 95       	ror	r22
    147e:	b7 95       	ror	r27
    1480:	f7 95       	ror	r31
    1482:	9f 5f       	subi	r25, 0xFF	; 255
    1484:	c9 f7       	brne	.-14     	; 0x1478 <__divsf3_pse+0x78>
    1486:	88 0f       	add	r24, r24
    1488:	91 1d       	adc	r25, r1
    148a:	96 95       	lsr	r25
    148c:	87 95       	ror	r24
    148e:	97 f9       	bld	r25, 7
    1490:	08 95       	ret
    1492:	e1 e0       	ldi	r30, 0x01	; 1
    1494:	66 0f       	add	r22, r22
    1496:	77 1f       	adc	r23, r23
    1498:	88 1f       	adc	r24, r24
    149a:	bb 1f       	adc	r27, r27
    149c:	62 17       	cp	r22, r18
    149e:	73 07       	cpc	r23, r19
    14a0:	84 07       	cpc	r24, r20
    14a2:	ba 07       	cpc	r27, r26
    14a4:	20 f0       	brcs	.+8      	; 0x14ae <__divsf3_pse+0xae>
    14a6:	62 1b       	sub	r22, r18
    14a8:	73 0b       	sbc	r23, r19
    14aa:	84 0b       	sbc	r24, r20
    14ac:	ba 0b       	sbc	r27, r26
    14ae:	ee 1f       	adc	r30, r30
    14b0:	88 f7       	brcc	.-30     	; 0x1494 <__divsf3_pse+0x94>
    14b2:	e0 95       	com	r30
    14b4:	08 95       	ret

000014b6 <__fixunssfsi>:
    14b6:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__fp_splitA>
    14ba:	88 f0       	brcs	.+34     	; 0x14de <__fixunssfsi+0x28>
    14bc:	9f 57       	subi	r25, 0x7F	; 127
    14be:	98 f0       	brcs	.+38     	; 0x14e6 <__fixunssfsi+0x30>
    14c0:	b9 2f       	mov	r27, r25
    14c2:	99 27       	eor	r25, r25
    14c4:	b7 51       	subi	r27, 0x17	; 23
    14c6:	b0 f0       	brcs	.+44     	; 0x14f4 <__fixunssfsi+0x3e>
    14c8:	e1 f0       	breq	.+56     	; 0x1502 <__fixunssfsi+0x4c>
    14ca:	66 0f       	add	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	1a f0       	brmi	.+6      	; 0x14da <__fixunssfsi+0x24>
    14d4:	ba 95       	dec	r27
    14d6:	c9 f7       	brne	.-14     	; 0x14ca <__fixunssfsi+0x14>
    14d8:	14 c0       	rjmp	.+40     	; 0x1502 <__fixunssfsi+0x4c>
    14da:	b1 30       	cpi	r27, 0x01	; 1
    14dc:	91 f0       	breq	.+36     	; 0x1502 <__fixunssfsi+0x4c>
    14de:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_zero>
    14e2:	b1 e0       	ldi	r27, 0x01	; 1
    14e4:	08 95       	ret
    14e6:	0c 94 11 0b 	jmp	0x1622	; 0x1622 <__fp_zero>
    14ea:	67 2f       	mov	r22, r23
    14ec:	78 2f       	mov	r23, r24
    14ee:	88 27       	eor	r24, r24
    14f0:	b8 5f       	subi	r27, 0xF8	; 248
    14f2:	39 f0       	breq	.+14     	; 0x1502 <__fixunssfsi+0x4c>
    14f4:	b9 3f       	cpi	r27, 0xF9	; 249
    14f6:	cc f3       	brlt	.-14     	; 0x14ea <__fixunssfsi+0x34>
    14f8:	86 95       	lsr	r24
    14fa:	77 95       	ror	r23
    14fc:	67 95       	ror	r22
    14fe:	b3 95       	inc	r27
    1500:	d9 f7       	brne	.-10     	; 0x14f8 <__fixunssfsi+0x42>
    1502:	3e f4       	brtc	.+14     	; 0x1512 <__fixunssfsi+0x5c>
    1504:	90 95       	com	r25
    1506:	80 95       	com	r24
    1508:	70 95       	com	r23
    150a:	61 95       	neg	r22
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	8f 4f       	sbci	r24, 0xFF	; 255
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	08 95       	ret

00001514 <__floatunsisf>:
    1514:	e8 94       	clt
    1516:	09 c0       	rjmp	.+18     	; 0x152a <__floatsisf+0x12>

00001518 <__floatsisf>:
    1518:	97 fb       	bst	r25, 7
    151a:	3e f4       	brtc	.+14     	; 0x152a <__floatsisf+0x12>
    151c:	90 95       	com	r25
    151e:	80 95       	com	r24
    1520:	70 95       	com	r23
    1522:	61 95       	neg	r22
    1524:	7f 4f       	sbci	r23, 0xFF	; 255
    1526:	8f 4f       	sbci	r24, 0xFF	; 255
    1528:	9f 4f       	sbci	r25, 0xFF	; 255
    152a:	99 23       	and	r25, r25
    152c:	a9 f0       	breq	.+42     	; 0x1558 <__floatsisf+0x40>
    152e:	f9 2f       	mov	r31, r25
    1530:	96 e9       	ldi	r25, 0x96	; 150
    1532:	bb 27       	eor	r27, r27
    1534:	93 95       	inc	r25
    1536:	f6 95       	lsr	r31
    1538:	87 95       	ror	r24
    153a:	77 95       	ror	r23
    153c:	67 95       	ror	r22
    153e:	b7 95       	ror	r27
    1540:	f1 11       	cpse	r31, r1
    1542:	f8 cf       	rjmp	.-16     	; 0x1534 <__floatsisf+0x1c>
    1544:	fa f4       	brpl	.+62     	; 0x1584 <__floatsisf+0x6c>
    1546:	bb 0f       	add	r27, r27
    1548:	11 f4       	brne	.+4      	; 0x154e <__floatsisf+0x36>
    154a:	60 ff       	sbrs	r22, 0
    154c:	1b c0       	rjmp	.+54     	; 0x1584 <__floatsisf+0x6c>
    154e:	6f 5f       	subi	r22, 0xFF	; 255
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	16 c0       	rjmp	.+44     	; 0x1584 <__floatsisf+0x6c>
    1558:	88 23       	and	r24, r24
    155a:	11 f0       	breq	.+4      	; 0x1560 <__floatsisf+0x48>
    155c:	96 e9       	ldi	r25, 0x96	; 150
    155e:	11 c0       	rjmp	.+34     	; 0x1582 <__floatsisf+0x6a>
    1560:	77 23       	and	r23, r23
    1562:	21 f0       	breq	.+8      	; 0x156c <__floatsisf+0x54>
    1564:	9e e8       	ldi	r25, 0x8E	; 142
    1566:	87 2f       	mov	r24, r23
    1568:	76 2f       	mov	r23, r22
    156a:	05 c0       	rjmp	.+10     	; 0x1576 <__floatsisf+0x5e>
    156c:	66 23       	and	r22, r22
    156e:	71 f0       	breq	.+28     	; 0x158c <__floatsisf+0x74>
    1570:	96 e8       	ldi	r25, 0x86	; 134
    1572:	86 2f       	mov	r24, r22
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	2a f0       	brmi	.+10     	; 0x1584 <__floatsisf+0x6c>
    157a:	9a 95       	dec	r25
    157c:	66 0f       	add	r22, r22
    157e:	77 1f       	adc	r23, r23
    1580:	88 1f       	adc	r24, r24
    1582:	da f7       	brpl	.-10     	; 0x157a <__floatsisf+0x62>
    1584:	88 0f       	add	r24, r24
    1586:	96 95       	lsr	r25
    1588:	87 95       	ror	r24
    158a:	97 f9       	bld	r25, 7
    158c:	08 95       	ret

0000158e <__fp_inf>:
    158e:	97 f9       	bld	r25, 7
    1590:	9f 67       	ori	r25, 0x7F	; 127
    1592:	80 e8       	ldi	r24, 0x80	; 128
    1594:	70 e0       	ldi	r23, 0x00	; 0
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	08 95       	ret

0000159a <__fp_nan>:
    159a:	9f ef       	ldi	r25, 0xFF	; 255
    159c:	80 ec       	ldi	r24, 0xC0	; 192
    159e:	08 95       	ret

000015a0 <__fp_pscA>:
    15a0:	00 24       	eor	r0, r0
    15a2:	0a 94       	dec	r0
    15a4:	16 16       	cp	r1, r22
    15a6:	17 06       	cpc	r1, r23
    15a8:	18 06       	cpc	r1, r24
    15aa:	09 06       	cpc	r0, r25
    15ac:	08 95       	ret

000015ae <__fp_pscB>:
    15ae:	00 24       	eor	r0, r0
    15b0:	0a 94       	dec	r0
    15b2:	12 16       	cp	r1, r18
    15b4:	13 06       	cpc	r1, r19
    15b6:	14 06       	cpc	r1, r20
    15b8:	05 06       	cpc	r0, r21
    15ba:	08 95       	ret

000015bc <__fp_round>:
    15bc:	09 2e       	mov	r0, r25
    15be:	03 94       	inc	r0
    15c0:	00 0c       	add	r0, r0
    15c2:	11 f4       	brne	.+4      	; 0x15c8 <__fp_round+0xc>
    15c4:	88 23       	and	r24, r24
    15c6:	52 f0       	brmi	.+20     	; 0x15dc <__fp_round+0x20>
    15c8:	bb 0f       	add	r27, r27
    15ca:	40 f4       	brcc	.+16     	; 0x15dc <__fp_round+0x20>
    15cc:	bf 2b       	or	r27, r31
    15ce:	11 f4       	brne	.+4      	; 0x15d4 <__fp_round+0x18>
    15d0:	60 ff       	sbrs	r22, 0
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <__fp_round+0x20>
    15d4:	6f 5f       	subi	r22, 0xFF	; 255
    15d6:	7f 4f       	sbci	r23, 0xFF	; 255
    15d8:	8f 4f       	sbci	r24, 0xFF	; 255
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	08 95       	ret

000015de <__fp_split3>:
    15de:	57 fd       	sbrc	r21, 7
    15e0:	90 58       	subi	r25, 0x80	; 128
    15e2:	44 0f       	add	r20, r20
    15e4:	55 1f       	adc	r21, r21
    15e6:	59 f0       	breq	.+22     	; 0x15fe <__fp_splitA+0x10>
    15e8:	5f 3f       	cpi	r21, 0xFF	; 255
    15ea:	71 f0       	breq	.+28     	; 0x1608 <__fp_splitA+0x1a>
    15ec:	47 95       	ror	r20

000015ee <__fp_splitA>:
    15ee:	88 0f       	add	r24, r24
    15f0:	97 fb       	bst	r25, 7
    15f2:	99 1f       	adc	r25, r25
    15f4:	61 f0       	breq	.+24     	; 0x160e <__fp_splitA+0x20>
    15f6:	9f 3f       	cpi	r25, 0xFF	; 255
    15f8:	79 f0       	breq	.+30     	; 0x1618 <__fp_splitA+0x2a>
    15fa:	87 95       	ror	r24
    15fc:	08 95       	ret
    15fe:	12 16       	cp	r1, r18
    1600:	13 06       	cpc	r1, r19
    1602:	14 06       	cpc	r1, r20
    1604:	55 1f       	adc	r21, r21
    1606:	f2 cf       	rjmp	.-28     	; 0x15ec <__fp_split3+0xe>
    1608:	46 95       	lsr	r20
    160a:	f1 df       	rcall	.-30     	; 0x15ee <__fp_splitA>
    160c:	08 c0       	rjmp	.+16     	; 0x161e <__fp_splitA+0x30>
    160e:	16 16       	cp	r1, r22
    1610:	17 06       	cpc	r1, r23
    1612:	18 06       	cpc	r1, r24
    1614:	99 1f       	adc	r25, r25
    1616:	f1 cf       	rjmp	.-30     	; 0x15fa <__fp_splitA+0xc>
    1618:	86 95       	lsr	r24
    161a:	71 05       	cpc	r23, r1
    161c:	61 05       	cpc	r22, r1
    161e:	08 94       	sec
    1620:	08 95       	ret

00001622 <__fp_zero>:
    1622:	e8 94       	clt

00001624 <__fp_szero>:
    1624:	bb 27       	eor	r27, r27
    1626:	66 27       	eor	r22, r22
    1628:	77 27       	eor	r23, r23
    162a:	cb 01       	movw	r24, r22
    162c:	97 f9       	bld	r25, 7
    162e:	08 95       	ret

00001630 <__divmodsi4>:
    1630:	05 2e       	mov	r0, r21
    1632:	97 fb       	bst	r25, 7
    1634:	1e f4       	brtc	.+6      	; 0x163c <__divmodsi4+0xc>
    1636:	00 94       	com	r0
    1638:	0e 94 2f 0b 	call	0x165e	; 0x165e <__negsi2>
    163c:	57 fd       	sbrc	r21, 7
    163e:	07 d0       	rcall	.+14     	; 0x164e <__divmodsi4_neg2>
    1640:	0e 94 46 0b 	call	0x168c	; 0x168c <__udivmodsi4>
    1644:	07 fc       	sbrc	r0, 7
    1646:	03 d0       	rcall	.+6      	; 0x164e <__divmodsi4_neg2>
    1648:	4e f4       	brtc	.+18     	; 0x165c <__divmodsi4_exit>
    164a:	0c 94 2f 0b 	jmp	0x165e	; 0x165e <__negsi2>

0000164e <__divmodsi4_neg2>:
    164e:	50 95       	com	r21
    1650:	40 95       	com	r20
    1652:	30 95       	com	r19
    1654:	21 95       	neg	r18
    1656:	3f 4f       	sbci	r19, 0xFF	; 255
    1658:	4f 4f       	sbci	r20, 0xFF	; 255
    165a:	5f 4f       	sbci	r21, 0xFF	; 255

0000165c <__divmodsi4_exit>:
    165c:	08 95       	ret

0000165e <__negsi2>:
    165e:	90 95       	com	r25
    1660:	80 95       	com	r24
    1662:	70 95       	com	r23
    1664:	61 95       	neg	r22
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	8f 4f       	sbci	r24, 0xFF	; 255
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	08 95       	ret

0000166e <__umulhisi3>:
    166e:	a2 9f       	mul	r26, r18
    1670:	b0 01       	movw	r22, r0
    1672:	b3 9f       	mul	r27, r19
    1674:	c0 01       	movw	r24, r0
    1676:	a3 9f       	mul	r26, r19
    1678:	70 0d       	add	r23, r0
    167a:	81 1d       	adc	r24, r1
    167c:	11 24       	eor	r1, r1
    167e:	91 1d       	adc	r25, r1
    1680:	b2 9f       	mul	r27, r18
    1682:	70 0d       	add	r23, r0
    1684:	81 1d       	adc	r24, r1
    1686:	11 24       	eor	r1, r1
    1688:	91 1d       	adc	r25, r1
    168a:	08 95       	ret

0000168c <__udivmodsi4>:
    168c:	a1 e2       	ldi	r26, 0x21	; 33
    168e:	1a 2e       	mov	r1, r26
    1690:	aa 1b       	sub	r26, r26
    1692:	bb 1b       	sub	r27, r27
    1694:	fd 01       	movw	r30, r26
    1696:	0d c0       	rjmp	.+26     	; 0x16b2 <__udivmodsi4_ep>

00001698 <__udivmodsi4_loop>:
    1698:	aa 1f       	adc	r26, r26
    169a:	bb 1f       	adc	r27, r27
    169c:	ee 1f       	adc	r30, r30
    169e:	ff 1f       	adc	r31, r31
    16a0:	a2 17       	cp	r26, r18
    16a2:	b3 07       	cpc	r27, r19
    16a4:	e4 07       	cpc	r30, r20
    16a6:	f5 07       	cpc	r31, r21
    16a8:	20 f0       	brcs	.+8      	; 0x16b2 <__udivmodsi4_ep>
    16aa:	a2 1b       	sub	r26, r18
    16ac:	b3 0b       	sbc	r27, r19
    16ae:	e4 0b       	sbc	r30, r20
    16b0:	f5 0b       	sbc	r31, r21

000016b2 <__udivmodsi4_ep>:
    16b2:	66 1f       	adc	r22, r22
    16b4:	77 1f       	adc	r23, r23
    16b6:	88 1f       	adc	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	1a 94       	dec	r1
    16bc:	69 f7       	brne	.-38     	; 0x1698 <__udivmodsi4_loop>
    16be:	60 95       	com	r22
    16c0:	70 95       	com	r23
    16c2:	80 95       	com	r24
    16c4:	90 95       	com	r25
    16c6:	9b 01       	movw	r18, r22
    16c8:	ac 01       	movw	r20, r24
    16ca:	bd 01       	movw	r22, r26
    16cc:	cf 01       	movw	r24, r30
    16ce:	08 95       	ret

000016d0 <_exit>:
    16d0:	f8 94       	cli

000016d2 <__stop_program>:
    16d2:	ff cf       	rjmp	.-2      	; 0x16d2 <__stop_program>
