
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  000016b2  00001746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000a6  008000a6  0000178c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000361c  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101e  00000000  00000000  00005124  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fed  00000000  00000000  00006142  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00008130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000efd  00000000  00000000  00008710  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143e  00000000  00000000  0000960d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000aa4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3b 03 	jmp	0x676	; 0x676 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 07 	call	0xe7a	; 0xe7a <main>
      8a:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint32_t u32_g_tick = 0 ;            /** GLOBAL VARIABLE TO BE COMPARED WITH DELAY TICKS **/   

/** FUNCTION TO INITIALIZE APPLICATION MODULES **/
void APP_init()
{
    ICU_init(); /** INITIALIZE ICU **/
      92:	0e 94 8f 03 	call	0x71e	; 0x71e <ICU_init>

	US_init(); /** INITILAIZATION ULTRASONIC MODULE **/
      96:	0e 94 26 07 	call	0xe4c	; 0xe4c <US_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
      9a:	0e 94 ca 08 	call	0x1194	; 0x1194 <TMR0_init>
	
	TMR2_init() ; /** INITIALIZE TIMER 2 **/
      9e:	0e 94 9d 09 	call	0x133a	; 0x133a <TMR2_init>
	
	KEYPAD_init() ; /** INITIALIZE KEYPAD **/
      a2:	0e 94 b0 03 	call	0x760	; 0x760 <KEYPAD_init>
	
	Button_init(); /** INITIALIZATION OF BUTTON **/
      a6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Button_init>
	
	LCD_init(); /** INITIALIZE LCD **/
      aa:	0e 94 da 04 	call	0x9b4	; 0x9b4 <LCD_init>
	
	TMR0_delayms(MS_DELAY_50); /** DELAY FOR LCD INITIALIZATION **/
      ae:	62 e3       	ldi	r22, 0x32	; 50
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>

	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 18 06 	call	0xc30	; 0xc30 <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 18 06 	call	0xc30	; 0xc30 <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 18 06 	call	0xc30	; 0xc30 <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 18 06 	call	0xc30	; 0xc30 <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 66 06 	call	0xccc	; 0xccc <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 66 06 	call	0xccc	; 0xccc <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 66 06 	call	0xccc	; 0xccc <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 66 06 	call	0xccc	; 0xccc <MOTOR_rotateclkdir>
      ea:	08 95       	ret

000000ec <APP_setentry>:

}

/** FUNCTION TO SET DEFAULTS **/
void APP_setentry()
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <APP_setentry+0x6>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_a_btnstatus = 0 , u8_a_pressednum = 0 ;
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	1a 82       	std	Y+2, r1	; 0x02
	
 	u32_g_tick = 0 ;
      fa:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
      fe:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     102:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     106:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     10a:	88 e8       	ldi	r24, 0x88	; 136
     10c:	93 e1       	ldi	r25, 0x13	; 19
     10e:	0e 94 ca 09 	call	0x1394	; 0x1394 <TMR2_getovs>
     112:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     116:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     11a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     11e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>

 	TMR2_start() ; /** START TIMER 2 **/
     122:	0e 94 b4 09 	call	0x1368	; 0x1368 <TMR2_start>

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     126:	39 c0       	rjmp	.+114    	; 0x19a <APP_setentry+0xae>
	{
 		LCD_goto(LCD_POS_0 , LCD_POS_1);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
 		LCD_writestr("Set Def. Rot");
     130:	80 e6       	ldi	r24, 0x60	; 96
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_writestr>

 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON PRESSED **/
     138:	ae 01       	movw	r20, r28
     13a:	4f 5f       	subi	r20, 0xFF	; 255
     13c:	5f 4f       	sbci	r21, 0xFF	; 255
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 70 03 	call	0x6e0	; 0x6e0 <Is_pressed>
 		TMR0_delayms(MS_DELAY_100); /** WAIT 100 MS FOR BUTTON TO SETTLE **/
     146:	64 e6       	ldi	r22, 0x64	; 100
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>
 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON IS STILL PRESSED **/
     152:	ae 01       	movw	r20, r28
     154:	4f 5f       	subi	r20, 0xFF	; 255
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <Is_pressed>

		if (u8_a_btnstatus) /** IF THE BUTTON PRESSED **/
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 23       	and	r24, r24
     164:	d1 f0       	breq	.+52     	; 0x19a <APP_setentry+0xae>
 		{
 			u8_g_rotationcounter++ ; /** INCREASE ROTATION COUNTER BY 1 **/
     166:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <u8_g_rotationcounter>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <u8_g_rotationcounter>

 			if (u8_g_rotationcounter == LEFT_ROTATION) /** LEFT ROTATION **/
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	41 f4       	brne	.+16     	; 0x184 <APP_setentry+0x98>
 			{
				LCD_goto(LCD_POS_1 , LCD_POS_1);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
				LCD_writestr("LEFT ROTATION");
     17a:	8d e6       	ldi	r24, 0x6D	; 109
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_writestr>
     182:	0a c0       	rjmp	.+20     	; 0x198 <APP_setentry+0xac>
			}
	 		else if(u8_g_rotationcounter == RIGHT_ROTATION) /** RIGHT ROTATION **/
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	41 f4       	brne	.+16     	; 0x198 <APP_setentry+0xac>
	 		{
 				LCD_goto(LCD_POS_1 , LCD_POS_1);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
 				LCD_writestr("RIGHT ROTATION");
     190:	8b e7       	ldi	r24, 0x7B	; 123
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_writestr>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
     198:	19 82       	std	Y+1, r1	; 0x01
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

 	TMR2_start() ; /** START TIMER 2 **/

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     19a:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     19e:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     1a2:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     1a6:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     1aa:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     1ae:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     1b2:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     1b6:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     1ba:	48 17       	cp	r20, r24
     1bc:	59 07       	cpc	r21, r25
     1be:	6a 07       	cpc	r22, r26
     1c0:	7b 07       	cpc	r23, r27
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <APP_setentry+0xda>
     1c4:	b1 cf       	rjmp	.-158    	; 0x128 <APP_setentry+0x3c>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
 		}
 	}
	
 	TMR2_stop(); /** STOP TIMER 2 **/
     1c6:	0e 94 bf 09 	call	0x137e	; 0x137e <TMR2_stop>
		
	do /** ACCEPT KEYPAD BUTTON 1 FROM USER **/
	{
 		KEYPAD_read(&u8_a_pressednum);
     1ca:	ce 01       	movw	r24, r28
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	0e 94 ee 03 	call	0x7dc	; 0x7dc <KEYPAD_read>
 	} while (u8_a_pressednum != START_BTN);
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	81 33       	cpi	r24, 0x31	; 49
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <APP_setentry+0xde>

 	 LCD_sendcmd(LCD_CLEAR);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 91 04 	call	0x922	; 0x922 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     1de:	64 e1       	ldi	r22, 0x14	; 20
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>
	 
	 LCD_goto(LCD_POS_0 , LCD_POS_2);
     1ea:	62 e0       	ldi	r22, 0x02	; 2
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
	 LCD_writestr("WAITING..");
     1f2:	8a e8       	ldi	r24, 0x8A	; 138
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_writestr>
	 
	 TMR0_delayms(MS_DELAY_2000); /** WAIT 2 SECONDS **/
     1fa:	60 ed       	ldi	r22, 0xD0	; 208
     1fc:	77 e0       	ldi	r23, 0x07	; 7
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>
	 
	 LCD_sendcmd(LCD_CLEAR);
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 91 04 	call	0x922	; 0x922 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     20c:	64 e1       	ldi	r22, 0x14	; 20
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>
	 
	 LCD_goto(LCD_POS_0, LCD_POS_1) ;
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
	 LCD_writestr("Dis:");
     220:	84 e9       	ldi	r24, 0x94	; 148
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_writestr>
	 
	 LCD_goto(LCD_POS_0, 8) ;
     228:	68 e0       	ldi	r22, 0x08	; 8
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
	 LCD_writechar('S');
     230:	83 e5       	ldi	r24, 0x53	; 83
     232:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_writechar>
	 LCD_writechar(':');
     236:	8a e3       	ldi	r24, 0x3A	; 58
     238:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_writechar>
	 
	 LCD_goto(LCD_POS_1, LCD_POS_1) ;
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
	 LCD_writestr("Dir:");
     244:	89 e9       	ldi	r24, 0x99	; 153
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_writestr>
	 
}
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <APP_start>:

void APP_start()
{	
	u32_g_tick = 0 , u32_g_delay = 0 ; /** VARIABLES TO HANDLE THE DELAY **/
     256:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
     25a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     25e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     262:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
     266:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <u32_g_delay>
     26a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <u32_g_delay+0x1>
     26e:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <u32_g_delay+0x2>
     272:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <u32_g_delay+0x3>
	
	US_sendtrigger(); /** SEND TRIGGER **/
     276:	0e 94 2c 07 	call	0xe58	; 0xe58 <US_sendtrigger>
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     27a:	88 e8       	ldi	r24, 0x88	; 136
     27c:	93 e1       	ldi	r25, 0x13	; 19
     27e:	0e 94 ca 09 	call	0x1394	; 0x1394 <TMR2_getovs>
     282:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     286:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     28a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     28e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     292:	9f c0       	rjmp	.+318    	; 0x3d2 <APP_start+0x17c>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
     294:	af e9       	ldi	r26, 0x9F	; 159
     296:	b6 e4       	ldi	r27, 0x46	; 70
     298:	0e 94 26 0b 	call	0x164c	; 0x164c <__umulhisi3>
     29c:	88 0f       	add	r24, r24
     29e:	89 2f       	mov	r24, r25
     2a0:	88 1f       	adc	r24, r24
     2a2:	99 0b       	sbc	r25, r25
     2a4:	91 95       	neg	r25
     2a6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <u8_g_distance>
			
			TMR2_start() ; /** START TIMER 2 **/
     2aa:	0e 94 b4 09 	call	0x1368	; 0x1368 <TMR2_start>
		
			while (u32_g_tick < u32_g_delay && (u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE )
     2ae:	38 c0       	rjmp	.+112    	; 0x320 <APP_start+0xca>
			{
				/** MOVE WITH 50% SPEED FOR 5 MIN **/
				MOTOR_turnon(MOTOR1_ID);
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     2bc:	82 e0       	ldi	r24, 0x02	; 2
     2be:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     2c2:	83 e0       	ldi	r24, 0x03	; 3
     2c4:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
				LCD_goto(LCD_POS_0, 10) ;
     2c8:	6a e0       	ldi	r22, 0x0A	; 10
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
				LCD_writestr("50%");
     2d0:	8e e9       	ldi	r24, 0x9E	; 158
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_writestr>
				TMR0_delaymicros(SPEED_50_ON_TIME);
     2d8:	60 ee       	ldi	r22, 0xE0	; 224
     2da:	74 ec       	ldi	r23, 0xC4	; 196
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 2d 09 	call	0x125a	; 0x125a <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     2f6:	83 e0       	ldi	r24, 0x03	; 3
     2f8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
				LCD_goto(LCD_POS_0, 5) ;
     2fc:	65 e0       	ldi	r22, 0x05	; 5
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
				LCD_writeint(u8_g_distance);
     304:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_writeint>
				LCD_goto(LCD_POS_1, 5) ;
     312:	65 e0       	ldi	r22, 0x05	; 5
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
				LCD_writechar('F');
     31a:	86 e4       	ldi	r24, 0x46	; 70
     31c:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_writechar>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
			
			TMR2_start() ; /** START TIMER 2 **/
		
			while (u32_g_tick < u32_g_delay && (u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE )
     320:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     324:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     328:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     32c:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     330:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     334:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     338:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     33c:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     340:	48 17       	cp	r20, r24
     342:	59 07       	cpc	r21, r25
     344:	6a 07       	cpc	r22, r26
     346:	7b 07       	cpc	r23, r27
     348:	40 f4       	brcc	.+16     	; 0x35a <APP_start+0x104>
     34a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     34e:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     352:	80 3b       	cpi	r24, 0xB0	; 176
     354:	90 48       	sbci	r25, 0x80	; 128
     356:	08 f0       	brcs	.+2      	; 0x35a <APP_start+0x104>
     358:	ab cf       	rjmp	.-170    	; 0x2b0 <APP_start+0x5a>
				LCD_writeint(u8_g_distance);
				LCD_goto(LCD_POS_1, 5) ;
				LCD_writechar('F');
			}
					
			TMR2_stop() ; /** STOP TIMER2 AFTER THE 5 SECONDS **/
     35a:	0e 94 bf 09 	call	0x137e	; 0x137e <TMR2_stop>
					
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     36a:	82 e0       	ldi	r24, 0x02	; 2
     36c:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     370:	83 e0       	ldi	r24, 0x03	; 3
     372:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
			LCD_goto(LCD_POS_0, 10) ;
     376:	6a e0       	ldi	r22, 0x0A	; 10
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
			LCD_writestr("30%");
     37e:	82 ea       	ldi	r24, 0xA2	; 162
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_writestr>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     386:	60 e5       	ldi	r22, 0x50	; 80
     388:	70 e5       	ldi	r23, 0x50	; 80
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 2d 09 	call	0x125a	; 0x125a <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     39e:	82 e0       	ldi	r24, 0x02	; 2
     3a0:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
			LCD_goto(LCD_POS_0, 5) ;
     3aa:	65 e0       	ldi	r22, 0x05	; 5
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
			LCD_writeint(u8_g_distance);
     3b2:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_writeint>
			LCD_goto(LCD_POS_1, 5) ;
     3c0:	65 e0       	ldi	r22, 0x05	; 5
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
			LCD_writechar('F');
     3c8:	86 e4       	ldi	r24, 0x46	; 70
     3ca:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_writechar>
			US_sendtrigger(); /** SEND TRIGGER **/
     3ce:	0e 94 2c 07 	call	0xe58	; 0xe58 <US_sendtrigger>
	
	US_sendtrigger(); /** SEND TRIGGER **/
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     3d2:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <u16_g_time>
     3d6:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     3da:	20 3b       	cpi	r18, 0xB0	; 176
     3dc:	80 e8       	ldi	r24, 0x80	; 128
     3de:	38 07       	cpc	r19, r24
     3e0:	08 f0       	brcs	.+2      	; 0x3e4 <APP_start+0x18e>
     3e2:	58 cf       	rjmp	.-336    	; 0x294 <APP_start+0x3e>
     3e4:	3a c0       	rjmp	.+116    	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
	{
		/** CONTINUE WITH 30% **/
		MOTOR_turnon(MOTOR1_ID);
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
		LCD_goto(LCD_POS_0, 10) ;
     3fe:	6a e0       	ldi	r22, 0x0A	; 10
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
		LCD_writestr("30%");
     406:	82 ea       	ldi	r24, 0xA2	; 162
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 62 05 	call	0xac4	; 0xac4 <LCD_writestr>
		TMR0_delaymicros(SPEED_30_ON_TIME);
     40e:	60 e5       	ldi	r22, 0x50	; 80
     410:	70 e5       	ldi	r23, 0x50	; 80
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 2d 09 	call	0x125a	; 0x125a <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     42c:	83 e0       	ldi	r24, 0x03	; 3
     42e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
		LCD_goto(LCD_POS_0,5) ;
     432:	65 e0       	ldi	r22, 0x05	; 5
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
		LCD_writeint(u8_g_distance);
     43a:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_writeint>
		LCD_goto(LCD_POS_1, 5) ;
     448:	65 e0       	ldi	r22, 0x05	; 5
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
		LCD_writechar('F');
     450:	86 e4       	ldi	r24, 0x46	; 70
     452:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_writechar>
		US_sendtrigger(); /** SEND TRIGGER **/
     456:	0e 94 2c 07 	call	0xe58	; 0xe58 <US_sendtrigger>
			LCD_goto(LCD_POS_1, 5) ;
			LCD_writechar('F');
			US_sendtrigger(); /** SEND TRIGGER **/
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
     45a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     45e:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     462:	80 36       	cpi	r24, 0x60	; 96
     464:	96 43       	sbci	r25, 0x36	; 54
     466:	08 f0       	brcs	.+2      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     468:	be cf       	rjmp	.-132    	; 0x3e6 <APP_start+0x190>
		LCD_goto(LCD_POS_1, 5) ;
		LCD_writechar('F');
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	
	u32_g_tick = 0 ;
     46a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
     46e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     472:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     476:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     47a:	84 ef       	ldi	r24, 0xF4	; 244
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 ca 09 	call	0x1394	; 0x1394 <TMR2_getovs>
     482:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     486:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     48a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     48e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     492:	40 c0       	rjmp	.+128    	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
	{
		/** STOP THEN ROTATE **/
		MOTOR_turnoff(MOTOR1_ID);
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
		
		LCD_goto(LCD_POS_0, 5) ;
     4ac:	65 e0       	ldi	r22, 0x05	; 5
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
		LCD_writeint(u8_g_distance);
     4b4:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_writeint>
		LCD_goto(LCD_POS_1, 5) ;
     4c2:	65 e0       	ldi	r22, 0x05	; 5
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
		LCD_writechar('R');
     4ca:	82 e5       	ldi	r24, 0x52	; 82
     4cc:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_writechar>
		TMR2_start() ; /** START TIMER 2 **/
     4d0:	0e 94 b4 09 	call	0x1368	; 0x1368 <TMR2_start>
		while (u32_g_tick < u32_g_delay)
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     4dc:	83 e0       	ldi	r24, 0x03	; 3
     4de:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
		LCD_goto(LCD_POS_0, 5) ;
		LCD_writeint(u8_g_distance);
		LCD_goto(LCD_POS_1, 5) ;
		LCD_writechar('R');
		TMR2_start() ; /** START TIMER 2 **/
		while (u32_g_tick < u32_g_delay)
     4e2:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     4e6:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     4ea:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     4ee:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     4f2:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     4f6:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     4fa:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     4fe:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     502:	48 17       	cp	r20, r24
     504:	59 07       	cpc	r21, r25
     506:	6a 07       	cpc	r22, r26
     508:	7b 07       	cpc	r23, r27
     50a:	28 f3       	brcs	.-54     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop(); /** STOP TIMER 2 **/
     50c:	0e 94 bf 09 	call	0x137e	; 0x137e <TMR2_stop>
			
		US_sendtrigger(); /** SEND TRIGGER **/
     510:	0e 94 2c 07 	call	0xe58	; 0xe58 <US_sendtrigger>
	}
	
	u32_g_tick = 0 ;
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     514:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     518:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     51c:	80 54       	subi	r24, 0x40	; 64
     51e:	94 42       	sbci	r25, 0x24	; 36
     520:	80 32       	cpi	r24, 0x20	; 32
     522:	92 41       	sbci	r25, 0x12	; 18
     524:	08 f4       	brcc	.+2      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
     526:	b6 cf       	rjmp	.-148    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     528:	52 c0       	rjmp	.+164    	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
	{
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	0e 94 a0 06 	call	0xd40	; 0xd40 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR2_ID);
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0e 94 a0 06 	call	0xd40	; 0xd40 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR3_ID);
     536:	82 e0       	ldi	r24, 0x02	; 2
     538:	0e 94 a0 06 	call	0xd40	; 0xd40 <MOTOR_rotateanticlkdir>
		MOTOR_rotateanticlkdir(MOTOR4_ID);
     53c:	83 e0       	ldi	r24, 0x03	; 3
     53e:	0e 94 a0 06 	call	0xd40	; 0xd40 <MOTOR_rotateanticlkdir>
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     542:	32 c0       	rjmp	.+100    	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
		   {
			  /** GO BACKWARDS WITH 30% SPEED **/
			  MOTOR_turnon(MOTOR1_ID);
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
			  MOTOR_turnon(MOTOR2_ID);
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
		      MOTOR_turnon(MOTOR3_ID);
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
			  MOTOR_turnon(MOTOR4_ID);
     556:	83 e0       	ldi	r24, 0x03	; 3
     558:	0e 94 00 07 	call	0xe00	; 0xe00 <MOTOR_turnon>
			  LCD_goto(LCD_POS_0, 5) ;
     55c:	65 e0       	ldi	r22, 0x05	; 5
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
			  TMR0_delaymicros(SPEED_30_ON_TIME);
     564:	60 e5       	ldi	r22, 0x50	; 80
     566:	70 e5       	ldi	r23, 0x50	; 80
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 2d 09 	call	0x125a	; 0x125a <TMR0_delaymicros>
			
			  MOTOR_turnoff(MOTOR1_ID);
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR2_ID);
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR3_ID);
     57c:	82 e0       	ldi	r24, 0x02	; 2
     57e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR4_ID);
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MOTOR_turnoff>
			  LCD_writeint(u8_g_distance);
     588:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 8d 05 	call	0xb1a	; 0xb1a <LCD_writeint>
			  LCD_goto(LCD_POS_1, 5) ;
     596:	65 e0       	ldi	r22, 0x05	; 5
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	0e 94 75 05 	call	0xaea	; 0xaea <LCD_goto>
			  LCD_writechar('B');
     59e:	82 e4       	ldi	r24, 0x42	; 66
     5a0:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_writechar>
			  US_sendtrigger(); /** SEND TRIGGER **/
     5a4:	0e 94 2c 07 	call	0xe58	; 0xe58 <US_sendtrigger>
		MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
		MOTOR_rotateanticlkdir(MOTOR2_ID);
		MOTOR_rotateanticlkdir(MOTOR3_ID);
		MOTOR_rotateanticlkdir(MOTOR4_ID);
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     5a8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     5ac:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     5b0:	80 31       	cpi	r24, 0x10	; 16
     5b2:	96 42       	sbci	r25, 0x26	; 38
     5b4:	38 f2       	brcs	.-114    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
			  LCD_goto(LCD_POS_1, 5) ;
			  LCD_writechar('B');
			  US_sendtrigger(); /** SEND TRIGGER **/
		   }
		
			MOTOR_rotateclkdir(MOTOR1_ID); /** RETURN TO DEFAULT DIRECTION  **/
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 66 06 	call	0xccc	; 0xccc <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR2_ID);
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 66 06 	call	0xccc	; 0xccc <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR3_ID);
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	0e 94 66 06 	call	0xccc	; 0xccc <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR4_ID);
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 66 06 	call	0xccc	; 0xccc <MOTOR_rotateclkdir>
		TMR2_stop(); /** STOP TIMER 2 **/
			
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
     5ce:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     5d2:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     5d6:	80 34       	cpi	r24, 0x40	; 64
     5d8:	94 42       	sbci	r25, 0x24	; 36
     5da:	08 f4       	brcc	.+2      	; 0x5de <__EEPROM_REGION_LENGTH__+0x1de>
     5dc:	a6 cf       	rjmp	.-180    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
			MOTOR_rotateclkdir(MOTOR2_ID);
			MOTOR_rotateclkdir(MOTOR3_ID);
			MOTOR_rotateclkdir(MOTOR4_ID);
		
	}
}
     5de:	08 95       	ret

000005e0 <__vector_1>:



/** EXTI0 **/
ISR(INT0_vect)
{
     5e0:	1f 92       	push	r1
     5e2:	0f 92       	push	r0
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	0f 92       	push	r0
     5e8:	11 24       	eor	r1, r1
     5ea:	2f 93       	push	r18
     5ec:	3f 93       	push	r19
     5ee:	4f 93       	push	r20
     5f0:	5f 93       	push	r21
     5f2:	6f 93       	push	r22
     5f4:	7f 93       	push	r23
     5f6:	8f 93       	push	r24
     5f8:	9f 93       	push	r25
     5fa:	af 93       	push	r26
     5fc:	bf 93       	push	r27
     5fe:	ef 93       	push	r30
     600:	ff 93       	push	r31
	u8_echoedge++ ; /** INCREASE THE ECHO BY 1 **/
     602:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <u8_echoedge>
     606:	8f 5f       	subi	r24, 0xFF	; 255
     608:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <u8_echoedge>
	
	if(u8_echoedge == FIRST_EDGE ) /** FIRST CHANGE (RISING EDGE) **/
     60c:	81 30       	cpi	r24, 0x01	; 1
     60e:	19 f4       	brne	.+6      	; 0x616 <__vector_1+0x36>
	{
		ICU_start(); /** START ICU / COUNTING **/
     610:	0e 94 a7 03 	call	0x74e	; 0x74e <ICU_start>
     614:	1f c0       	rjmp	.+62     	; 0x654 <__vector_1+0x74>
	}
	
	else if(u8_echoedge == SECOND_EDGE) /** SECOND CHANGE (FALLING EDGE) **/
     616:	82 30       	cpi	r24, 0x02	; 2
     618:	e9 f4       	brne	.+58     	; 0x654 <__vector_1+0x74>
	{
		ICU_stop(); /** STOP ICU / COUNTING **/
     61a:	0e 94 ad 03 	call	0x75a	; 0x75a <ICU_stop>
		
		u16_g_time = ICU_getvalue(); /** GET PULSE LENGTH **/
     61e:	0e 94 95 03 	call	0x72a	; 0x72a <ICU_getvalue>
     622:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <u16_g_time+0x1>
     626:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <u16_g_time>
		
		ICU_setcounterval(INITIATE_COUNTER_VAL); /** START COUNTING FROM ZERO **/
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 aa 03 	call	0x754	; 0x754 <ICU_setcounterval>
				
		u8_echoedge = 0 ;     /** REINITIALIZE ECHO EDGE TO 0 TO REPEAT IN ANY CHANGE AGAIN **/
     632:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <u8_echoedge>
		
		u8_g_distance = (u16_g_time / US_DIVIDER) ; /** CALCULATE THE DISTANCE **/
     636:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <u16_g_time>
     63a:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     63e:	af e9       	ldi	r26, 0x9F	; 159
     640:	b6 e4       	ldi	r27, 0x46	; 70
     642:	0e 94 26 0b 	call	0x164c	; 0x164c <__umulhisi3>
     646:	88 0f       	add	r24, r24
     648:	89 2f       	mov	r24, r25
     64a:	88 1f       	adc	r24, r24
     64c:	99 0b       	sbc	r25, r25
     64e:	91 95       	neg	r25
     650:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <u8_g_distance>
	}
}
     654:	ff 91       	pop	r31
     656:	ef 91       	pop	r30
     658:	bf 91       	pop	r27
     65a:	af 91       	pop	r26
     65c:	9f 91       	pop	r25
     65e:	8f 91       	pop	r24
     660:	7f 91       	pop	r23
     662:	6f 91       	pop	r22
     664:	5f 91       	pop	r21
     666:	4f 91       	pop	r20
     668:	3f 91       	pop	r19
     66a:	2f 91       	pop	r18
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_9>:


/** TIMER 1 OVERFLOW **/ 
ISR(TIMER1_OVF_vect)
{
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
	/** DO NOTHING **/ 
}
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <__vector_5>:

/** TIMER 0 OVERFLOW  **/
ISR(TIMER2_OVF_vect)
{
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
     694:	8f 93       	push	r24
     696:	9f 93       	push	r25
     698:	af 93       	push	r26
     69a:	bf 93       	push	r27
	u32_g_tick++ ; /** INCREASE TICKS **/  
     69c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     6a0:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__data_end+0x1>
     6a4:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <__data_end+0x2>
     6a8:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <__data_end+0x3>
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	a1 1d       	adc	r26, r1
     6b0:	b1 1d       	adc	r27, r1
     6b2:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
     6b6:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__data_end+0x1>
     6ba:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <__data_end+0x2>
     6be:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <__data_end+0x3>
}
     6c2:	bf 91       	pop	r27
     6c4:	af 91       	pop	r26
     6c6:	9f 91       	pop	r25
     6c8:	8f 91       	pop	r24
     6ca:	0f 90       	pop	r0
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	0f 90       	pop	r0
     6d0:	1f 90       	pop	r1
     6d2:	18 95       	reti

000006d4 <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(void)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(BUTTON1_PORT , BUTTON1_PIN , DIO_PIN_INPUT);
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	63 e0       	ldi	r22, 0x03	; 3
     6d8:	83 e0       	ldi	r24, 0x03	; 3
     6da:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
     6de:	08 95       	ret

000006e0 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
en_a_button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	1f 92       	push	r1
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	8a 01       	movw	r16, r20
	en_a_button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
     6f0:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
     6f2:	ae 01       	movw	r20, r28
     6f4:	4f 5f       	subi	r20, 0xFF	; 255
     6f6:	5f 4f       	sbci	r21, 0xFF	; 255
     6f8:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_readpin>
	
	if (!pin_status) 
     6fc:	81 11       	cpse	r24, r1
     6fe:	05 c0       	rjmp	.+10     	; 0x70a <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	f8 01       	movw	r30, r16
     704:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	04 c0       	rjmp	.+8      	; 0x712 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	f8 01       	movw	r30, r16
     70e:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     710:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
     712:	0f 90       	pop	r0
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	08 95       	ret

0000071e <ICU_init>:
/**************************************************************/
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	TMR1_init(); /** INITIALIZE TIMER 1 MODULE **/
     71e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <TMR1_init>
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
     722:	0e 94 be 08 	call	0x117c	; 0x117c <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	08 95       	ret

0000072a <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	00 d0       	rcall	.+0      	; 0x730 <ICU_getvalue+0x6>
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
     734:	1a 82       	std	Y+2, r1	; 0x02
     736:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
     738:	ce 01       	movw	r24, r28
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	0e 94 94 09 	call	0x1328	; 0x1328 <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
     740:	89 81       	ldd	r24, Y+1	; 0x01
     742:	9a 81       	ldd	r25, Y+2	; 0x02
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <ICU_start>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_start(void)
{
	TMR1_start(); /** START TIMER1 COUNTING **/
     74e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <TMR1_start>
     752:	08 95       	ret

00000754 <ICU_setcounterval>:
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_setcounterval(uint16t u16_a_counterval)
{
	TMR1_setcounterval(u16_a_counterval);
     754:	0e 94 9a 09 	call	0x1334	; 0x1334 <TMR1_setcounterval>
     758:	08 95       	ret

0000075a <ICU_stop>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_stop(void)
{
	TMR1_stop();  /** STOP TIMER1 COUNTING **/
     75a:	0e 94 89 09 	call	0x1312	; 0x1312 <TMR1_stop>
     75e:	08 95       	ret

00000760 <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	65 e0       	ldi	r22, 0x05	; 5
     764:	83 e0       	ldi	r24, 0x03	; 3
     766:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	66 e0       	ldi	r22, 0x06	; 6
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
     774:	41 e0       	ldi	r20, 0x01	; 1
     776:	67 e0       	ldi	r22, 0x07	; 7
     778:	83 e0       	ldi	r24, 0x03	; 3
     77a:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>

	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	83 e0       	ldi	r24, 0x03	; 3
     784:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	83 e0       	ldi	r24, 0x03	; 3
     78e:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	64 e0       	ldi	r22, 0x04	; 4
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
	DIO_setpinvalue(ROW_PORT_DATA , R3 ,  DIO_PIN_LOW);


    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
     79c:	41 e0       	ldi	r20, 0x01	; 1
     79e:	65 e0       	ldi	r22, 0x05	; 5
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	66 e0       	ldi	r22, 0x06	; 6
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	67 e0       	ldi	r22, 0x07	; 7
     7b4:	83 e0       	ldi	r24, 0x03	; 3
     7b6:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
     7c4:	41 e0       	ldi	r20, 0x01	; 1
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	83 e0       	ldi	r24, 0x03	; 3
     7ca:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	64 e0       	ldi	r22, 0x04	; 4
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	08 95       	ret

000007dc <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <KEYPAD_read+0xe>
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <KEYPAD_read+0x10>
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <KEYPAD_read+0x12>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
     7f4:	85 e0       	ldi	r24, 0x05	; 5
     7f6:	89 83       	std	Y+1, r24	; 0x01
     7f8:	86 e0       	ldi	r24, 0x06	; 6
     7fa:	8a 83       	std	Y+2, r24	; 0x02
     7fc:	87 e0       	ldi	r24, 0x07	; 7
     7fe:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
     800:	1c 82       	std	Y+4, r1	; 0x04
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	8d 83       	std	Y+5, r24	; 0x05
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	8e 83       	std	Y+6, r24	; 0x06

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     80a:	00 e0       	ldi	r16, 0x00	; 0
     80c:	79 c0       	rjmp	.+242    	; 0x900 <__stack+0xa1>
    {
		if (u8_a_rowiterator == 3 )
     80e:	03 30       	cpi	r16, 0x03	; 3
     810:	39 f4       	brne	.+14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	83 e0       	ldi	r24, 0x03	; 3
     818:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     81c:	10 e0       	ldi	r17, 0x00	; 0
     81e:	62 c0       	rjmp	.+196    	; 0x8e4 <__stack+0x85>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
		}
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
     820:	e1 e0       	ldi	r30, 0x01	; 1
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	ec 0f       	add	r30, r28
     826:	fd 1f       	adc	r31, r29
     828:	e0 0f       	add	r30, r16
     82a:	f1 1d       	adc	r31, r1
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	60 81       	ld	r22, Z
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     836:	f2 cf       	rjmp	.-28     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
     838:	e4 e0       	ldi	r30, 0x04	; 4
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	ec 0f       	add	r30, r28
     83e:	fd 1f       	adc	r31, r29
     840:	e1 0f       	add	r30, r17
     842:	f1 1d       	adc	r31, r1
     844:	a7 01       	movw	r20, r14
     846:	60 81       	ld	r22, Z
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	0e 94 42 08 	call	0x1084	; 0x1084 <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
     84e:	f7 01       	movw	r30, r14
     850:	80 81       	ld	r24, Z
     852:	81 11       	cpse	r24, r1
     854:	46 c0       	rjmp	.+140    	; 0x8e2 <__stack+0x83>
            {
                if (u8_a_rowiterator == 0)
     856:	01 11       	cpse	r16, r1
     858:	11 c0       	rjmp	.+34     	; 0x87c <__stack+0x1d>
                {
                    if (u8_a_coulumniterator == 0)
     85a:	11 11       	cpse	r17, r1
     85c:	03 c0       	rjmp	.+6      	; 0x864 <__stack+0x5>
                    {
                        *u8_a_value = '1' ;
     85e:	81 e3       	ldi	r24, 0x31	; 49
     860:	80 83       	st	Z, r24
     862:	33 c0       	rjmp	.+102    	; 0x8ca <__stack+0x6b>
                    }
                    else if (u8_a_coulumniterator == 1)
     864:	11 30       	cpi	r17, 0x01	; 1
     866:	21 f4       	brne	.+8      	; 0x870 <__stack+0x11>
                    {
                        *u8_a_value = '2' ;
     868:	82 e3       	ldi	r24, 0x32	; 50
     86a:	f7 01       	movw	r30, r14
     86c:	80 83       	st	Z, r24
     86e:	2d c0       	rjmp	.+90     	; 0x8ca <__stack+0x6b>
                    }
                    else if (u8_a_coulumniterator == 2)
     870:	12 30       	cpi	r17, 0x02	; 2
     872:	59 f5       	brne	.+86     	; 0x8ca <__stack+0x6b>
                    {
                        *u8_a_value = '3' ;
     874:	83 e3       	ldi	r24, 0x33	; 51
     876:	f7 01       	movw	r30, r14
     878:	80 83       	st	Z, r24
     87a:	27 c0       	rjmp	.+78     	; 0x8ca <__stack+0x6b>
                    }
                }

                else if (u8_a_rowiterator == 1)
     87c:	01 30       	cpi	r16, 0x01	; 1
     87e:	91 f4       	brne	.+36     	; 0x8a4 <__stack+0x45>
                {
                    if (u8_a_coulumniterator == 0)
     880:	11 11       	cpse	r17, r1
     882:	04 c0       	rjmp	.+8      	; 0x88c <__stack+0x2d>
                    {
                        *u8_a_value = '4' ;
     884:	84 e3       	ldi	r24, 0x34	; 52
     886:	f7 01       	movw	r30, r14
     888:	80 83       	st	Z, r24
     88a:	1f c0       	rjmp	.+62     	; 0x8ca <__stack+0x6b>
                    }
                    else if (u8_a_coulumniterator == 1)
     88c:	11 30       	cpi	r17, 0x01	; 1
     88e:	21 f4       	brne	.+8      	; 0x898 <__stack+0x39>
                    {
                        *u8_a_value = '5' ;
     890:	85 e3       	ldi	r24, 0x35	; 53
     892:	f7 01       	movw	r30, r14
     894:	80 83       	st	Z, r24
     896:	19 c0       	rjmp	.+50     	; 0x8ca <__stack+0x6b>
                    }
                    else if (u8_a_coulumniterator == 2)
     898:	12 30       	cpi	r17, 0x02	; 2
     89a:	b9 f4       	brne	.+46     	; 0x8ca <__stack+0x6b>
                    {
                        *u8_a_value = '6' ;
     89c:	86 e3       	ldi	r24, 0x36	; 54
     89e:	f7 01       	movw	r30, r14
     8a0:	80 83       	st	Z, r24
     8a2:	13 c0       	rjmp	.+38     	; 0x8ca <__stack+0x6b>
                    }
                }

                else if (u8_a_rowiterator == 2)
     8a4:	02 30       	cpi	r16, 0x02	; 2
     8a6:	89 f4       	brne	.+34     	; 0x8ca <__stack+0x6b>
                {
                    if (u8_a_coulumniterator == 0)
     8a8:	11 11       	cpse	r17, r1
     8aa:	04 c0       	rjmp	.+8      	; 0x8b4 <__stack+0x55>
                    {
                        *u8_a_value = '7' ;
     8ac:	87 e3       	ldi	r24, 0x37	; 55
     8ae:	f7 01       	movw	r30, r14
     8b0:	80 83       	st	Z, r24
     8b2:	0b c0       	rjmp	.+22     	; 0x8ca <__stack+0x6b>
                    }
                    else if (u8_a_coulumniterator == 1)
     8b4:	11 30       	cpi	r17, 0x01	; 1
     8b6:	21 f4       	brne	.+8      	; 0x8c0 <__stack+0x61>
                    {
                        *u8_a_value = '8' ;
     8b8:	88 e3       	ldi	r24, 0x38	; 56
     8ba:	f7 01       	movw	r30, r14
     8bc:	80 83       	st	Z, r24
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <__stack+0x6b>
                    }
                    else if (u8_a_coulumniterator == 2)
     8c0:	12 30       	cpi	r17, 0x02	; 2
     8c2:	19 f4       	brne	.+6      	; 0x8ca <__stack+0x6b>
                    {
                        *u8_a_value = '9' ;
     8c4:	89 e3       	ldi	r24, 0x39	; 57
     8c6:	f7 01       	movw	r30, r14
     8c8:	80 83       	st	Z, r24
                    }
                }
				
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     8ca:	e1 e0       	ldi	r30, 0x01	; 1
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	ec 0f       	add	r30, r28
     8d0:	fd 1f       	adc	r31, r29
     8d2:	e0 0f       	add	r30, r16
     8d4:	f1 1d       	adc	r31, r1
     8d6:	60 81       	ld	r22, Z
     8d8:	83 e0       	ldi	r24, 0x03	; 3
     8da:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_togglepin>
				return KEYPAD_readSuccess;
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	13 c0       	rjmp	.+38     	; 0x908 <__stack+0xa9>
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     8e2:	1f 5f       	subi	r17, 0xFF	; 255
     8e4:	13 30       	cpi	r17, 0x03	; 3
     8e6:	08 f4       	brcc	.+2      	; 0x8ea <__stack+0x8b>
     8e8:	a7 cf       	rjmp	.-178    	; 0x838 <__DATA_REGION_LENGTH__+0x38>
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
				return KEYPAD_readSuccess;
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     8ea:	e1 e0       	ldi	r30, 0x01	; 1
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	ec 0f       	add	r30, r28
     8f0:	fd 1f       	adc	r31, r29
     8f2:	e0 0f       	add	r30, r16
     8f4:	f1 1d       	adc	r31, r1
     8f6:	60 81       	ld	r22, Z
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	0e 94 80 08 	call	0x1100	; 0x1100 <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     8fe:	0f 5f       	subi	r16, 0xFF	; 255
     900:	03 30       	cpi	r16, 0x03	; 3
     902:	08 f4       	brcc	.+2      	; 0x906 <__stack+0xa7>
     904:	84 cf       	rjmp	.-248    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
    }
    return KEYPAD_readFail;
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	26 96       	adiw	r28, 0x06	; 6
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	08 95       	ret

00000922 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     922:	cf 93       	push	r28
     924:	c8 2f       	mov	r28, r24
     926:	0e 94 ca 08 	call	0x1194	; 0x1194 <TMR0_init>
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	62 e0       	ldi	r22, 0x02	; 2
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	63 e0       	ldi	r22, 0x03	; 3
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     948:	8b b3       	in	r24, 0x1b	; 27
     94a:	9c 2f       	mov	r25, r28
     94c:	90 7f       	andi	r25, 0xF0	; 240
     94e:	8f 70       	andi	r24, 0x0F	; 15
     950:	89 2b       	or	r24, r25
     952:	8b bb       	out	0x1b, r24	; 27
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	63 e0       	ldi	r22, 0x03	; 3
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	63 e0       	ldi	r22, 0x03	; 3
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     974:	20 e1       	ldi	r18, 0x10	; 16
     976:	c2 9f       	mul	r28, r18
     978:	c0 01       	movw	r24, r0
     97a:	11 24       	eor	r1, r1
     97c:	9b b3       	in	r25, 0x1b	; 27
     97e:	9f 70       	andi	r25, 0x0F	; 15
     980:	89 2b       	or	r24, r25
     982:	8b bb       	out	0x1b, r24	; 27
     984:	41 e0       	ldi	r20, 0x01	; 1
     986:	63 e0       	ldi	r22, 0x03	; 3
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	63 e0       	ldi	r22, 0x03	; 3
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     9a4:	65 e0       	ldi	r22, 0x05	; 5
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>
     9b0:	cf 91       	pop	r28
     9b2:	08 95       	ret

000009b4 <LCD_init>:
     9b4:	0e 94 ca 08 	call	0x1194	; 0x1194 <TMR0_init>
     9b8:	41 e0       	ldi	r20, 0x01	; 1
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	62 e0       	ldi	r22, 0x02	; 2
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
     9cc:	41 e0       	ldi	r20, 0x01	; 1
     9ce:	63 e0       	ldi	r22, 0x03	; 3
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
     9d6:	41 e0       	ldi	r20, 0x01	; 1
     9d8:	64 e0       	ldi	r22, 0x04	; 4
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	65 e0       	ldi	r22, 0x05	; 5
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
     9ea:	41 e0       	ldi	r20, 0x01	; 1
     9ec:	66 e0       	ldi	r22, 0x06	; 6
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
     9f4:	41 e0       	ldi	r20, 0x01	; 1
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
     9fe:	64 e1       	ldi	r22, 0x14	; 20
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>
     a0a:	83 e3       	ldi	r24, 0x33	; 51
     a0c:	0e 94 91 04 	call	0x922	; 0x922 <LCD_sendcmd>
     a10:	82 e3       	ldi	r24, 0x32	; 50
     a12:	0e 94 91 04 	call	0x922	; 0x922 <LCD_sendcmd>
     a16:	88 e2       	ldi	r24, 0x28	; 40
     a18:	0e 94 91 04 	call	0x922	; 0x922 <LCD_sendcmd>
     a1c:	8c e0       	ldi	r24, 0x0C	; 12
     a1e:	0e 94 91 04 	call	0x922	; 0x922 <LCD_sendcmd>
     a22:	86 e0       	ldi	r24, 0x06	; 6
     a24:	0e 94 91 04 	call	0x922	; 0x922 <LCD_sendcmd>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	0e 94 91 04 	call	0x922	; 0x922 <LCD_sendcmd>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	0e 94 91 04 	call	0x922	; 0x922 <LCD_sendcmd>
     a34:	08 95       	ret

00000a36 <LCD_writechar>:
     a36:	cf 93       	push	r28
     a38:	c8 2f       	mov	r28, r24
     a3a:	41 e0       	ldi	r20, 0x01	; 1
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     a44:	40 e0       	ldi	r20, 0x00	; 0
     a46:	62 e0       	ldi	r22, 0x02	; 2
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	63 e0       	ldi	r22, 0x03	; 3
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     a58:	8b b3       	in	r24, 0x1b	; 27
     a5a:	9c 2f       	mov	r25, r28
     a5c:	90 7f       	andi	r25, 0xF0	; 240
     a5e:	8f 70       	andi	r24, 0x0F	; 15
     a60:	89 2b       	or	r24, r25
     a62:	8b bb       	out	0x1b, r24	; 27
     a64:	41 e0       	ldi	r20, 0x01	; 1
     a66:	63 e0       	ldi	r22, 0x03	; 3
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	63 e0       	ldi	r22, 0x03	; 3
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     a84:	20 e1       	ldi	r18, 0x10	; 16
     a86:	c2 9f       	mul	r28, r18
     a88:	c0 01       	movw	r24, r0
     a8a:	11 24       	eor	r1, r1
     a8c:	9b b3       	in	r25, 0x1b	; 27
     a8e:	9f 70       	andi	r25, 0x0F	; 15
     a90:	89 2b       	or	r24, r25
     a92:	8b bb       	out	0x1b, r24	; 27
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	63 e0       	ldi	r22, 0x03	; 3
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	63 e0       	ldi	r22, 0x03	; 3
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
     ab4:	65 e0       	ldi	r22, 0x05	; 5
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <TMR0_delayms>
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <LCD_writestr>:
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	8c 01       	movw	r16, r24
     acc:	c0 e0       	ldi	r28, 0x00	; 0
     ace:	03 c0       	rjmp	.+6      	; 0xad6 <LCD_writestr+0x12>
     ad0:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_writechar>
     ad4:	cf 5f       	subi	r28, 0xFF	; 255
     ad6:	f8 01       	movw	r30, r16
     ad8:	ec 0f       	add	r30, r28
     ada:	f1 1d       	adc	r31, r1
     adc:	80 81       	ld	r24, Z
     ade:	81 11       	cpse	r24, r1
     ae0:	f7 cf       	rjmp	.-18     	; 0xad0 <LCD_writestr+0xc>
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	08 95       	ret

00000aea <LCD_goto>:
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	00 d0       	rcall	.+0      	; 0xaf0 <LCD_goto+0x6>
     af0:	cd b7       	in	r28, 0x3d	; 61
     af2:	de b7       	in	r29, 0x3e	; 62
     af4:	90 e8       	ldi	r25, 0x80	; 128
     af6:	99 83       	std	Y+1, r25	; 0x01
     af8:	90 ec       	ldi	r25, 0xC0	; 192
     afa:	9a 83       	std	Y+2, r25	; 0x02
     afc:	e1 e0       	ldi	r30, 0x01	; 1
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	ec 0f       	add	r30, r28
     b02:	fd 1f       	adc	r31, r29
     b04:	e8 0f       	add	r30, r24
     b06:	f1 1d       	adc	r31, r1
     b08:	80 81       	ld	r24, Z
     b0a:	86 0f       	add	r24, r22
     b0c:	0e 94 91 04 	call	0x922	; 0x922 <LCD_sendcmd>
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	2a 97       	sbiw	r28, 0x0a	; 10
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	de bf       	out	0x3e, r29	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     b30:	99 23       	and	r25, r25
     b32:	dc f5       	brge	.+118    	; 0xbaa <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
     b34:	90 95       	com	r25
     b36:	80 95       	com	r24
     b38:	70 95       	com	r23
     b3a:	61 95       	neg	r22
     b3c:	7f 4f       	sbci	r23, 0xFF	; 255
     b3e:	8f 4f       	sbci	r24, 0xFF	; 255
     b40:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     b42:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     b44:	13 c0       	rjmp	.+38     	; 0xb6c <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     b46:	2a e0       	ldi	r18, 0x0A	; 10
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodsi4>
     b52:	e1 e0       	ldi	r30, 0x01	; 1
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	ec 0f       	add	r30, r28
     b58:	fd 1f       	adc	r31, r29
     b5a:	e1 0f       	add	r30, r17
     b5c:	f1 1d       	adc	r31, r1
     b5e:	60 5d       	subi	r22, 0xD0	; 208
     b60:	60 83       	st	Z, r22
			s32_a_num /= 10;
     b62:	62 2f       	mov	r22, r18
     b64:	73 2f       	mov	r23, r19
     b66:	84 2f       	mov	r24, r20
     b68:	95 2f       	mov	r25, r21
			i++;
     b6a:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     b6c:	16 16       	cp	r1, r22
     b6e:	17 06       	cpc	r1, r23
     b70:	18 06       	cpc	r1, r24
     b72:	19 06       	cpc	r1, r25
     b74:	44 f3       	brlt	.-48     	; 0xb46 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     b76:	e1 e0       	ldi	r30, 0x01	; 1
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	ec 0f       	add	r30, r28
     b7c:	fd 1f       	adc	r31, r29
     b7e:	e1 0f       	add	r30, r17
     b80:	f1 1d       	adc	r31, r1
     b82:	8d e2       	ldi	r24, 0x2D	; 45
     b84:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     b86:	1f 5f       	subi	r17, 0xFF	; 255
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
     b8a:	e1 2f       	mov	r30, r17
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	31 97       	sbiw	r30, 0x01	; 1
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	8c 0f       	add	r24, r28
     b96:	9d 1f       	adc	r25, r29
     b98:	e8 0f       	add	r30, r24
     b9a:	f9 1f       	adc	r31, r25
     b9c:	80 81       	ld	r24, Z
     b9e:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     ba2:	11 50       	subi	r17, 0x01	; 1
     ba4:	11 11       	cpse	r17, r1
     ba6:	f1 cf       	rjmp	.-30     	; 0xb8a <LCD_writeint+0x70>
     ba8:	39 c0       	rjmp	.+114    	; 0xc1c <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     baa:	61 15       	cp	r22, r1
     bac:	71 05       	cpc	r23, r1
     bae:	81 05       	cpc	r24, r1
     bb0:	91 05       	cpc	r25, r1
     bb2:	21 f4       	brne	.+8      	; 0xbbc <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
     bb4:	80 e3       	ldi	r24, 0x30	; 48
     bb6:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_writechar>
     bba:	30 c0       	rjmp	.+96     	; 0xc1c <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     bbc:	16 16       	cp	r1, r22
     bbe:	17 06       	cpc	r1, r23
     bc0:	18 06       	cpc	r1, r24
     bc2:	19 06       	cpc	r1, r25
     bc4:	ac f0       	brlt	.+42     	; 0xbf0 <LCD_writeint+0xd6>
     bc6:	2a c0       	rjmp	.+84     	; 0xc1c <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     bc8:	2a e0       	ldi	r18, 0x0A	; 10
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e0       	ldi	r20, 0x00	; 0
     bce:	50 e0       	ldi	r21, 0x00	; 0
     bd0:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodsi4>
     bd4:	e1 e0       	ldi	r30, 0x01	; 1
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	ec 0f       	add	r30, r28
     bda:	fd 1f       	adc	r31, r29
     bdc:	e1 0f       	add	r30, r17
     bde:	f1 1d       	adc	r31, r1
     be0:	60 5d       	subi	r22, 0xD0	; 208
     be2:	60 83       	st	Z, r22
			s32_a_num /= 10;
     be4:	62 2f       	mov	r22, r18
     be6:	73 2f       	mov	r23, r19
     be8:	84 2f       	mov	r24, r20
     bea:	95 2f       	mov	r25, r21
			i++;
     bec:	1f 5f       	subi	r17, 0xFF	; 255
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <LCD_writeint+0xd8>
     bf0:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     bf2:	16 16       	cp	r1, r22
     bf4:	17 06       	cpc	r1, r23
     bf6:	18 06       	cpc	r1, r24
     bf8:	19 06       	cpc	r1, r25
     bfa:	34 f3       	brlt	.-52     	; 0xbc8 <LCD_writeint+0xae>
     bfc:	0d c0       	rjmp	.+26     	; 0xc18 <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     bfe:	e1 2f       	mov	r30, r17
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	31 97       	sbiw	r30, 0x01	; 1
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	8c 0f       	add	r24, r28
     c0a:	9d 1f       	adc	r25, r29
     c0c:	e8 0f       	add	r30, r24
     c0e:	f9 1f       	adc	r31, r25
     c10:	80 81       	ld	r24, Z
     c12:	0e 94 1b 05 	call	0xa36	; 0xa36 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     c16:	11 50       	subi	r17, 0x01	; 1
     c18:	11 11       	cpse	r17, r1
     c1a:	f1 cf       	rjmp	.-30     	; 0xbfe <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     c1c:	2a 96       	adiw	r28, 0x0a	; 10
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	08 95       	ret

00000c30 <MOTOR_init>:
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
	
	switch(u8_a_motorid)
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	b9 f0       	breq	.+46     	; 0xc62 <MOTOR_init+0x32>
     c34:	28 f0       	brcs	.+10     	; 0xc40 <MOTOR_init+0x10>
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	29 f1       	breq	.+74     	; 0xc84 <MOTOR_init+0x54>
     c3a:	83 30       	cpi	r24, 0x03	; 3
     c3c:	a1 f1       	breq	.+104    	; 0xca6 <MOTOR_init+0x76>
     c3e:	44 c0       	rjmp	.+136    	; 0xcc8 <MOTOR_init+0x98>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
     c40:	41 e0       	ldi	r20, 0x01	; 1
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
     c4a:	41 e0       	ldi	r20, 0x01	; 1
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
     c54:	41 e0       	ldi	r20, 0x01	; 1
     c56:	62 e0       	ldi	r22, 0x02	; 2
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     c5e:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
		break;
     c60:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
     c62:	41 e0       	ldi	r20, 0x01	; 1
     c64:	63 e0       	ldi	r22, 0x03	; 3
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	64 e0       	ldi	r22, 0x04	; 4
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	65 e0       	ldi	r22, 0x05	; 5
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     c80:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     c82:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
     c84:	41 e0       	ldi	r20, 0x01	; 1
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     c98:	41 e0       	ldi	r20, 0x01	; 1
     c9a:	62 e0       	ldi	r22, 0x02	; 2
     c9c:	82 e0       	ldi	r24, 0x02	; 2
     c9e:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     ca2:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     ca4:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	63 e0       	ldi	r22, 0x03	; 3
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
     cb0:	41 e0       	ldi	r20, 0x01	; 1
     cb2:	64 e0       	ldi	r22, 0x04	; 4
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	65 e0       	ldi	r22, 0x05	; 5
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     cc4:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     cc6:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_initstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     cc8:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_initstatus ; /** RETURN THE FINAL STATUS **/
}
     cca:	08 95       	ret

00000ccc <MOTOR_rotateclkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	91 f0       	breq	.+36     	; 0xcf4 <MOTOR_rotateclkdir+0x28>
     cd0:	28 f0       	brcs	.+10     	; 0xcdc <MOTOR_rotateclkdir+0x10>
     cd2:	82 30       	cpi	r24, 0x02	; 2
     cd4:	d9 f0       	breq	.+54     	; 0xd0c <MOTOR_rotateclkdir+0x40>
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	29 f1       	breq	.+74     	; 0xd24 <MOTOR_rotateclkdir+0x58>
     cda:	30 c0       	rjmp	.+96     	; 0xd3c <MOTOR_rotateclkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     cdc:	41 e0       	ldi	r20, 0x01	; 1
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     cf0:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     cf2:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	63 e0       	ldi	r22, 0x03	; 3
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	64 e0       	ldi	r22, 0x04	; 4
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d08:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d0a:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d0c:	41 e0       	ldi	r20, 0x01	; 1
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	82 e0       	ldi	r24, 0x02	; 2
     d1c:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d20:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d22:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     d24:	41 e0       	ldi	r20, 0x01	; 1
     d26:	63 e0       	ldi	r22, 0x03	; 3
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	64 e0       	ldi	r22, 0x04	; 4
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d38:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     d3a:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motordirectionstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d3c:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motordirectionstatus ; /** RETURN THE FINAL STATUS **/
}
     d3e:	08 95       	ret

00000d40 <MOTOR_rotateanticlkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	91 f0       	breq	.+36     	; 0xd68 <MOTOR_rotateanticlkdir+0x28>
     d44:	28 f0       	brcs	.+10     	; 0xd50 <MOTOR_rotateanticlkdir+0x10>
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	d9 f0       	breq	.+54     	; 0xd80 <MOTOR_rotateanticlkdir+0x40>
     d4a:	83 30       	cpi	r24, 0x03	; 3
     d4c:	29 f1       	breq	.+74     	; 0xd98 <MOTOR_rotateanticlkdir+0x58>
     d4e:	30 c0       	rjmp	.+96     	; 0xdb0 <MOTOR_rotateanticlkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d64:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     d66:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	63 e0       	ldi	r22, 0x03	; 3
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	64 e0       	ldi	r22, 0x04	; 4
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d7c:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     d7e:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     d94:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     d96:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	63 e0       	ldi	r22, 0x03	; 3
     d9c:	82 e0       	ldi	r24, 0x02	; 2
     d9e:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     da2:	41 e0       	ldi	r20, 0x01	; 1
     da4:	64 e0       	ldi	r22, 0x04	; 4
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dac:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     dae:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motorrotatestatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     db0:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
     db2:	08 95       	ret

00000db4 <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	69 f0       	breq	.+26     	; 0xdd2 <MOTOR_turnoff+0x1e>
     db8:	28 f0       	brcs	.+10     	; 0xdc4 <MOTOR_turnoff+0x10>
     dba:	82 30       	cpi	r24, 0x02	; 2
     dbc:	89 f0       	breq	.+34     	; 0xde0 <MOTOR_turnoff+0x2c>
     dbe:	83 30       	cpi	r24, 0x03	; 3
     dc0:	b1 f0       	breq	.+44     	; 0xdee <MOTOR_turnoff+0x3a>
     dc2:	1c c0       	rjmp	.+56     	; 0xdfc <MOTOR_turnoff+0x48>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	62 e0       	ldi	r22, 0x02	; 2
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dce:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     dd0:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	65 e0       	ldi	r22, 0x05	; 5
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ddc:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     dde:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	62 e0       	ldi	r22, 0x02	; 2
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dea:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     dec:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	65 e0       	ldi	r22, 0x05	; 5
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     df8:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     dfa:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     dfc:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     dfe:	08 95       	ret

00000e00 <MOTOR_turnon>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	69 f0       	breq	.+26     	; 0xe1e <MOTOR_turnon+0x1e>
     e04:	28 f0       	brcs	.+10     	; 0xe10 <MOTOR_turnon+0x10>
     e06:	82 30       	cpi	r24, 0x02	; 2
     e08:	89 f0       	breq	.+34     	; 0xe2c <MOTOR_turnon+0x2c>
     e0a:	83 30       	cpi	r24, 0x03	; 3
     e0c:	b1 f0       	breq	.+44     	; 0xe3a <MOTOR_turnon+0x3a>
     e0e:	1c c0       	rjmp	.+56     	; 0xe48 <MOTOR_turnon+0x48>
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e10:	41 e0       	ldi	r20, 0x01	; 1
     e12:	62 e0       	ldi	r22, 0x02	; 2
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e1a:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e1c:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e1e:	41 e0       	ldi	r20, 0x01	; 1
     e20:	65 e0       	ldi	r22, 0x05	; 5
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e28:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e2a:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	62 e0       	ldi	r22, 0x02	; 2
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e36:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e38:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	65 e0       	ldi	r22, 0x05	; 5
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e44:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     e46:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e48:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     e4a:	08 95       	ret

00000e4c <US_init>:
/** RETURNS : VOID                                                **/
/*******************************************************************/
void US_init(void)
{
	/** INITIALIZE THE TRIGGER PIN AS OUTPUT PIN **/
	DIO_setpindir(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_OUTPUT);
     e4c:	41 e0       	ldi	r20, 0x01	; 1
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	0e 94 44 07 	call	0xe88	; 0xe88 <DIO_setpindir>
     e56:	08 95       	ret

00000e58 <US_sendtrigger>:
/** RETURNS : EN_ultrasonicreturn                                 **/
/*******************************************************************/
EN_ultrasonicreturn US_sendtrigger(void)
{
	/** SEND PULSE OF 15 MICROSECOND **/
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_HIGH);
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
	TMR0_delaymicros(15);
     e62:	6f e0       	ldi	r22, 0x0F	; 15
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 2d 09 	call	0x125a	; 0x125a <TMR0_delaymicros>
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_LOW);
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	0e 94 c3 07 	call	0xf86	; 0xf86 <DIO_setpinvalue>
}
     e78:	08 95       	ret

00000e7a <main>:
     e7a:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
     e7e:	0e 94 76 00 	call	0xec	; 0xec <APP_setentry>
     e82:	0e 94 2b 01 	call	0x256	; 0x256 <APP_start>
     e86:	fd cf       	rjmp	.-6      	; 0xe82 <main+0x8>

00000e88 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
     e88:	44 23       	and	r20, r20
     e8a:	19 f0       	breq	.+6      	; 0xe92 <DIO_setpindir+0xa>
     e8c:	41 30       	cpi	r20, 0x01	; 1
     e8e:	e9 f1       	breq	.+122    	; 0xf0a <DIO_setpindir+0x82>
     e90:	74 c0       	rjmp	.+232    	; 0xf7a <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	99 f0       	breq	.+38     	; 0xebc <DIO_setpindir+0x34>
     e96:	28 f0       	brcs	.+10     	; 0xea2 <DIO_setpindir+0x1a>
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	e9 f0       	breq	.+58     	; 0xed6 <DIO_setpindir+0x4e>
     e9c:	83 30       	cpi	r24, 0x03	; 3
     e9e:	41 f1       	breq	.+80     	; 0xef0 <DIO_setpindir+0x68>
     ea0:	6e c0       	rjmp	.+220    	; 0xf7e <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     ea2:	2a b3       	in	r18, 0x1a	; 26
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_setpindir+0x26>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	6a 95       	dec	r22
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_setpindir+0x22>
     eb2:	80 95       	com	r24
     eb4:	82 23       	and	r24, r18
     eb6:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     eb8:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
     eba:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     ebc:	27 b3       	in	r18, 0x17	; 23
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <DIO_setpindir+0x40>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	6a 95       	dec	r22
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <DIO_setpindir+0x3c>
     ecc:	80 95       	com	r24
     ece:	82 23       	and	r24, r18
     ed0:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     ed2:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
     ed4:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     ed6:	24 b3       	in	r18, 0x14	; 20
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_setpindir+0x5a>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	6a 95       	dec	r22
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_setpindir+0x56>
     ee6:	80 95       	com	r24
     ee8:	82 23       	and	r24, r18
     eea:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     eec:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
     eee:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     ef0:	21 b3       	in	r18, 0x11	; 17
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_setpindir+0x74>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	6a 95       	dec	r22
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_setpindir+0x70>
     f00:	80 95       	com	r24
     f02:	82 23       	and	r24, r18
     f04:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f06:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
     f08:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	91 f0       	breq	.+36     	; 0xf32 <DIO_setpindir+0xaa>
     f0e:	28 f0       	brcs	.+10     	; 0xf1a <DIO_setpindir+0x92>
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	d9 f0       	breq	.+54     	; 0xf4a <DIO_setpindir+0xc2>
     f14:	83 30       	cpi	r24, 0x03	; 3
     f16:	29 f1       	breq	.+74     	; 0xf62 <DIO_setpindir+0xda>
     f18:	34 c0       	rjmp	.+104    	; 0xf82 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     f1a:	2a b3       	in	r18, 0x1a	; 26
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_setpindir+0x9e>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	6a 95       	dec	r22
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_setpindir+0x9a>
     f2a:	82 2b       	or	r24, r18
     f2c:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f2e:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     f30:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     f32:	27 b3       	in	r18, 0x17	; 23
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <DIO_setpindir+0xb6>
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	6a 95       	dec	r22
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <DIO_setpindir+0xb2>
     f42:	82 2b       	or	r24, r18
     f44:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f46:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     f48:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     f4a:	24 b3       	in	r18, 0x14	; 20
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <DIO_setpindir+0xce>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	6a 95       	dec	r22
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <DIO_setpindir+0xca>
     f5a:	82 2b       	or	r24, r18
     f5c:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f5e:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     f60:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     f62:	21 b3       	in	r18, 0x11	; 17
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_setpindir+0xe6>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	6a 95       	dec	r22
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_setpindir+0xe2>
     f72:	82 2b       	or	r24, r18
     f74:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f76:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     f78:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     f82:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
     f84:	08 95       	ret

00000f86 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
     f86:	44 23       	and	r20, r20
     f88:	19 f0       	breq	.+6      	; 0xf90 <DIO_setpinvalue+0xa>
     f8a:	41 30       	cpi	r20, 0x01	; 1
     f8c:	e9 f1       	breq	.+122    	; 0x1008 <DIO_setpinvalue+0x82>
     f8e:	74 c0       	rjmp	.+232    	; 0x1078 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	99 f0       	breq	.+38     	; 0xfba <DIO_setpinvalue+0x34>
     f94:	28 f0       	brcs	.+10     	; 0xfa0 <DIO_setpinvalue+0x1a>
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	e9 f0       	breq	.+58     	; 0xfd4 <DIO_setpinvalue+0x4e>
     f9a:	83 30       	cpi	r24, 0x03	; 3
     f9c:	41 f1       	breq	.+80     	; 0xfee <DIO_setpinvalue+0x68>
     f9e:	6e c0       	rjmp	.+220    	; 0x107c <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     fa0:	2b b3       	in	r18, 0x1b	; 27
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_setpinvalue+0x26>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	6a 95       	dec	r22
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_setpinvalue+0x22>
     fb0:	80 95       	com	r24
     fb2:	82 23       	and	r24, r18
     fb4:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     fb6:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     fb8:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     fba:	28 b3       	in	r18, 0x18	; 24
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_setpinvalue+0x40>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	6a 95       	dec	r22
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_setpinvalue+0x3c>
     fca:	80 95       	com	r24
     fcc:	82 23       	and	r24, r18
     fce:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     fd0:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     fd2:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     fd4:	25 b3       	in	r18, 0x15	; 21
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_setpinvalue+0x5a>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	6a 95       	dec	r22
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_setpinvalue+0x56>
     fe4:	80 95       	com	r24
     fe6:	82 23       	and	r24, r18
     fe8:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     fea:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     fec:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     fee:	22 b3       	in	r18, 0x12	; 18
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_setpinvalue+0x74>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	6a 95       	dec	r22
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_setpinvalue+0x70>
     ffe:	80 95       	com	r24
    1000:	82 23       	and	r24, r18
    1002:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1004:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    1006:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 f0       	breq	.+36     	; 0x1030 <DIO_setpinvalue+0xaa>
    100c:	28 f0       	brcs	.+10     	; 0x1018 <DIO_setpinvalue+0x92>
    100e:	82 30       	cpi	r24, 0x02	; 2
    1010:	d9 f0       	breq	.+54     	; 0x1048 <DIO_setpinvalue+0xc2>
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	29 f1       	breq	.+74     	; 0x1060 <DIO_setpinvalue+0xda>
    1016:	34 c0       	rjmp	.+104    	; 0x1080 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1018:	2b b3       	in	r18, 0x1b	; 27
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_setpinvalue+0x9e>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	6a 95       	dec	r22
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_setpinvalue+0x9a>
    1028:	82 2b       	or	r24, r18
    102a:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    102c:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    102e:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1030:	28 b3       	in	r18, 0x18	; 24
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_setpinvalue+0xb6>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	6a 95       	dec	r22
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_setpinvalue+0xb2>
    1040:	82 2b       	or	r24, r18
    1042:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1044:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1046:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1048:	25 b3       	in	r18, 0x15	; 21
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_setpinvalue+0xce>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	6a 95       	dec	r22
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_setpinvalue+0xca>
    1058:	82 2b       	or	r24, r18
    105a:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    105c:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    105e:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1060:	22 b3       	in	r18, 0x12	; 18
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_setpinvalue+0xe6>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	6a 95       	dec	r22
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_setpinvalue+0xe2>
    1070:	82 2b       	or	r24, r18
    1072:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1074:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1076:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    1080:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
    1082:	08 95       	ret

00001084 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	99 f0       	breq	.+38     	; 0x10ae <DIO_readpin+0x2a>
    1088:	28 f0       	brcs	.+10     	; 0x1094 <DIO_readpin+0x10>
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	e9 f0       	breq	.+58     	; 0x10c8 <DIO_readpin+0x44>
    108e:	83 30       	cpi	r24, 0x03	; 3
    1090:	41 f1       	breq	.+80     	; 0x10e2 <DIO_readpin+0x5e>
    1092:	34 c0       	rjmp	.+104    	; 0x10fc <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    1094:	89 b3       	in	r24, 0x19	; 25
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_readpin+0x1a>
    109a:	95 95       	asr	r25
    109c:	87 95       	ror	r24
    109e:	6a 95       	dec	r22
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_readpin+0x16>
    10a2:	81 70       	andi	r24, 0x01	; 1
    10a4:	89 bb       	out	0x19, r24	; 25
    10a6:	fa 01       	movw	r30, r20
    10a8:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    10aa:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    10ac:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    10ae:	86 b3       	in	r24, 0x16	; 22
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_readpin+0x34>
    10b4:	95 95       	asr	r25
    10b6:	87 95       	ror	r24
    10b8:	6a 95       	dec	r22
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_readpin+0x30>
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	86 bb       	out	0x16, r24	; 22
    10c0:	fa 01       	movw	r30, r20
    10c2:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    10c4:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    10c6:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    10c8:	83 b3       	in	r24, 0x13	; 19
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_readpin+0x4e>
    10ce:	95 95       	asr	r25
    10d0:	87 95       	ror	r24
    10d2:	6a 95       	dec	r22
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIO_readpin+0x4a>
    10d6:	81 70       	andi	r24, 0x01	; 1
    10d8:	83 bb       	out	0x13, r24	; 19
    10da:	fa 01       	movw	r30, r20
    10dc:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    10de:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    10e0:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    10e2:	80 b3       	in	r24, 0x10	; 16
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <DIO_readpin+0x68>
    10e8:	95 95       	asr	r25
    10ea:	87 95       	ror	r24
    10ec:	6a 95       	dec	r22
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <DIO_readpin+0x64>
    10f0:	81 70       	andi	r24, 0x01	; 1
    10f2:	80 bb       	out	0x10, r24	; 16
    10f4:	fa 01       	movw	r30, r20
    10f6:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    10f8:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    10fa:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
    10fc:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
    10fe:	08 95       	ret

00001100 <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	91 f0       	breq	.+36     	; 0x1128 <DIO_togglepin+0x28>
    1104:	28 f0       	brcs	.+10     	; 0x1110 <DIO_togglepin+0x10>
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	d9 f0       	breq	.+54     	; 0x1140 <DIO_togglepin+0x40>
    110a:	83 30       	cpi	r24, 0x03	; 3
    110c:	29 f1       	breq	.+74     	; 0x1158 <DIO_togglepin+0x58>
    110e:	30 c0       	rjmp	.+96     	; 0x1170 <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
    1110:	2b b3       	in	r18, 0x1b	; 27
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_togglepin+0x1c>
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	6a 95       	dec	r22
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_togglepin+0x18>
    1120:	82 27       	eor	r24, r18
    1122:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1124:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
    1126:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
    1128:	28 b3       	in	r18, 0x18	; 24
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <DIO_togglepin+0x34>
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	6a 95       	dec	r22
    1136:	e2 f7       	brpl	.-8      	; 0x1130 <DIO_togglepin+0x30>
    1138:	82 27       	eor	r24, r18
    113a:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    113c:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
    113e:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
    1140:	25 b3       	in	r18, 0x15	; 21
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_togglepin+0x4c>
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	6a 95       	dec	r22
    114e:	e2 f7       	brpl	.-8      	; 0x1148 <DIO_togglepin+0x48>
    1150:	82 27       	eor	r24, r18
    1152:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1154:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
    1156:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
    1158:	22 b3       	in	r18, 0x12	; 18
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_togglepin+0x64>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	6a 95       	dec	r22
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_togglepin+0x60>
    1168:	82 27       	eor	r24, r18
    116a:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    116c:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
    116e:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
    1170:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
    1172:	08 95       	ret

00001174 <SET_GLOBALINTERRUPT>:
    1174:	8f b7       	in	r24, 0x3f	; 63
    1176:	80 68       	ori	r24, 0x80	; 128
    1178:	8f bf       	out	0x3f, r24	; 63
    117a:	08 95       	ret

0000117c <INT0_init>:
    117c:	0e 94 ba 08 	call	0x1174	; 0x1174 <SET_GLOBALINTERRUPT>
    1180:	85 b7       	in	r24, 0x35	; 53
    1182:	81 60       	ori	r24, 0x01	; 1
    1184:	85 bf       	out	0x35, r24	; 53
    1186:	85 b7       	in	r24, 0x35	; 53
    1188:	8d 7f       	andi	r24, 0xFD	; 253
    118a:	85 bf       	out	0x35, r24	; 53
    118c:	8b b7       	in	r24, 0x3b	; 59
    118e:	80 64       	ori	r24, 0x40	; 64
    1190:	8b bf       	out	0x3b, r24	; 59
    1192:	08 95       	ret

00001194 <TMR0_init>:
    1194:	83 b7       	in	r24, 0x33	; 51
    1196:	8f 77       	andi	r24, 0x7F	; 127
    1198:	83 bf       	out	0x33, r24	; 51
    119a:	83 b7       	in	r24, 0x33	; 51
    119c:	8f 7b       	andi	r24, 0xBF	; 191
    119e:	83 bf       	out	0x33, r24	; 51
    11a0:	83 b7       	in	r24, 0x33	; 51
    11a2:	87 7f       	andi	r24, 0xF7	; 247
    11a4:	83 bf       	out	0x33, r24	; 51
    11a6:	83 b7       	in	r24, 0x33	; 51
    11a8:	8f 7e       	andi	r24, 0xEF	; 239
    11aa:	83 bf       	out	0x33, r24	; 51
    11ac:	83 b7       	in	r24, 0x33	; 51
    11ae:	8f 7d       	andi	r24, 0xDF	; 223
    11b0:	83 bf       	out	0x33, r24	; 51
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	08 95       	ret

000011b6 <TMR0_start>:
    11b6:	83 b7       	in	r24, 0x33	; 51
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	83 bf       	out	0x33, r24	; 51
    11bc:	83 b7       	in	r24, 0x33	; 51
    11be:	8d 7f       	andi	r24, 0xFD	; 253
    11c0:	83 bf       	out	0x33, r24	; 51
    11c2:	83 b7       	in	r24, 0x33	; 51
    11c4:	8b 7f       	andi	r24, 0xFB	; 251
    11c6:	83 bf       	out	0x33, r24	; 51
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	08 95       	ret

000011cc <TMR0_stop>:
    11cc:	83 b7       	in	r24, 0x33	; 51
    11ce:	8e 7f       	andi	r24, 0xFE	; 254
    11d0:	83 bf       	out	0x33, r24	; 51
    11d2:	83 b7       	in	r24, 0x33	; 51
    11d4:	8d 7f       	andi	r24, 0xFD	; 253
    11d6:	83 bf       	out	0x33, r24	; 51
    11d8:	83 b7       	in	r24, 0x33	; 51
    11da:	8b 7f       	andi	r24, 0xFB	; 251
    11dc:	83 bf       	out	0x33, r24	; 51
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	08 95       	ret

000011e2 <TMR0_delayms>:
    11e2:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__floatunsisf>
    11e6:	2f e6       	ldi	r18, 0x6F	; 111
    11e8:	32 e1       	ldi	r19, 0x12	; 18
    11ea:	43 e0       	ldi	r20, 0x03	; 3
    11ec:	5d e3       	ldi	r21, 0x3D	; 61
    11ee:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__divsf3>
    11f2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixunssfsi>
    11f6:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <u32_gs_tmr0nuofovs>
    11fa:	70 93 b4 00 	sts	0x00B4, r23	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    11fe:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    1202:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    1206:	12 be       	out	0x32, r1	; 50
    1208:	0e 94 db 08 	call	0x11b6	; 0x11b6 <TMR0_start>
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	ba 01       	movw	r22, r20
    1212:	0a c0       	rjmp	.+20     	; 0x1228 <TMR0_delayms+0x46>
    1214:	08 b6       	in	r0, 0x38	; 56
    1216:	00 fe       	sbrs	r0, 0
    1218:	fd cf       	rjmp	.-6      	; 0x1214 <TMR0_delayms+0x32>
    121a:	88 b7       	in	r24, 0x38	; 56
    121c:	81 60       	ori	r24, 0x01	; 1
    121e:	88 bf       	out	0x38, r24	; 56
    1220:	4f 5f       	subi	r20, 0xFF	; 255
    1222:	5f 4f       	sbci	r21, 0xFF	; 255
    1224:	6f 4f       	sbci	r22, 0xFF	; 255
    1226:	7f 4f       	sbci	r23, 0xFF	; 255
    1228:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <u32_gs_tmr0nuofovs>
    122c:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    1230:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    1234:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    1238:	48 17       	cp	r20, r24
    123a:	59 07       	cpc	r21, r25
    123c:	6a 07       	cpc	r22, r26
    123e:	7b 07       	cpc	r23, r27
    1240:	48 f3       	brcs	.-46     	; 0x1214 <TMR0_delayms+0x32>
    1242:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <u32_gs_tmr0nuofovs>
    1246:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    124a:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    124e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    1252:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TMR0_stop>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	08 95       	ret

0000125a <TMR0_delaymicros>:
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	68 94       	set
    1260:	14 f8       	bld	r1, 4
    1262:	b6 95       	lsr	r27
    1264:	a7 95       	ror	r26
    1266:	97 95       	ror	r25
    1268:	87 95       	ror	r24
    126a:	16 94       	lsr	r1
    126c:	d1 f7       	brne	.-12     	; 0x1262 <TMR0_delaymicros+0x8>
    126e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <u32_gs_tmr0nuofovs>
    1272:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    1276:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    127a:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    127e:	12 be       	out	0x32, r1	; 50
    1280:	0e 94 db 08 	call	0x11b6	; 0x11b6 <TMR0_start>
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	50 e0       	ldi	r21, 0x00	; 0
    1288:	ba 01       	movw	r22, r20
    128a:	0a c0       	rjmp	.+20     	; 0x12a0 <TMR0_delaymicros+0x46>
    128c:	08 b6       	in	r0, 0x38	; 56
    128e:	00 fe       	sbrs	r0, 0
    1290:	fd cf       	rjmp	.-6      	; 0x128c <TMR0_delaymicros+0x32>
    1292:	88 b7       	in	r24, 0x38	; 56
    1294:	81 60       	ori	r24, 0x01	; 1
    1296:	88 bf       	out	0x38, r24	; 56
    1298:	4f 5f       	subi	r20, 0xFF	; 255
    129a:	5f 4f       	sbci	r21, 0xFF	; 255
    129c:	6f 4f       	sbci	r22, 0xFF	; 255
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <u32_gs_tmr0nuofovs>
    12a4:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    12a8:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    12ac:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    12b0:	48 17       	cp	r20, r24
    12b2:	59 07       	cpc	r21, r25
    12b4:	6a 07       	cpc	r22, r26
    12b6:	7b 07       	cpc	r23, r27
    12b8:	48 f3       	brcs	.-46     	; 0x128c <TMR0_delaymicros+0x32>
    12ba:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TMR0_stop>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	08 95       	ret

000012c2 <TMR1_init>:
    12c2:	8f b5       	in	r24, 0x2f	; 47
    12c4:	8e 7f       	andi	r24, 0xFE	; 254
    12c6:	8f bd       	out	0x2f, r24	; 47
    12c8:	8f b5       	in	r24, 0x2f	; 47
    12ca:	8d 7f       	andi	r24, 0xFD	; 253
    12cc:	8f bd       	out	0x2f, r24	; 47
    12ce:	8e b5       	in	r24, 0x2e	; 46
    12d0:	87 7f       	andi	r24, 0xF7	; 247
    12d2:	8e bd       	out	0x2e, r24	; 46
    12d4:	8e b5       	in	r24, 0x2e	; 46
    12d6:	8f 7e       	andi	r24, 0xEF	; 239
    12d8:	8e bd       	out	0x2e, r24	; 46
    12da:	8f b5       	in	r24, 0x2f	; 47
    12dc:	84 60       	ori	r24, 0x04	; 4
    12de:	8f bd       	out	0x2f, r24	; 47
    12e0:	8f b5       	in	r24, 0x2f	; 47
    12e2:	88 60       	ori	r24, 0x08	; 8
    12e4:	8f bd       	out	0x2f, r24	; 47
    12e6:	8f b7       	in	r24, 0x3f	; 63
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	8f bf       	out	0x3f, r24	; 63
    12ec:	89 b7       	in	r24, 0x39	; 57
    12ee:	9a b7       	in	r25, 0x3a	; 58
    12f0:	84 60       	ori	r24, 0x04	; 4
    12f2:	9a bf       	out	0x3a, r25	; 58
    12f4:	89 bf       	out	0x39, r24	; 57
    12f6:	08 95       	ret

000012f8 <TMR1_start>:
    12f8:	1d bc       	out	0x2d, r1	; 45
    12fa:	1c bc       	out	0x2c, r1	; 44
    12fc:	8e b5       	in	r24, 0x2e	; 46
    12fe:	81 60       	ori	r24, 0x01	; 1
    1300:	8e bd       	out	0x2e, r24	; 46
    1302:	8e b5       	in	r24, 0x2e	; 46
    1304:	8d 7f       	andi	r24, 0xFD	; 253
    1306:	8e bd       	out	0x2e, r24	; 46
    1308:	8e b5       	in	r24, 0x2e	; 46
    130a:	8b 7f       	andi	r24, 0xFB	; 251
    130c:	8e bd       	out	0x2e, r24	; 46
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	08 95       	ret

00001312 <TMR1_stop>:
    1312:	8e b5       	in	r24, 0x2e	; 46
    1314:	8e 7f       	andi	r24, 0xFE	; 254
    1316:	8e bd       	out	0x2e, r24	; 46
    1318:	8e b5       	in	r24, 0x2e	; 46
    131a:	8d 7f       	andi	r24, 0xFD	; 253
    131c:	8e bd       	out	0x2e, r24	; 46
    131e:	8e b5       	in	r24, 0x2e	; 46
    1320:	8b 7f       	andi	r24, 0xFB	; 251
    1322:	8e bd       	out	0x2e, r24	; 46
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	08 95       	ret

00001328 <TMR1_getvalue>:
    1328:	2c b5       	in	r18, 0x2c	; 44
    132a:	3d b5       	in	r19, 0x2d	; 45
    132c:	fc 01       	movw	r30, r24
    132e:	31 83       	std	Z+1, r19	; 0x01
    1330:	20 83       	st	Z, r18
    1332:	08 95       	ret

00001334 <TMR1_setcounterval>:
    1334:	9d bd       	out	0x2d, r25	; 45
    1336:	8c bd       	out	0x2c, r24	; 44
    1338:	08 95       	ret

0000133a <TMR2_init>:
    133a:	85 b5       	in	r24, 0x25	; 37
    133c:	8f 77       	andi	r24, 0x7F	; 127
    133e:	85 bd       	out	0x25, r24	; 37
    1340:	85 b5       	in	r24, 0x25	; 37
    1342:	8f 7b       	andi	r24, 0xBF	; 191
    1344:	85 bd       	out	0x25, r24	; 37
    1346:	85 b5       	in	r24, 0x25	; 37
    1348:	87 7f       	andi	r24, 0xF7	; 247
    134a:	85 bd       	out	0x25, r24	; 37
    134c:	85 b5       	in	r24, 0x25	; 37
    134e:	8f 7e       	andi	r24, 0xEF	; 239
    1350:	85 bd       	out	0x25, r24	; 37
    1352:	85 b5       	in	r24, 0x25	; 37
    1354:	8f 7d       	andi	r24, 0xDF	; 223
    1356:	85 bd       	out	0x25, r24	; 37
    1358:	8f b7       	in	r24, 0x3f	; 63
    135a:	80 68       	ori	r24, 0x80	; 128
    135c:	8f bf       	out	0x3f, r24	; 63
    135e:	89 b7       	in	r24, 0x39	; 57
    1360:	80 64       	ori	r24, 0x40	; 64
    1362:	89 bf       	out	0x39, r24	; 57
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	08 95       	ret

00001368 <TMR2_start>:
    1368:	85 b5       	in	r24, 0x25	; 37
    136a:	81 60       	ori	r24, 0x01	; 1
    136c:	85 bd       	out	0x25, r24	; 37
    136e:	85 b5       	in	r24, 0x25	; 37
    1370:	8d 7f       	andi	r24, 0xFD	; 253
    1372:	85 bd       	out	0x25, r24	; 37
    1374:	85 b5       	in	r24, 0x25	; 37
    1376:	8b 7f       	andi	r24, 0xFB	; 251
    1378:	85 bd       	out	0x25, r24	; 37
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	08 95       	ret

0000137e <TMR2_stop>:
    137e:	85 b5       	in	r24, 0x25	; 37
    1380:	8e 7f       	andi	r24, 0xFE	; 254
    1382:	85 bd       	out	0x25, r24	; 37
    1384:	85 b5       	in	r24, 0x25	; 37
    1386:	8d 7f       	andi	r24, 0xFD	; 253
    1388:	85 bd       	out	0x25, r24	; 37
    138a:	85 b5       	in	r24, 0x25	; 37
    138c:	8b 7f       	andi	r24, 0xFB	; 251
    138e:	85 bd       	out	0x25, r24	; 37
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	08 95       	ret

00001394 <TMR2_getovs>:
    1394:	bc 01       	movw	r22, r24
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <__floatunsisf>
    139e:	2f e6       	ldi	r18, 0x6F	; 111
    13a0:	32 e1       	ldi	r19, 0x12	; 18
    13a2:	43 e0       	ldi	r20, 0x03	; 3
    13a4:	5d e3       	ldi	r21, 0x3D	; 61
    13a6:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__divsf3>
    13aa:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixunssfsi>
    13ae:	08 95       	ret

000013b0 <__divsf3>:
    13b0:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <__divsf3x>
    13b4:	0c 94 cd 0a 	jmp	0x159a	; 0x159a <__fp_round>
    13b8:	0e 94 c6 0a 	call	0x158c	; 0x158c <__fp_pscB>
    13bc:	58 f0       	brcs	.+22     	; 0x13d4 <__divsf3+0x24>
    13be:	0e 94 bf 0a 	call	0x157e	; 0x157e <__fp_pscA>
    13c2:	40 f0       	brcs	.+16     	; 0x13d4 <__divsf3+0x24>
    13c4:	29 f4       	brne	.+10     	; 0x13d0 <__divsf3+0x20>
    13c6:	5f 3f       	cpi	r21, 0xFF	; 255
    13c8:	29 f0       	breq	.+10     	; 0x13d4 <__divsf3+0x24>
    13ca:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__fp_inf>
    13ce:	51 11       	cpse	r21, r1
    13d0:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__fp_szero>
    13d4:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__fp_nan>

000013d8 <__divsf3x>:
    13d8:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__fp_split3>
    13dc:	68 f3       	brcs	.-38     	; 0x13b8 <__divsf3+0x8>

000013de <__divsf3_pse>:
    13de:	99 23       	and	r25, r25
    13e0:	b1 f3       	breq	.-20     	; 0x13ce <__divsf3+0x1e>
    13e2:	55 23       	and	r21, r21
    13e4:	91 f3       	breq	.-28     	; 0x13ca <__divsf3+0x1a>
    13e6:	95 1b       	sub	r25, r21
    13e8:	55 0b       	sbc	r21, r21
    13ea:	bb 27       	eor	r27, r27
    13ec:	aa 27       	eor	r26, r26
    13ee:	62 17       	cp	r22, r18
    13f0:	73 07       	cpc	r23, r19
    13f2:	84 07       	cpc	r24, r20
    13f4:	38 f0       	brcs	.+14     	; 0x1404 <__divsf3_pse+0x26>
    13f6:	9f 5f       	subi	r25, 0xFF	; 255
    13f8:	5f 4f       	sbci	r21, 0xFF	; 255
    13fa:	22 0f       	add	r18, r18
    13fc:	33 1f       	adc	r19, r19
    13fe:	44 1f       	adc	r20, r20
    1400:	aa 1f       	adc	r26, r26
    1402:	a9 f3       	breq	.-22     	; 0x13ee <__divsf3_pse+0x10>
    1404:	35 d0       	rcall	.+106    	; 0x1470 <__divsf3_pse+0x92>
    1406:	0e 2e       	mov	r0, r30
    1408:	3a f0       	brmi	.+14     	; 0x1418 <__divsf3_pse+0x3a>
    140a:	e0 e8       	ldi	r30, 0x80	; 128
    140c:	32 d0       	rcall	.+100    	; 0x1472 <__divsf3_pse+0x94>
    140e:	91 50       	subi	r25, 0x01	; 1
    1410:	50 40       	sbci	r21, 0x00	; 0
    1412:	e6 95       	lsr	r30
    1414:	00 1c       	adc	r0, r0
    1416:	ca f7       	brpl	.-14     	; 0x140a <__divsf3_pse+0x2c>
    1418:	2b d0       	rcall	.+86     	; 0x1470 <__divsf3_pse+0x92>
    141a:	fe 2f       	mov	r31, r30
    141c:	29 d0       	rcall	.+82     	; 0x1470 <__divsf3_pse+0x92>
    141e:	66 0f       	add	r22, r22
    1420:	77 1f       	adc	r23, r23
    1422:	88 1f       	adc	r24, r24
    1424:	bb 1f       	adc	r27, r27
    1426:	26 17       	cp	r18, r22
    1428:	37 07       	cpc	r19, r23
    142a:	48 07       	cpc	r20, r24
    142c:	ab 07       	cpc	r26, r27
    142e:	b0 e8       	ldi	r27, 0x80	; 128
    1430:	09 f0       	breq	.+2      	; 0x1434 <__divsf3_pse+0x56>
    1432:	bb 0b       	sbc	r27, r27
    1434:	80 2d       	mov	r24, r0
    1436:	bf 01       	movw	r22, r30
    1438:	ff 27       	eor	r31, r31
    143a:	93 58       	subi	r25, 0x83	; 131
    143c:	5f 4f       	sbci	r21, 0xFF	; 255
    143e:	3a f0       	brmi	.+14     	; 0x144e <__divsf3_pse+0x70>
    1440:	9e 3f       	cpi	r25, 0xFE	; 254
    1442:	51 05       	cpc	r21, r1
    1444:	78 f0       	brcs	.+30     	; 0x1464 <__divsf3_pse+0x86>
    1446:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__fp_inf>
    144a:	0c 94 01 0b 	jmp	0x1602	; 0x1602 <__fp_szero>
    144e:	5f 3f       	cpi	r21, 0xFF	; 255
    1450:	e4 f3       	brlt	.-8      	; 0x144a <__divsf3_pse+0x6c>
    1452:	98 3e       	cpi	r25, 0xE8	; 232
    1454:	d4 f3       	brlt	.-12     	; 0x144a <__divsf3_pse+0x6c>
    1456:	86 95       	lsr	r24
    1458:	77 95       	ror	r23
    145a:	67 95       	ror	r22
    145c:	b7 95       	ror	r27
    145e:	f7 95       	ror	r31
    1460:	9f 5f       	subi	r25, 0xFF	; 255
    1462:	c9 f7       	brne	.-14     	; 0x1456 <__divsf3_pse+0x78>
    1464:	88 0f       	add	r24, r24
    1466:	91 1d       	adc	r25, r1
    1468:	96 95       	lsr	r25
    146a:	87 95       	ror	r24
    146c:	97 f9       	bld	r25, 7
    146e:	08 95       	ret
    1470:	e1 e0       	ldi	r30, 0x01	; 1
    1472:	66 0f       	add	r22, r22
    1474:	77 1f       	adc	r23, r23
    1476:	88 1f       	adc	r24, r24
    1478:	bb 1f       	adc	r27, r27
    147a:	62 17       	cp	r22, r18
    147c:	73 07       	cpc	r23, r19
    147e:	84 07       	cpc	r24, r20
    1480:	ba 07       	cpc	r27, r26
    1482:	20 f0       	brcs	.+8      	; 0x148c <__divsf3_pse+0xae>
    1484:	62 1b       	sub	r22, r18
    1486:	73 0b       	sbc	r23, r19
    1488:	84 0b       	sbc	r24, r20
    148a:	ba 0b       	sbc	r27, r26
    148c:	ee 1f       	adc	r30, r30
    148e:	88 f7       	brcc	.-30     	; 0x1472 <__divsf3_pse+0x94>
    1490:	e0 95       	com	r30
    1492:	08 95       	ret

00001494 <__fixunssfsi>:
    1494:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fp_splitA>
    1498:	88 f0       	brcs	.+34     	; 0x14bc <__fixunssfsi+0x28>
    149a:	9f 57       	subi	r25, 0x7F	; 127
    149c:	98 f0       	brcs	.+38     	; 0x14c4 <__fixunssfsi+0x30>
    149e:	b9 2f       	mov	r27, r25
    14a0:	99 27       	eor	r25, r25
    14a2:	b7 51       	subi	r27, 0x17	; 23
    14a4:	b0 f0       	brcs	.+44     	; 0x14d2 <__fixunssfsi+0x3e>
    14a6:	e1 f0       	breq	.+56     	; 0x14e0 <__fixunssfsi+0x4c>
    14a8:	66 0f       	add	r22, r22
    14aa:	77 1f       	adc	r23, r23
    14ac:	88 1f       	adc	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	1a f0       	brmi	.+6      	; 0x14b8 <__fixunssfsi+0x24>
    14b2:	ba 95       	dec	r27
    14b4:	c9 f7       	brne	.-14     	; 0x14a8 <__fixunssfsi+0x14>
    14b6:	14 c0       	rjmp	.+40     	; 0x14e0 <__fixunssfsi+0x4c>
    14b8:	b1 30       	cpi	r27, 0x01	; 1
    14ba:	91 f0       	breq	.+36     	; 0x14e0 <__fixunssfsi+0x4c>
    14bc:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_zero>
    14c0:	b1 e0       	ldi	r27, 0x01	; 1
    14c2:	08 95       	ret
    14c4:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__fp_zero>
    14c8:	67 2f       	mov	r22, r23
    14ca:	78 2f       	mov	r23, r24
    14cc:	88 27       	eor	r24, r24
    14ce:	b8 5f       	subi	r27, 0xF8	; 248
    14d0:	39 f0       	breq	.+14     	; 0x14e0 <__fixunssfsi+0x4c>
    14d2:	b9 3f       	cpi	r27, 0xF9	; 249
    14d4:	cc f3       	brlt	.-14     	; 0x14c8 <__fixunssfsi+0x34>
    14d6:	86 95       	lsr	r24
    14d8:	77 95       	ror	r23
    14da:	67 95       	ror	r22
    14dc:	b3 95       	inc	r27
    14de:	d9 f7       	brne	.-10     	; 0x14d6 <__fixunssfsi+0x42>
    14e0:	3e f4       	brtc	.+14     	; 0x14f0 <__fixunssfsi+0x5c>
    14e2:	90 95       	com	r25
    14e4:	80 95       	com	r24
    14e6:	70 95       	com	r23
    14e8:	61 95       	neg	r22
    14ea:	7f 4f       	sbci	r23, 0xFF	; 255
    14ec:	8f 4f       	sbci	r24, 0xFF	; 255
    14ee:	9f 4f       	sbci	r25, 0xFF	; 255
    14f0:	08 95       	ret

000014f2 <__floatunsisf>:
    14f2:	e8 94       	clt
    14f4:	09 c0       	rjmp	.+18     	; 0x1508 <__floatsisf+0x12>

000014f6 <__floatsisf>:
    14f6:	97 fb       	bst	r25, 7
    14f8:	3e f4       	brtc	.+14     	; 0x1508 <__floatsisf+0x12>
    14fa:	90 95       	com	r25
    14fc:	80 95       	com	r24
    14fe:	70 95       	com	r23
    1500:	61 95       	neg	r22
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	8f 4f       	sbci	r24, 0xFF	; 255
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	99 23       	and	r25, r25
    150a:	a9 f0       	breq	.+42     	; 0x1536 <__floatsisf+0x40>
    150c:	f9 2f       	mov	r31, r25
    150e:	96 e9       	ldi	r25, 0x96	; 150
    1510:	bb 27       	eor	r27, r27
    1512:	93 95       	inc	r25
    1514:	f6 95       	lsr	r31
    1516:	87 95       	ror	r24
    1518:	77 95       	ror	r23
    151a:	67 95       	ror	r22
    151c:	b7 95       	ror	r27
    151e:	f1 11       	cpse	r31, r1
    1520:	f8 cf       	rjmp	.-16     	; 0x1512 <__floatsisf+0x1c>
    1522:	fa f4       	brpl	.+62     	; 0x1562 <__floatsisf+0x6c>
    1524:	bb 0f       	add	r27, r27
    1526:	11 f4       	brne	.+4      	; 0x152c <__floatsisf+0x36>
    1528:	60 ff       	sbrs	r22, 0
    152a:	1b c0       	rjmp	.+54     	; 0x1562 <__floatsisf+0x6c>
    152c:	6f 5f       	subi	r22, 0xFF	; 255
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	8f 4f       	sbci	r24, 0xFF	; 255
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	16 c0       	rjmp	.+44     	; 0x1562 <__floatsisf+0x6c>
    1536:	88 23       	and	r24, r24
    1538:	11 f0       	breq	.+4      	; 0x153e <__floatsisf+0x48>
    153a:	96 e9       	ldi	r25, 0x96	; 150
    153c:	11 c0       	rjmp	.+34     	; 0x1560 <__floatsisf+0x6a>
    153e:	77 23       	and	r23, r23
    1540:	21 f0       	breq	.+8      	; 0x154a <__floatsisf+0x54>
    1542:	9e e8       	ldi	r25, 0x8E	; 142
    1544:	87 2f       	mov	r24, r23
    1546:	76 2f       	mov	r23, r22
    1548:	05 c0       	rjmp	.+10     	; 0x1554 <__floatsisf+0x5e>
    154a:	66 23       	and	r22, r22
    154c:	71 f0       	breq	.+28     	; 0x156a <__floatsisf+0x74>
    154e:	96 e8       	ldi	r25, 0x86	; 134
    1550:	86 2f       	mov	r24, r22
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	2a f0       	brmi	.+10     	; 0x1562 <__floatsisf+0x6c>
    1558:	9a 95       	dec	r25
    155a:	66 0f       	add	r22, r22
    155c:	77 1f       	adc	r23, r23
    155e:	88 1f       	adc	r24, r24
    1560:	da f7       	brpl	.-10     	; 0x1558 <__floatsisf+0x62>
    1562:	88 0f       	add	r24, r24
    1564:	96 95       	lsr	r25
    1566:	87 95       	ror	r24
    1568:	97 f9       	bld	r25, 7
    156a:	08 95       	ret

0000156c <__fp_inf>:
    156c:	97 f9       	bld	r25, 7
    156e:	9f 67       	ori	r25, 0x7F	; 127
    1570:	80 e8       	ldi	r24, 0x80	; 128
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	08 95       	ret

00001578 <__fp_nan>:
    1578:	9f ef       	ldi	r25, 0xFF	; 255
    157a:	80 ec       	ldi	r24, 0xC0	; 192
    157c:	08 95       	ret

0000157e <__fp_pscA>:
    157e:	00 24       	eor	r0, r0
    1580:	0a 94       	dec	r0
    1582:	16 16       	cp	r1, r22
    1584:	17 06       	cpc	r1, r23
    1586:	18 06       	cpc	r1, r24
    1588:	09 06       	cpc	r0, r25
    158a:	08 95       	ret

0000158c <__fp_pscB>:
    158c:	00 24       	eor	r0, r0
    158e:	0a 94       	dec	r0
    1590:	12 16       	cp	r1, r18
    1592:	13 06       	cpc	r1, r19
    1594:	14 06       	cpc	r1, r20
    1596:	05 06       	cpc	r0, r21
    1598:	08 95       	ret

0000159a <__fp_round>:
    159a:	09 2e       	mov	r0, r25
    159c:	03 94       	inc	r0
    159e:	00 0c       	add	r0, r0
    15a0:	11 f4       	brne	.+4      	; 0x15a6 <__fp_round+0xc>
    15a2:	88 23       	and	r24, r24
    15a4:	52 f0       	brmi	.+20     	; 0x15ba <__fp_round+0x20>
    15a6:	bb 0f       	add	r27, r27
    15a8:	40 f4       	brcc	.+16     	; 0x15ba <__fp_round+0x20>
    15aa:	bf 2b       	or	r27, r31
    15ac:	11 f4       	brne	.+4      	; 0x15b2 <__fp_round+0x18>
    15ae:	60 ff       	sbrs	r22, 0
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <__fp_round+0x20>
    15b2:	6f 5f       	subi	r22, 0xFF	; 255
    15b4:	7f 4f       	sbci	r23, 0xFF	; 255
    15b6:	8f 4f       	sbci	r24, 0xFF	; 255
    15b8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ba:	08 95       	ret

000015bc <__fp_split3>:
    15bc:	57 fd       	sbrc	r21, 7
    15be:	90 58       	subi	r25, 0x80	; 128
    15c0:	44 0f       	add	r20, r20
    15c2:	55 1f       	adc	r21, r21
    15c4:	59 f0       	breq	.+22     	; 0x15dc <__fp_splitA+0x10>
    15c6:	5f 3f       	cpi	r21, 0xFF	; 255
    15c8:	71 f0       	breq	.+28     	; 0x15e6 <__fp_splitA+0x1a>
    15ca:	47 95       	ror	r20

000015cc <__fp_splitA>:
    15cc:	88 0f       	add	r24, r24
    15ce:	97 fb       	bst	r25, 7
    15d0:	99 1f       	adc	r25, r25
    15d2:	61 f0       	breq	.+24     	; 0x15ec <__fp_splitA+0x20>
    15d4:	9f 3f       	cpi	r25, 0xFF	; 255
    15d6:	79 f0       	breq	.+30     	; 0x15f6 <__fp_splitA+0x2a>
    15d8:	87 95       	ror	r24
    15da:	08 95       	ret
    15dc:	12 16       	cp	r1, r18
    15de:	13 06       	cpc	r1, r19
    15e0:	14 06       	cpc	r1, r20
    15e2:	55 1f       	adc	r21, r21
    15e4:	f2 cf       	rjmp	.-28     	; 0x15ca <__fp_split3+0xe>
    15e6:	46 95       	lsr	r20
    15e8:	f1 df       	rcall	.-30     	; 0x15cc <__fp_splitA>
    15ea:	08 c0       	rjmp	.+16     	; 0x15fc <__fp_splitA+0x30>
    15ec:	16 16       	cp	r1, r22
    15ee:	17 06       	cpc	r1, r23
    15f0:	18 06       	cpc	r1, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	f1 cf       	rjmp	.-30     	; 0x15d8 <__fp_splitA+0xc>
    15f6:	86 95       	lsr	r24
    15f8:	71 05       	cpc	r23, r1
    15fa:	61 05       	cpc	r22, r1
    15fc:	08 94       	sec
    15fe:	08 95       	ret

00001600 <__fp_zero>:
    1600:	e8 94       	clt

00001602 <__fp_szero>:
    1602:	bb 27       	eor	r27, r27
    1604:	66 27       	eor	r22, r22
    1606:	77 27       	eor	r23, r23
    1608:	cb 01       	movw	r24, r22
    160a:	97 f9       	bld	r25, 7
    160c:	08 95       	ret

0000160e <__divmodsi4>:
    160e:	05 2e       	mov	r0, r21
    1610:	97 fb       	bst	r25, 7
    1612:	1e f4       	brtc	.+6      	; 0x161a <__divmodsi4+0xc>
    1614:	00 94       	com	r0
    1616:	0e 94 1e 0b 	call	0x163c	; 0x163c <__negsi2>
    161a:	57 fd       	sbrc	r21, 7
    161c:	07 d0       	rcall	.+14     	; 0x162c <__divmodsi4_neg2>
    161e:	0e 94 35 0b 	call	0x166a	; 0x166a <__udivmodsi4>
    1622:	07 fc       	sbrc	r0, 7
    1624:	03 d0       	rcall	.+6      	; 0x162c <__divmodsi4_neg2>
    1626:	4e f4       	brtc	.+18     	; 0x163a <__divmodsi4_exit>
    1628:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__negsi2>

0000162c <__divmodsi4_neg2>:
    162c:	50 95       	com	r21
    162e:	40 95       	com	r20
    1630:	30 95       	com	r19
    1632:	21 95       	neg	r18
    1634:	3f 4f       	sbci	r19, 0xFF	; 255
    1636:	4f 4f       	sbci	r20, 0xFF	; 255
    1638:	5f 4f       	sbci	r21, 0xFF	; 255

0000163a <__divmodsi4_exit>:
    163a:	08 95       	ret

0000163c <__negsi2>:
    163c:	90 95       	com	r25
    163e:	80 95       	com	r24
    1640:	70 95       	com	r23
    1642:	61 95       	neg	r22
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	8f 4f       	sbci	r24, 0xFF	; 255
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	08 95       	ret

0000164c <__umulhisi3>:
    164c:	a2 9f       	mul	r26, r18
    164e:	b0 01       	movw	r22, r0
    1650:	b3 9f       	mul	r27, r19
    1652:	c0 01       	movw	r24, r0
    1654:	a3 9f       	mul	r26, r19
    1656:	70 0d       	add	r23, r0
    1658:	81 1d       	adc	r24, r1
    165a:	11 24       	eor	r1, r1
    165c:	91 1d       	adc	r25, r1
    165e:	b2 9f       	mul	r27, r18
    1660:	70 0d       	add	r23, r0
    1662:	81 1d       	adc	r24, r1
    1664:	11 24       	eor	r1, r1
    1666:	91 1d       	adc	r25, r1
    1668:	08 95       	ret

0000166a <__udivmodsi4>:
    166a:	a1 e2       	ldi	r26, 0x21	; 33
    166c:	1a 2e       	mov	r1, r26
    166e:	aa 1b       	sub	r26, r26
    1670:	bb 1b       	sub	r27, r27
    1672:	fd 01       	movw	r30, r26
    1674:	0d c0       	rjmp	.+26     	; 0x1690 <__udivmodsi4_ep>

00001676 <__udivmodsi4_loop>:
    1676:	aa 1f       	adc	r26, r26
    1678:	bb 1f       	adc	r27, r27
    167a:	ee 1f       	adc	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	a2 17       	cp	r26, r18
    1680:	b3 07       	cpc	r27, r19
    1682:	e4 07       	cpc	r30, r20
    1684:	f5 07       	cpc	r31, r21
    1686:	20 f0       	brcs	.+8      	; 0x1690 <__udivmodsi4_ep>
    1688:	a2 1b       	sub	r26, r18
    168a:	b3 0b       	sbc	r27, r19
    168c:	e4 0b       	sbc	r30, r20
    168e:	f5 0b       	sbc	r31, r21

00001690 <__udivmodsi4_ep>:
    1690:	66 1f       	adc	r22, r22
    1692:	77 1f       	adc	r23, r23
    1694:	88 1f       	adc	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	1a 94       	dec	r1
    169a:	69 f7       	brne	.-38     	; 0x1676 <__udivmodsi4_loop>
    169c:	60 95       	com	r22
    169e:	70 95       	com	r23
    16a0:	80 95       	com	r24
    16a2:	90 95       	com	r25
    16a4:	9b 01       	movw	r18, r22
    16a6:	ac 01       	movw	r20, r24
    16a8:	bd 01       	movw	r22, r26
    16aa:	cf 01       	movw	r24, r30
    16ac:	08 95       	ret

000016ae <_exit>:
    16ae:	f8 94       	cli

000016b0 <__stop_program>:
    16b0:	ff cf       	rjmp	.-2      	; 0x16b0 <__stop_program>
