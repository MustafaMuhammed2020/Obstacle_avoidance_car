
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00001782  00001816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000a6  008000a6  0000185c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000188c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003831  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000101e  00000000  00000000  00005409  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000208f  00000000  00000000  00006427  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  000084b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000efd  00000000  00000000  00008a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143e  00000000  00000000  00009995  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000add3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a5 07 	call	0xf4a	; 0xf4a <main>
      8a:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint32_t u32_g_tick = 0 ;            /** GLOBAL VARIABLE TO BE COMPARED WITH DELAY TICKS **/   

/** FUNCTION TO INITIALIZE APPLICATION MODULES **/
void APP_init()
{
    ICU_init(); /** INITIALIZE ICU **/
      92:	0e 94 f7 03 	call	0x7ee	; 0x7ee <ICU_init>

	US_init(); /** INITILAIZATION ULTRASONIC MODULE **/
      96:	0e 94 8e 07 	call	0xf1c	; 0xf1c <US_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
      9a:	0e 94 32 09 	call	0x1264	; 0x1264 <TMR0_init>
	
	TMR2_init() ; /** INITIALIZE TIMER 2 **/
      9e:	0e 94 05 0a 	call	0x140a	; 0x140a <TMR2_init>
	
	KEYPAD_init() ; /** INITIALIZE KEYPAD **/
      a2:	0e 94 18 04 	call	0x830	; 0x830 <KEYPAD_init>
	
	Button_init(); /** INITIALIZATION OF BUTTON **/
      a6:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Button_init>
	
	LCD_init(); /** INITIALIZE LCD **/
      aa:	0e 94 42 05 	call	0xa84	; 0xa84 <LCD_init>
	
	TMR0_delayms(MS_DELAY_50); /** DELAY FOR LCD INITIALIZATION **/
      ae:	62 e3       	ldi	r22, 0x32	; 50
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>

	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 80 06 	call	0xd00	; 0xd00 <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 80 06 	call	0xd00	; 0xd00 <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 80 06 	call	0xd00	; 0xd00 <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 80 06 	call	0xd00	; 0xd00 <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
      ea:	08 95       	ret

000000ec <APP_setentry>:

}

/** FUNCTION TO SET DEFAULTS **/
void APP_setentry()
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <APP_setentry+0x6>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_a_btnstatus = 0 , u8_a_pressednum = 0 ;
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	1a 82       	std	Y+2, r1	; 0x02
	
 	u32_g_tick = 0 ;
      fa:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
      fe:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     102:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     106:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     10a:	88 e8       	ldi	r24, 0x88	; 136
     10c:	93 e1       	ldi	r25, 0x13	; 19
     10e:	0e 94 32 0a 	call	0x1464	; 0x1464 <TMR2_getovs>
     112:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     116:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     11a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     11e:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>

 	TMR2_start() ; /** START TIMER 2 **/
     122:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TMR2_start>

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     126:	51 c0       	rjmp	.+162    	; 0x1ca <APP_setentry+0xde>
	{
 		LCD_goto(LCD_POS_0 , LCD_POS_1);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
 		LCD_writestr("Set Def. Rot");
     130:	80 e6       	ldi	r24, 0x60	; 96
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_writestr>

 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON PRESSED **/
     138:	ae 01       	movw	r20, r28
     13a:	4f 5f       	subi	r20, 0xFF	; 255
     13c:	5f 4f       	sbci	r21, 0xFF	; 255
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Is_pressed>
 		TMR0_delayms(MS_DELAY_100); /** WAIT 100 MS FOR BUTTON TO SETTLE **/
     146:	64 e6       	ldi	r22, 0x64	; 100
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>
 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON IS STILL PRESSED **/
     152:	ae 01       	movw	r20, r28
     154:	4f 5f       	subi	r20, 0xFF	; 255
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <Is_pressed>

		if (u8_a_btnstatus) /** IF THE BUTTON PRESSED **/
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 23       	and	r24, r24
     164:	91 f1       	breq	.+100    	; 0x1ca <APP_setentry+0xde>
 		{
 			u8_g_rotationcounter++ ; /** INCREASE ROTATION COUNTER BY 1 **/
     166:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <u8_g_rotationcounter>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <u8_g_rotationcounter>

 			if (u8_g_rotationcounter == LEFT_ROTATION) /** LEFT ROTATION **/
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	a1 f4       	brne	.+40     	; 0x19c <APP_setentry+0xb0>
 			{
				LCD_goto(LCD_POS_1 , LCD_POS_1);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
				LCD_writestr("LEFT ROTATION");
     17a:	8d e6       	ldi	r24, 0x6D	; 109
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_writestr>
				
				MOTOR_rotateanticlkdir(MOTOR1_ID); /** SET ROTATION DIRECTION "LEFT" **/
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
				MOTOR_rotateanticlkdir(MOTOR2_ID);
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
				MOTOR_rotateanticlkdir(MOTOR3_ID);
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
				MOTOR_rotateanticlkdir(MOTOR4_ID);
     194:	83 e0       	ldi	r24, 0x03	; 3
     196:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
     19a:	16 c0       	rjmp	.+44     	; 0x1c8 <APP_setentry+0xdc>
			}
	 		else if(u8_g_rotationcounter == RIGHT_ROTATION) /** RIGHT ROTATION **/
     19c:	82 30       	cpi	r24, 0x02	; 2
     19e:	a1 f4       	brne	.+40     	; 0x1c8 <APP_setentry+0xdc>
	 		{
 				LCD_goto(LCD_POS_1 , LCD_POS_1);
     1a0:	61 e0       	ldi	r22, 0x01	; 1
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
 				LCD_writestr("RIGHT ROTATION");
     1a8:	8b e7       	ldi	r24, 0x7B	; 123
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_writestr>
				 
				 MOTOR_rotateclkdir(MOTOR1_ID);  /** SET ROTATION DIRECTION "RIGHT" **/
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
				 MOTOR_rotateclkdir(MOTOR2_ID);
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
				 MOTOR_rotateclkdir(MOTOR3_ID);
     1bc:	82 e0       	ldi	r24, 0x02	; 2
     1be:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
				 MOTOR_rotateclkdir(MOTOR4_ID);
     1c2:	83 e0       	ldi	r24, 0x03	; 3
     1c4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
     1c8:	19 82       	std	Y+1, r1	; 0x01
	 
 	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

 	TMR2_start() ; /** START TIMER 2 **/

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     1ca:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     1ce:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     1d2:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     1d6:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     1da:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     1de:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     1e2:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     1e6:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     1ea:	48 17       	cp	r20, r24
     1ec:	59 07       	cpc	r21, r25
     1ee:	6a 07       	cpc	r22, r26
     1f0:	7b 07       	cpc	r23, r27
     1f2:	08 f4       	brcc	.+2      	; 0x1f6 <APP_setentry+0x10a>
     1f4:	99 cf       	rjmp	.-206    	; 0x128 <APP_setentry+0x3c>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
 		}
 	}
	
 	TMR2_stop(); /** STOP TIMER 2 **/
     1f6:	0e 94 27 0a 	call	0x144e	; 0x144e <TMR2_stop>
		
	do /** ACCEPT KEYPAD BUTTON 1 FROM USER **/
	{
 		KEYPAD_read(&u8_a_pressednum);
     1fa:	ce 01       	movw	r24, r28
     1fc:	02 96       	adiw	r24, 0x02	; 2
     1fe:	0e 94 56 04 	call	0x8ac	; 0x8ac <KEYPAD_read>
 	} while (u8_a_pressednum != START_BTN);
     202:	8a 81       	ldd	r24, Y+2	; 0x02
     204:	81 33       	cpi	r24, 0x31	; 49
     206:	c9 f7       	brne	.-14     	; 0x1fa <APP_setentry+0x10e>

 	 LCD_sendcmd(LCD_CLEAR);
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     20e:	64 e1       	ldi	r22, 0x14	; 20
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>
	 
	 LCD_goto(LCD_POS_0 , LCD_POS_2);
     21a:	62 e0       	ldi	r22, 0x02	; 2
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
	 LCD_writestr("WAITING..");
     222:	8a e8       	ldi	r24, 0x8A	; 138
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_writestr>
	 
	 TMR0_delayms(MS_DELAY_2000); /** WAIT 2 SECONDS **/
     22a:	60 ed       	ldi	r22, 0xD0	; 208
     22c:	77 e0       	ldi	r23, 0x07	; 7
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>
	 
	 LCD_sendcmd(LCD_CLEAR);
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_sendcmd>
	 TMR0_delayms(MS_DELAY_20);
     23c:	64 e1       	ldi	r22, 0x14	; 20
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>
	 
	 LCD_goto(LCD_POS_0, LCD_POS_1) ; /** DISPLAY THE DISTANCE **/
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
	 LCD_writestr("Dis:");
     250:	84 e9       	ldi	r24, 0x94	; 148
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_writestr>
	 
	 LCD_goto(LCD_POS_0, LCD_POS_8) ; /** DISPLAY THE SPEED **/
     258:	68 e0       	ldi	r22, 0x08	; 8
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
	 LCD_writechar('S');
     260:	83 e5       	ldi	r24, 0x53	; 83
     262:	0e 94 83 05 	call	0xb06	; 0xb06 <LCD_writechar>
	 LCD_writechar(':');
     266:	8a e3       	ldi	r24, 0x3A	; 58
     268:	0e 94 83 05 	call	0xb06	; 0xb06 <LCD_writechar>
	 
	 LCD_goto(LCD_POS_1, LCD_POS_1) ; /** DISPLAY THE DIRECTION OF MOVEMENT **/
     26c:	61 e0       	ldi	r22, 0x01	; 1
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
	 LCD_writestr("Dir:");
     274:	89 e9       	ldi	r24, 0x99	; 153
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_writestr>
	 
}
     27c:	0f 90       	pop	r0
     27e:	0f 90       	pop	r0
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <APP_start>:

void APP_start()
{	
	u32_g_tick = 0 , u32_g_delay = 0 ; /** VARIABLES TO HANDLE THE DELAY **/
     286:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
     28a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     28e:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     292:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
     296:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <u32_g_delay>
     29a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <u32_g_delay+0x1>
     29e:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <u32_g_delay+0x2>
     2a2:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <u32_g_delay+0x3>
	
	US_sendtrigger(); /** SEND TRIGGER **/
     2a6:	0e 94 94 07 	call	0xf28	; 0xf28 <US_sendtrigger>
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     2aa:	88 e8       	ldi	r24, 0x88	; 136
     2ac:	93 e1       	ldi	r25, 0x13	; 19
     2ae:	0e 94 32 0a 	call	0x1464	; 0x1464 <TMR2_getovs>
     2b2:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     2b6:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     2ba:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     2be:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     2c2:	a5 c0       	rjmp	.+330    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
     2c4:	af e9       	ldi	r26, 0x9F	; 159
     2c6:	b6 e4       	ldi	r27, 0x46	; 70
     2c8:	0e 94 8e 0b 	call	0x171c	; 0x171c <__umulhisi3>
     2cc:	88 0f       	add	r24, r24
     2ce:	89 2f       	mov	r24, r25
     2d0:	88 1f       	adc	r24, r24
     2d2:	99 0b       	sbc	r25, r25
     2d4:	91 95       	neg	r25
     2d6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <u8_g_distance>
			
			TMR2_start() ; /** START TIMER 2 **/
     2da:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TMR2_start>
		
			while (u32_g_tick < u32_g_delay && (u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE )
     2de:	38 c0       	rjmp	.+112    	; 0x350 <APP_start+0xca>
			{
				/** MOVE WITH 50% SPEED FOR 5 MIN **/
				MOTOR_turnon(MOTOR1_ID);
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
				MOTOR_turnon(MOTOR2_ID);
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
				MOTOR_turnon(MOTOR3_ID);
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
				MOTOR_turnon(MOTOR4_ID);
     2f2:	83 e0       	ldi	r24, 0x03	; 3
     2f4:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
				LCD_goto(LCD_POS_0, LCD_POS_10) ;
     2f8:	6a e0       	ldi	r22, 0x0A	; 10
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
				LCD_writestr("50%");
     300:	8e e9       	ldi	r24, 0x9E	; 158
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_writestr>
				TMR0_delaymicros(SPEED_50_ON_TIME);
     308:	60 ef       	ldi	r22, 0xF0	; 240
     30a:	73 e2       	ldi	r23, 0x23	; 35
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 95 09 	call	0x132a	; 0x132a <TMR0_delaymicros>
				
				MOTOR_turnoff(MOTOR1_ID);
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR2_ID);
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR3_ID);
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
				MOTOR_turnoff(MOTOR4_ID);
     326:	83 e0       	ldi	r24, 0x03	; 3
     328:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
				LCD_goto(LCD_POS_0, LCD_POS_5) ;
     32c:	65 e0       	ldi	r22, 0x05	; 5
     32e:	80 e0       	ldi	r24, 0x00	; 0
     330:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
				LCD_writeint(u8_g_distance);
     334:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 f5 05 	call	0xbea	; 0xbea <LCD_writeint>
				LCD_goto(LCD_POS_1, LCD_POS_5) ;
     342:	65 e0       	ldi	r22, 0x05	; 5
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
				LCD_writechar('F');
     34a:	86 e4       	ldi	r24, 0x46	; 70
     34c:	0e 94 83 05 	call	0xb06	; 0xb06 <LCD_writechar>
		{		
			u8_g_distance = (u16_g_time/DISTANCE_DIV) ; /** CALCULATE THE DISTANCE **/
			
			TMR2_start() ; /** START TIMER 2 **/
		
			while (u32_g_tick < u32_g_delay && (u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE )
     350:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     354:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     358:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     35c:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     360:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     364:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     368:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     36c:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     370:	48 17       	cp	r20, r24
     372:	59 07       	cpc	r21, r25
     374:	6a 07       	cpc	r22, r26
     376:	7b 07       	cpc	r23, r27
     378:	40 f4       	brcc	.+16     	; 0x38a <APP_start+0x104>
     37a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     37e:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     382:	80 3b       	cpi	r24, 0xB0	; 176
     384:	90 48       	sbci	r25, 0x80	; 128
     386:	08 f0       	brcs	.+2      	; 0x38a <APP_start+0x104>
     388:	ab cf       	rjmp	.-170    	; 0x2e0 <APP_start+0x5a>
				LCD_writeint(u8_g_distance);
				LCD_goto(LCD_POS_1, LCD_POS_5) ;
				LCD_writechar('F');
			}
					
			TMR2_stop() ; /** STOP TIMER2 AFTER THE 5 SECONDS **/
     38a:	0e 94 27 0a 	call	0x144e	; 0x144e <TMR2_stop>
					
			/** CONTINUE WITH 30% **/
			MOTOR_turnon(MOTOR1_ID);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
			LCD_goto(LCD_POS_0, LCD_POS_10) ;
     3a6:	6a e0       	ldi	r22, 0x0A	; 10
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
			LCD_writestr("30%");
     3ae:	82 ea       	ldi	r24, 0xA2	; 162
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_writestr>
			TMR0_delaymicros(SPEED_30_ON_TIME);
     3b6:	64 e6       	ldi	r22, 0x64	; 100
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 95 09 	call	0x132a	; 0x132a <TMR0_delaymicros>
			
			MOTOR_turnoff(MOTOR1_ID);
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR2_ID);
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR3_ID);
     3ce:	82 e0       	ldi	r24, 0x02	; 2
     3d0:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
			MOTOR_turnoff(MOTOR4_ID);
     3d4:	83 e0       	ldi	r24, 0x03	; 3
     3d6:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
			
			TMR0_delaymicros(SPEED_30_OFF_TIME);
     3da:	60 e2       	ldi	r22, 0x20	; 32
     3dc:	7e e4       	ldi	r23, 0x4E	; 78
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 95 09 	call	0x132a	; 0x132a <TMR0_delaymicros>
			LCD_goto(LCD_POS_0, LCD_POS_5) ;
     3e6:	65 e0       	ldi	r22, 0x05	; 5
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
			LCD_writeint(u8_g_distance);
     3ee:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 f5 05 	call	0xbea	; 0xbea <LCD_writeint>
			LCD_goto(LCD_POS_1, LCD_POS_5) ;
     3fc:	65 e0       	ldi	r22, 0x05	; 5
     3fe:	81 e0       	ldi	r24, 0x01	; 1
     400:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
			LCD_writechar('F');
     404:	86 e4       	ldi	r24, 0x46	; 70
     406:	0e 94 83 05 	call	0xb06	; 0xb06 <LCD_writechar>
			US_sendtrigger(); /** SEND TRIGGER **/
     40a:	0e 94 94 07 	call	0xf28	; 0xf28 <US_sendtrigger>
	
	US_sendtrigger(); /** SEND TRIGGER **/
		
	u32_g_delay =  TMR2_getovs(OVERFLOW_5_SEC) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) > SAFE_DISTANCE) /** DISTANCE GREATER THAN 70 **/
     40e:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <u16_g_time>
     412:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     416:	20 3b       	cpi	r18, 0xB0	; 176
     418:	80 e8       	ldi	r24, 0x80	; 128
     41a:	38 07       	cpc	r19, r24
     41c:	08 f0       	brcs	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     41e:	52 cf       	rjmp	.-348    	; 0x2c4 <APP_start+0x3e>
     420:	40 c0       	rjmp	.+128    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
	{
		/** CONTINUE WITH 30% **/
		MOTOR_turnon(MOTOR1_ID);
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     428:	81 e0       	ldi	r24, 0x01	; 1
     42a:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     434:	83 e0       	ldi	r24, 0x03	; 3
     436:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
		LCD_goto(LCD_POS_0, LCD_POS_10) ;
     43a:	6a e0       	ldi	r22, 0x0A	; 10
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
		LCD_writestr("30%");
     442:	82 ea       	ldi	r24, 0xA2	; 162
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_writestr>
		TMR0_delaymicros(SPEED_30_ON_TIME);
     44a:	64 e6       	ldi	r22, 0x64	; 100
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 95 09 	call	0x132a	; 0x132a <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
		
		TMR0_delaymicros(SPEED_30_OFF_TIME);
     46e:	60 e2       	ldi	r22, 0x20	; 32
     470:	7e e4       	ldi	r23, 0x4E	; 78
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 95 09 	call	0x132a	; 0x132a <TMR0_delaymicros>
		LCD_goto(LCD_POS_0, LCD_POS_5) ;
     47a:	65 e0       	ldi	r22, 0x05	; 5
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
		LCD_writeint(u8_g_distance);
     482:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 f5 05 	call	0xbea	; 0xbea <LCD_writeint>
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
     490:	65 e0       	ldi	r22, 0x05	; 5
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
		LCD_writechar('F');
     498:	86 e4       	ldi	r24, 0x46	; 70
     49a:	0e 94 83 05 	call	0xb06	; 0xb06 <LCD_writechar>
		US_sendtrigger(); /** SEND TRIGGER **/
     49e:	0e 94 94 07 	call	0xf28	; 0xf28 <US_sendtrigger>
			LCD_goto(LCD_POS_1, LCD_POS_5) ;
			LCD_writechar('F');
			US_sendtrigger(); /** SEND TRIGGER **/
		}

	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_30) /** DISTANCE BETWEEN 70 AND 30 **/
     4a2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     4a6:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     4aa:	80 36       	cpi	r24, 0x60	; 96
     4ac:	96 43       	sbci	r25, 0x36	; 54
     4ae:	08 f0       	brcs	.+2      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     4b0:	b8 cf       	rjmp	.-144    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
		LCD_writechar('F');
		US_sendtrigger(); /** SEND TRIGGER **/
	}
	
	u32_g_tick = 0 ;
     4b2:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end>
     4b6:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x1>
     4ba:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__data_end+0x2>
     4be:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__data_end+0x3>
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     4c2:	84 ef       	ldi	r24, 0xF4	; 244
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 32 0a 	call	0x1464	; 0x1464 <TMR2_getovs>
     4ca:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <u32_g_delay>
     4ce:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <u32_g_delay+0x1>
     4d2:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <u32_g_delay+0x2>
     4d6:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <u32_g_delay+0x3>
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     4da:	4e c0       	rjmp	.+156    	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
	{
		/** STOP THEN ROTATE **/
		MOTOR_turnoff(MOTOR1_ID);
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     4ee:	83 e0       	ldi	r24, 0x03	; 3
     4f0:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
		
		LCD_goto(LCD_POS_0, LCD_POS_10) ;
     4f4:	6a e0       	ldi	r22, 0x0A	; 10
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
		LCD_writestr("30%");
     4fc:	82 ea       	ldi	r24, 0xA2	; 162
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_writestr>
		
		TMR0_delaymicros(SPEED_30_OFF_TIME);
     504:	60 e2       	ldi	r22, 0x20	; 32
     506:	7e e4       	ldi	r23, 0x4E	; 78
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 95 09 	call	0x132a	; 0x132a <TMR0_delaymicros>
		LCD_goto(LCD_POS_0, LCD_POS_5) ;
     510:	65 e0       	ldi	r22, 0x05	; 5
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
		LCD_writeint(u8_g_distance);
     518:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 f5 05 	call	0xbea	; 0xbea <LCD_writeint>
		
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
     526:	65 e0       	ldi	r22, 0x05	; 5
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
		LCD_writechar('R');
     52e:	82 e5       	ldi	r24, 0x52	; 82
     530:	0e 94 83 05 	call	0xb06	; 0xb06 <LCD_writechar>
		
		TMR2_start() ; /** START TIMER 2 **/
     534:	0e 94 1c 0a 	call	0x1438	; 0x1438 <TMR2_start>
		while (u32_g_tick < u32_g_delay)
     538:	06 c0       	rjmp	.+12     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
		
		LCD_goto(LCD_POS_1, LCD_POS_5) ;
		LCD_writechar('R');
		
		TMR2_start() ; /** START TIMER 2 **/
		while (u32_g_tick < u32_g_delay)
     546:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <__data_end>
     54a:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <__data_end+0x1>
     54e:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <__data_end+0x2>
     552:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <__data_end+0x3>
     556:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u32_g_delay>
     55a:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <u32_g_delay+0x1>
     55e:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <u32_g_delay+0x2>
     562:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <u32_g_delay+0x3>
     566:	48 17       	cp	r20, r24
     568:	59 07       	cpc	r21, r25
     56a:	6a 07       	cpc	r22, r26
     56c:	7b 07       	cpc	r23, r27
     56e:	28 f3       	brcs	.-54     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
		{	
			/** ROTATION **/
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}
		TMR2_stop(); /** STOP TIMER 2 **/
     570:	0e 94 27 0a 	call	0x144e	; 0x144e <TMR2_stop>
			
		US_sendtrigger(); /** SEND TRIGGER **/
     574:	0e 94 94 07 	call	0xf28	; 0xf28 <US_sendtrigger>
	}
	
	u32_g_tick = 0 ;
	u32_g_delay =  TMR2_getovs(ROTATION_OVF) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
	
	while((u16_g_time/DISTANCE_DIV) >= DISTANCE_20 && (u16_g_time/DISTANCE_DIV) < DISTANCE_30) /** DISTANCE FROM 20 TO 30 CM **/
     578:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     57c:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     580:	80 54       	subi	r24, 0x40	; 64
     582:	94 42       	sbci	r25, 0x24	; 36
     584:	80 32       	cpi	r24, 0x20	; 32
     586:	92 41       	sbci	r25, 0x12	; 18
     588:	08 f4       	brcc	.+2      	; 0x58c <__EEPROM_REGION_LENGTH__+0x18c>
     58a:	a8 cf       	rjmp	.-176    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     58c:	88 c0       	rjmp	.+272    	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
	{
		if ( u8_g_rotationcounter == LEFT_ROTATION )
     58e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <u8_g_rotationcounter>
     592:	81 30       	cpi	r24, 0x01	; 1
     594:	69 f4       	brne	.+26     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
		{
			MOTOR_rotateclkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR2_ID);
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR3_ID);
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
			MOTOR_rotateclkdir(MOTOR4_ID);
     5a8:	83 e0       	ldi	r24, 0x03	; 3
     5aa:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
     5ae:	50 c0       	rjmp	.+160    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		}
		else if ( u8_g_rotationcounter == RIGHT_ROTATION )
     5b0:	82 30       	cpi	r24, 0x02	; 2
     5b2:	09 f0       	breq	.+2      	; 0x5b6 <__EEPROM_REGION_LENGTH__+0x1b6>
     5b4:	4d c0       	rjmp	.+154    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		{
			MOTOR_rotateanticlkdir(MOTOR1_ID); /** MOVE BACKWORDS  **/
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
			MOTOR_rotateanticlkdir(MOTOR2_ID);
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
			MOTOR_rotateanticlkdir(MOTOR3_ID);
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
			MOTOR_rotateanticlkdir(MOTOR4_ID);
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
     5ce:	40 c0       	rjmp	.+128    	; 0x650 <__EEPROM_REGION_LENGTH__+0x250>
		
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
		   {
			  /** GO BACKWARDS WITH 30% SPEED **/
			  MOTOR_turnon(MOTOR1_ID);
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
			  MOTOR_turnon(MOTOR2_ID);
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
		      MOTOR_turnon(MOTOR3_ID);
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
			  MOTOR_turnon(MOTOR4_ID);
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	0e 94 68 07 	call	0xed0	; 0xed0 <MOTOR_turnon>
			  LCD_goto(LCD_POS_0, LCD_POS_10) ;
     5e8:	6a e0       	ldi	r22, 0x0A	; 10
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
			  LCD_writestr("30%");
     5f0:	82 ea       	ldi	r24, 0xA2	; 162
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 ca 05 	call	0xb94	; 0xb94 <LCD_writestr>
			  TMR0_delaymicros(SPEED_30_ON_TIME);
     5f8:	64 e6       	ldi	r22, 0x64	; 100
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 95 09 	call	0x132a	; 0x132a <TMR0_delaymicros>
			
			  MOTOR_turnoff(MOTOR1_ID);
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR2_ID);
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR3_ID);
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
			  MOTOR_turnoff(MOTOR4_ID);
     616:	83 e0       	ldi	r24, 0x03	; 3
     618:	0e 94 42 07 	call	0xe84	; 0xe84 <MOTOR_turnoff>
			  
			  TMR0_delaymicros(SPEED_30_OFF_TIME);
     61c:	60 e2       	ldi	r22, 0x20	; 32
     61e:	7e e4       	ldi	r23, 0x4E	; 78
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 95 09 	call	0x132a	; 0x132a <TMR0_delaymicros>
			  LCD_goto(LCD_POS_0, LCD_POS_5) ;
     628:	65 e0       	ldi	r22, 0x05	; 5
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
			  LCD_writeint(u8_g_distance);
     630:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <u8_g_distance>
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 f5 05 	call	0xbea	; 0xbea <LCD_writeint>
			  LCD_goto(LCD_POS_1, LCD_POS_5) ;
     63e:	65 e0       	ldi	r22, 0x05	; 5
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 dd 05 	call	0xbba	; 0xbba <LCD_goto>
			  LCD_writechar('B');
     646:	82 e4       	ldi	r24, 0x42	; 66
     648:	0e 94 83 05 	call	0xb06	; 0xb06 <LCD_writechar>
			  US_sendtrigger(); /** SEND TRIGGER **/
     64c:	0e 94 94 07 	call	0xf28	; 0xf28 <US_sendtrigger>
			MOTOR_rotateanticlkdir(MOTOR3_ID);
			MOTOR_rotateanticlkdir(MOTOR4_ID);
		}
		
		
		while ((u16_g_time/DISTANCE_DIV) <= DISTANCE_20)
     650:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     654:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     658:	80 31       	cpi	r24, 0x10	; 16
     65a:	96 42       	sbci	r25, 0x26	; 38
     65c:	08 f4       	brcc	.+2      	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
     65e:	b8 cf       	rjmp	.-144    	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
			  LCD_writechar('B');
			  US_sendtrigger(); /** SEND TRIGGER **/
		   }
			
			/** BACK TO THE PRESET DIRECTION **/
			if ( u8_g_rotationcounter == LEFT_ROTATION )
     660:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <u8_g_rotationcounter>
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	69 f4       	brne	.+26     	; 0x682 <__EEPROM_REGION_LENGTH__+0x282>
			{
				MOTOR_rotateanticlkdir(MOTOR1_ID); 
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
				MOTOR_rotateanticlkdir(MOTOR2_ID);
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
				MOTOR_rotateanticlkdir(MOTOR3_ID);
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
				MOTOR_rotateanticlkdir(MOTOR4_ID);
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	0e 94 08 07 	call	0xe10	; 0xe10 <MOTOR_rotateanticlkdir>
     680:	0e c0       	rjmp	.+28     	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
			}
			else if ( u8_g_rotationcounter == RIGHT_ROTATION )
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	61 f4       	brne	.+24     	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
			{
				MOTOR_rotateclkdir(MOTOR1_ID); 
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
				MOTOR_rotateclkdir(MOTOR2_ID);
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
				MOTOR_rotateclkdir(MOTOR3_ID);
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
				MOTOR_rotateclkdir(MOTOR4_ID);
     698:	83 e0       	ldi	r24, 0x03	; 3
     69a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MOTOR_rotateclkdir>
		TMR2_stop(); /** STOP TIMER 2 **/
			
		US_sendtrigger(); /** SEND TRIGGER **/
	}

	while((u16_g_time/DISTANCE_DIV) < DISTANCE_20) /** WHEN DISTANCE IS LESS THAN 20 **/
     69e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <u16_g_time>
     6a2:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     6a6:	80 34       	cpi	r24, 0x40	; 64
     6a8:	94 42       	sbci	r25, 0x24	; 36
     6aa:	08 f4       	brcc	.+2      	; 0x6ae <__EEPROM_REGION_LENGTH__+0x2ae>
     6ac:	70 cf       	rjmp	.-288    	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
				MOTOR_rotateclkdir(MOTOR2_ID);
				MOTOR_rotateclkdir(MOTOR3_ID);
				MOTOR_rotateclkdir(MOTOR4_ID);
			}
	}
}
     6ae:	08 95       	ret

000006b0 <__vector_1>:



/** EXTI0 **/
ISR(INT0_vect)
{
     6b0:	1f 92       	push	r1
     6b2:	0f 92       	push	r0
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	0f 92       	push	r0
     6b8:	11 24       	eor	r1, r1
     6ba:	2f 93       	push	r18
     6bc:	3f 93       	push	r19
     6be:	4f 93       	push	r20
     6c0:	5f 93       	push	r21
     6c2:	6f 93       	push	r22
     6c4:	7f 93       	push	r23
     6c6:	8f 93       	push	r24
     6c8:	9f 93       	push	r25
     6ca:	af 93       	push	r26
     6cc:	bf 93       	push	r27
     6ce:	ef 93       	push	r30
     6d0:	ff 93       	push	r31
	u8_echoedge++ ; /** INCREASE THE ECHO BY 1 **/
     6d2:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <u8_echoedge>
     6d6:	8f 5f       	subi	r24, 0xFF	; 255
     6d8:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <u8_echoedge>
	
	if(u8_echoedge == FIRST_EDGE ) /** FIRST CHANGE (RISING EDGE) **/
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	19 f4       	brne	.+6      	; 0x6e6 <__vector_1+0x36>
	{
		ICU_start(); /** START ICU / COUNTING **/
     6e0:	0e 94 0f 04 	call	0x81e	; 0x81e <ICU_start>
     6e4:	1f c0       	rjmp	.+62     	; 0x724 <__vector_1+0x74>
	}
	
	else if(u8_echoedge == SECOND_EDGE) /** SECOND CHANGE (FALLING EDGE) **/
     6e6:	82 30       	cpi	r24, 0x02	; 2
     6e8:	e9 f4       	brne	.+58     	; 0x724 <__vector_1+0x74>
	{
		ICU_stop(); /** STOP ICU / COUNTING **/
     6ea:	0e 94 15 04 	call	0x82a	; 0x82a <ICU_stop>
		
		u16_g_time = ICU_getvalue(); /** GET PULSE LENGTH **/
     6ee:	0e 94 fd 03 	call	0x7fa	; 0x7fa <ICU_getvalue>
     6f2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <u16_g_time+0x1>
     6f6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <u16_g_time>
		
		ICU_setcounterval(INITIATE_COUNTER_VAL); /** START COUNTING FROM ZERO **/
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 12 04 	call	0x824	; 0x824 <ICU_setcounterval>
				
		u8_echoedge = 0 ;     /** REINITIALIZE ECHO EDGE TO 0 TO REPEAT IN ANY CHANGE AGAIN **/
     702:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <u8_echoedge>
		
		u8_g_distance = (u16_g_time / US_DIVIDER) ; /** CALCULATE THE DISTANCE **/
     706:	20 91 b0 00 	lds	r18, 0x00B0	; 0x8000b0 <u16_g_time>
     70a:	30 91 b1 00 	lds	r19, 0x00B1	; 0x8000b1 <u16_g_time+0x1>
     70e:	af e9       	ldi	r26, 0x9F	; 159
     710:	b6 e4       	ldi	r27, 0x46	; 70
     712:	0e 94 8e 0b 	call	0x171c	; 0x171c <__umulhisi3>
     716:	88 0f       	add	r24, r24
     718:	89 2f       	mov	r24, r25
     71a:	88 1f       	adc	r24, r24
     71c:	99 0b       	sbc	r25, r25
     71e:	91 95       	neg	r25
     720:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <u8_g_distance>
	}
}
     724:	ff 91       	pop	r31
     726:	ef 91       	pop	r30
     728:	bf 91       	pop	r27
     72a:	af 91       	pop	r26
     72c:	9f 91       	pop	r25
     72e:	8f 91       	pop	r24
     730:	7f 91       	pop	r23
     732:	6f 91       	pop	r22
     734:	5f 91       	pop	r21
     736:	4f 91       	pop	r20
     738:	3f 91       	pop	r19
     73a:	2f 91       	pop	r18
     73c:	0f 90       	pop	r0
     73e:	0f be       	out	0x3f, r0	; 63
     740:	0f 90       	pop	r0
     742:	1f 90       	pop	r1
     744:	18 95       	reti

00000746 <__vector_9>:


/** TIMER 1 OVERFLOW **/ 
ISR(TIMER1_OVF_vect)
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
	/** DO NOTHING **/ 
}
     750:	0f 90       	pop	r0
     752:	0f be       	out	0x3f, r0	; 63
     754:	0f 90       	pop	r0
     756:	1f 90       	pop	r1
     758:	18 95       	reti

0000075a <__vector_5>:

/** TIMER 0 OVERFLOW  **/
ISR(TIMER2_OVF_vect)
{
     75a:	1f 92       	push	r1
     75c:	0f 92       	push	r0
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	0f 92       	push	r0
     762:	11 24       	eor	r1, r1
     764:	8f 93       	push	r24
     766:	9f 93       	push	r25
     768:	af 93       	push	r26
     76a:	bf 93       	push	r27
	u32_g_tick++ ; /** INCREASE TICKS **/  
     76c:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end>
     770:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__data_end+0x1>
     774:	a0 91 a8 00 	lds	r26, 0x00A8	; 0x8000a8 <__data_end+0x2>
     778:	b0 91 a9 00 	lds	r27, 0x00A9	; 0x8000a9 <__data_end+0x3>
     77c:	01 96       	adiw	r24, 0x01	; 1
     77e:	a1 1d       	adc	r26, r1
     780:	b1 1d       	adc	r27, r1
     782:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end>
     786:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__data_end+0x1>
     78a:	a0 93 a8 00 	sts	0x00A8, r26	; 0x8000a8 <__data_end+0x2>
     78e:	b0 93 a9 00 	sts	0x00A9, r27	; 0x8000a9 <__data_end+0x3>
}
     792:	bf 91       	pop	r27
     794:	af 91       	pop	r26
     796:	9f 91       	pop	r25
     798:	8f 91       	pop	r24
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(void)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(BUTTON1_PORT , BUTTON1_PIN , DIO_PIN_INPUT);
     7a4:	40 e0       	ldi	r20, 0x00	; 0
     7a6:	63 e0       	ldi	r22, 0x03	; 3
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
     7ae:	08 95       	ret

000007b0 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
en_a_button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	1f 92       	push	r1
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62
     7be:	8a 01       	movw	r16, r20
	en_a_button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
     7c0:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
     7c2:	ae 01       	movw	r20, r28
     7c4:	4f 5f       	subi	r20, 0xFF	; 255
     7c6:	5f 4f       	sbci	r21, 0xFF	; 255
     7c8:	0e 94 aa 08 	call	0x1154	; 0x1154 <DIO_readpin>
	
	if (!pin_status) 
     7cc:	81 11       	cpse	r24, r1
     7ce:	05 c0       	rjmp	.+10     	; 0x7da <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	f8 01       	movw	r30, r16
     7d4:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	04 c0       	rjmp	.+8      	; 0x7e2 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	f8 01       	movw	r30, r16
     7de:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     7e0:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
     7e2:	0f 90       	pop	r0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <ICU_init>:
/**************************************************************/
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	TMR1_init(); /** INITIALIZE TIMER 1 MODULE **/
     7ee:	0e 94 c9 09 	call	0x1392	; 0x1392 <TMR1_init>
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
     7f2:	0e 94 26 09 	call	0x124c	; 0x124c <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	08 95       	ret

000007fa <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	00 d0       	rcall	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
     804:	1a 82       	std	Y+2, r1	; 0x02
     806:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
     808:	ce 01       	movw	r24, r28
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	9a 81       	ldd	r25, Y+2	; 0x02
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <ICU_start>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_start(void)
{
	TMR1_start(); /** START TIMER1 COUNTING **/
     81e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <TMR1_start>
     822:	08 95       	ret

00000824 <ICU_setcounterval>:
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_setcounterval(uint16t u16_a_counterval)
{
	TMR1_setcounterval(u16_a_counterval);
     824:	0e 94 02 0a 	call	0x1404	; 0x1404 <TMR1_setcounterval>
     828:	08 95       	ret

0000082a <ICU_stop>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_stop(void)
{
	TMR1_stop();  /** STOP TIMER1 COUNTING **/
     82a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <TMR1_stop>
     82e:	08 95       	ret

00000830 <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	65 e0       	ldi	r22, 0x05	; 5
     834:	83 e0       	ldi	r24, 0x03	; 3
     836:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	66 e0       	ldi	r22, 0x06	; 6
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	67 e0       	ldi	r22, 0x07	; 7
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>

	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	83 e0       	ldi	r24, 0x03	; 3
     854:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	64 e0       	ldi	r22, 0x04	; 4
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
	DIO_setpinvalue(ROW_PORT_DATA , R3 ,  DIO_PIN_LOW);


    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	65 e0       	ldi	r22, 0x05	; 5
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
     876:	41 e0       	ldi	r20, 0x01	; 1
     878:	66 e0       	ldi	r22, 0x06	; 6
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
     880:	41 e0       	ldi	r20, 0x01	; 1
     882:	67 e0       	ldi	r22, 0x07	; 7
     884:	83 e0       	ldi	r24, 0x03	; 3
     886:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
     88a:	41 e0       	ldi	r20, 0x01	; 1
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	83 e0       	ldi	r24, 0x03	; 3
     890:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
     894:	41 e0       	ldi	r20, 0x01	; 1
     896:	61 e0       	ldi	r22, 0x01	; 1
     898:	83 e0       	ldi	r24, 0x03	; 3
     89a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
     89e:	41 e0       	ldi	r20, 0x01	; 1
     8a0:	64 e0       	ldi	r22, 0x04	; 4
     8a2:	83 e0       	ldi	r24, 0x03	; 3
     8a4:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	08 95       	ret

000008ac <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <KEYPAD_read+0xe>
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <KEYPAD_read+0x10>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <KEYPAD_read+0x12>
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
     8c4:	85 e0       	ldi	r24, 0x05	; 5
     8c6:	89 83       	std	Y+1, r24	; 0x01
     8c8:	86 e0       	ldi	r24, 0x06	; 6
     8ca:	8a 83       	std	Y+2, r24	; 0x02
     8cc:	87 e0       	ldi	r24, 0x07	; 7
     8ce:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
     8d0:	1c 82       	std	Y+4, r1	; 0x04
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	8d 83       	std	Y+5, r24	; 0x05
     8d6:	84 e0       	ldi	r24, 0x04	; 4
     8d8:	8e 83       	std	Y+6, r24	; 0x06

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     8da:	00 e0       	ldi	r16, 0x00	; 0
     8dc:	79 c0       	rjmp	.+242    	; 0x9d0 <KEYPAD_read+0x124>
    {
		if (u8_a_rowiterator == 3 )
     8de:	03 30       	cpi	r16, 0x03	; 3
     8e0:	39 f4       	brne	.+14     	; 0x8f0 <KEYPAD_read+0x44>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     8ec:	10 e0       	ldi	r17, 0x00	; 0
     8ee:	62 c0       	rjmp	.+196    	; 0x9b4 <KEYPAD_read+0x108>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
		}
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
     8f0:	e1 e0       	ldi	r30, 0x01	; 1
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	ec 0f       	add	r30, r28
     8f6:	fd 1f       	adc	r31, r29
     8f8:	e0 0f       	add	r30, r16
     8fa:	f1 1d       	adc	r31, r1
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	60 81       	ld	r22, Z
     900:	83 e0       	ldi	r24, 0x03	; 3
     902:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     906:	f2 cf       	rjmp	.-28     	; 0x8ec <KEYPAD_read+0x40>
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
     908:	e4 e0       	ldi	r30, 0x04	; 4
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	ec 0f       	add	r30, r28
     90e:	fd 1f       	adc	r31, r29
     910:	e1 0f       	add	r30, r17
     912:	f1 1d       	adc	r31, r1
     914:	a7 01       	movw	r20, r14
     916:	60 81       	ld	r22, Z
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	0e 94 aa 08 	call	0x1154	; 0x1154 <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
     91e:	f7 01       	movw	r30, r14
     920:	80 81       	ld	r24, Z
     922:	81 11       	cpse	r24, r1
     924:	46 c0       	rjmp	.+140    	; 0x9b2 <KEYPAD_read+0x106>
            {
                if (u8_a_rowiterator == 0)
     926:	01 11       	cpse	r16, r1
     928:	11 c0       	rjmp	.+34     	; 0x94c <KEYPAD_read+0xa0>
                {
                    if (u8_a_coulumniterator == 0)
     92a:	11 11       	cpse	r17, r1
     92c:	03 c0       	rjmp	.+6      	; 0x934 <KEYPAD_read+0x88>
                    {
                        *u8_a_value = '1' ;
     92e:	81 e3       	ldi	r24, 0x31	; 49
     930:	80 83       	st	Z, r24
     932:	33 c0       	rjmp	.+102    	; 0x99a <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     934:	11 30       	cpi	r17, 0x01	; 1
     936:	21 f4       	brne	.+8      	; 0x940 <KEYPAD_read+0x94>
                    {
                        *u8_a_value = '2' ;
     938:	82 e3       	ldi	r24, 0x32	; 50
     93a:	f7 01       	movw	r30, r14
     93c:	80 83       	st	Z, r24
     93e:	2d c0       	rjmp	.+90     	; 0x99a <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     940:	12 30       	cpi	r17, 0x02	; 2
     942:	59 f5       	brne	.+86     	; 0x99a <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '3' ;
     944:	83 e3       	ldi	r24, 0x33	; 51
     946:	f7 01       	movw	r30, r14
     948:	80 83       	st	Z, r24
     94a:	27 c0       	rjmp	.+78     	; 0x99a <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 1)
     94c:	01 30       	cpi	r16, 0x01	; 1
     94e:	91 f4       	brne	.+36     	; 0x974 <KEYPAD_read+0xc8>
                {
                    if (u8_a_coulumniterator == 0)
     950:	11 11       	cpse	r17, r1
     952:	04 c0       	rjmp	.+8      	; 0x95c <KEYPAD_read+0xb0>
                    {
                        *u8_a_value = '4' ;
     954:	84 e3       	ldi	r24, 0x34	; 52
     956:	f7 01       	movw	r30, r14
     958:	80 83       	st	Z, r24
     95a:	1f c0       	rjmp	.+62     	; 0x99a <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     95c:	11 30       	cpi	r17, 0x01	; 1
     95e:	21 f4       	brne	.+8      	; 0x968 <KEYPAD_read+0xbc>
                    {
                        *u8_a_value = '5' ;
     960:	85 e3       	ldi	r24, 0x35	; 53
     962:	f7 01       	movw	r30, r14
     964:	80 83       	st	Z, r24
     966:	19 c0       	rjmp	.+50     	; 0x99a <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     968:	12 30       	cpi	r17, 0x02	; 2
     96a:	b9 f4       	brne	.+46     	; 0x99a <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '6' ;
     96c:	86 e3       	ldi	r24, 0x36	; 54
     96e:	f7 01       	movw	r30, r14
     970:	80 83       	st	Z, r24
     972:	13 c0       	rjmp	.+38     	; 0x99a <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 2)
     974:	02 30       	cpi	r16, 0x02	; 2
     976:	89 f4       	brne	.+34     	; 0x99a <KEYPAD_read+0xee>
                {
                    if (u8_a_coulumniterator == 0)
     978:	11 11       	cpse	r17, r1
     97a:	04 c0       	rjmp	.+8      	; 0x984 <KEYPAD_read+0xd8>
                    {
                        *u8_a_value = '7' ;
     97c:	87 e3       	ldi	r24, 0x37	; 55
     97e:	f7 01       	movw	r30, r14
     980:	80 83       	st	Z, r24
     982:	0b c0       	rjmp	.+22     	; 0x99a <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     984:	11 30       	cpi	r17, 0x01	; 1
     986:	21 f4       	brne	.+8      	; 0x990 <KEYPAD_read+0xe4>
                    {
                        *u8_a_value = '8' ;
     988:	88 e3       	ldi	r24, 0x38	; 56
     98a:	f7 01       	movw	r30, r14
     98c:	80 83       	st	Z, r24
     98e:	05 c0       	rjmp	.+10     	; 0x99a <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     990:	12 30       	cpi	r17, 0x02	; 2
     992:	19 f4       	brne	.+6      	; 0x99a <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '9' ;
     994:	89 e3       	ldi	r24, 0x39	; 57
     996:	f7 01       	movw	r30, r14
     998:	80 83       	st	Z, r24
                    }
                }
				
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     99a:	e1 e0       	ldi	r30, 0x01	; 1
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	ec 0f       	add	r30, r28
     9a0:	fd 1f       	adc	r31, r29
     9a2:	e0 0f       	add	r30, r16
     9a4:	f1 1d       	adc	r31, r1
     9a6:	60 81       	ld	r22, Z
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <DIO_togglepin>
				return KEYPAD_readSuccess;
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	13 c0       	rjmp	.+38     	; 0x9d8 <KEYPAD_read+0x12c>
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     9b2:	1f 5f       	subi	r17, 0xFF	; 255
     9b4:	13 30       	cpi	r17, 0x03	; 3
     9b6:	08 f4       	brcc	.+2      	; 0x9ba <KEYPAD_read+0x10e>
     9b8:	a7 cf       	rjmp	.-178    	; 0x908 <KEYPAD_read+0x5c>
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
				return KEYPAD_readSuccess;
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     9ba:	e1 e0       	ldi	r30, 0x01	; 1
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	ec 0f       	add	r30, r28
     9c0:	fd 1f       	adc	r31, r29
     9c2:	e0 0f       	add	r30, r16
     9c4:	f1 1d       	adc	r31, r1
     9c6:	60 81       	ld	r22, Z
     9c8:	83 e0       	ldi	r24, 0x03	; 3
     9ca:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     9ce:	0f 5f       	subi	r16, 0xFF	; 255
     9d0:	03 30       	cpi	r16, 0x03	; 3
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <KEYPAD_read+0x12a>
     9d4:	84 cf       	rjmp	.-248    	; 0x8de <KEYPAD_read+0x32>
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
    }
    return KEYPAD_readFail;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	26 96       	adiw	r28, 0x06	; 6
     9da:	0f b6       	in	r0, 0x3f	; 63
     9dc:	f8 94       	cli
     9de:	de bf       	out	0x3e, r29	; 62
     9e0:	0f be       	out	0x3f, r0	; 63
     9e2:	cd bf       	out	0x3d, r28	; 61
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	08 95       	ret

000009f2 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     9f2:	cf 93       	push	r28
     9f4:	c8 2f       	mov	r28, r24
     9f6:	0e 94 32 09 	call	0x1264	; 0x1264 <TMR0_init>
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	62 e0       	ldi	r22, 0x02	; 2
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	63 e0       	ldi	r22, 0x03	; 3
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     a18:	8b b3       	in	r24, 0x1b	; 27
     a1a:	9c 2f       	mov	r25, r28
     a1c:	90 7f       	andi	r25, 0xF0	; 240
     a1e:	8f 70       	andi	r24, 0x0F	; 15
     a20:	89 2b       	or	r24, r25
     a22:	8b bb       	out	0x1b, r24	; 27
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	63 e0       	ldi	r22, 0x03	; 3
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	63 e0       	ldi	r22, 0x03	; 3
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     a44:	20 e1       	ldi	r18, 0x10	; 16
     a46:	c2 9f       	mul	r28, r18
     a48:	c0 01       	movw	r24, r0
     a4a:	11 24       	eor	r1, r1
     a4c:	9b b3       	in	r25, 0x1b	; 27
     a4e:	9f 70       	andi	r25, 0x0F	; 15
     a50:	89 2b       	or	r24, r25
     a52:	8b bb       	out	0x1b, r24	; 27
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	63 e0       	ldi	r22, 0x03	; 3
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	63 e0       	ldi	r22, 0x03	; 3
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     a74:	65 e0       	ldi	r22, 0x05	; 5
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <LCD_init>:
     a84:	0e 94 32 09 	call	0x1264	; 0x1264 <TMR0_init>
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
     a92:	41 e0       	ldi	r20, 0x01	; 1
     a94:	62 e0       	ldi	r22, 0x02	; 2
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
     a9c:	41 e0       	ldi	r20, 0x01	; 1
     a9e:	63 e0       	ldi	r22, 0x03	; 3
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
     aa6:	41 e0       	ldi	r20, 0x01	; 1
     aa8:	64 e0       	ldi	r22, 0x04	; 4
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
     ab0:	41 e0       	ldi	r20, 0x01	; 1
     ab2:	65 e0       	ldi	r22, 0x05	; 5
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
     aba:	41 e0       	ldi	r20, 0x01	; 1
     abc:	66 e0       	ldi	r22, 0x06	; 6
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
     ac4:	41 e0       	ldi	r20, 0x01	; 1
     ac6:	67 e0       	ldi	r22, 0x07	; 7
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
     ace:	64 e1       	ldi	r22, 0x14	; 20
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>
     ada:	83 e3       	ldi	r24, 0x33	; 51
     adc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_sendcmd>
     ae0:	82 e3       	ldi	r24, 0x32	; 50
     ae2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_sendcmd>
     ae6:	88 e2       	ldi	r24, 0x28	; 40
     ae8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_sendcmd>
     aec:	8c e0       	ldi	r24, 0x0C	; 12
     aee:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_sendcmd>
     af2:	86 e0       	ldi	r24, 0x06	; 6
     af4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_sendcmd>
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_sendcmd>
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_sendcmd>
     b04:	08 95       	ret

00000b06 <LCD_writechar>:
     b06:	cf 93       	push	r28
     b08:	c8 2f       	mov	r28, r24
     b0a:	41 e0       	ldi	r20, 0x01	; 1
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	62 e0       	ldi	r22, 0x02	; 2
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	63 e0       	ldi	r22, 0x03	; 3
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     b28:	8b b3       	in	r24, 0x1b	; 27
     b2a:	9c 2f       	mov	r25, r28
     b2c:	90 7f       	andi	r25, 0xF0	; 240
     b2e:	8f 70       	andi	r24, 0x0F	; 15
     b30:	89 2b       	or	r24, r25
     b32:	8b bb       	out	0x1b, r24	; 27
     b34:	41 e0       	ldi	r20, 0x01	; 1
     b36:	63 e0       	ldi	r22, 0x03	; 3
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	63 e0       	ldi	r22, 0x03	; 3
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     b54:	20 e1       	ldi	r18, 0x10	; 16
     b56:	c2 9f       	mul	r28, r18
     b58:	c0 01       	movw	r24, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	9b b3       	in	r25, 0x1b	; 27
     b5e:	9f 70       	andi	r25, 0x0F	; 15
     b60:	89 2b       	or	r24, r25
     b62:	8b bb       	out	0x1b, r24	; 27
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	63 e0       	ldi	r22, 0x03	; 3
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	63 e0       	ldi	r22, 0x03	; 3
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
     b84:	65 e0       	ldi	r22, 0x05	; 5
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <TMR0_delayms>
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <LCD_writestr>:
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	cf 93       	push	r28
     b9a:	8c 01       	movw	r16, r24
     b9c:	c0 e0       	ldi	r28, 0x00	; 0
     b9e:	03 c0       	rjmp	.+6      	; 0xba6 <LCD_writestr+0x12>
     ba0:	0e 94 83 05 	call	0xb06	; 0xb06 <LCD_writechar>
     ba4:	cf 5f       	subi	r28, 0xFF	; 255
     ba6:	f8 01       	movw	r30, r16
     ba8:	ec 0f       	add	r30, r28
     baa:	f1 1d       	adc	r31, r1
     bac:	80 81       	ld	r24, Z
     bae:	81 11       	cpse	r24, r1
     bb0:	f7 cf       	rjmp	.-18     	; 0xba0 <LCD_writestr+0xc>
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	08 95       	ret

00000bba <LCD_goto>:
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <LCD_goto+0x6>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	90 e8       	ldi	r25, 0x80	; 128
     bc6:	99 83       	std	Y+1, r25	; 0x01
     bc8:	90 ec       	ldi	r25, 0xC0	; 192
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	e1 e0       	ldi	r30, 0x01	; 1
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	ec 0f       	add	r30, r28
     bd2:	fd 1f       	adc	r31, r29
     bd4:	e8 0f       	add	r30, r24
     bd6:	f1 1d       	adc	r31, r1
     bd8:	80 81       	ld	r24, Z
     bda:	86 0f       	add	r24, r22
     bdc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <LCD_sendcmd>
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	df 91       	pop	r29
     be6:	cf 91       	pop	r28
     be8:	08 95       	ret

00000bea <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	2a 97       	sbiw	r28, 0x0a	; 10
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     c00:	99 23       	and	r25, r25
     c02:	dc f5       	brge	.+118    	; 0xc7a <LCD_writeint+0x90>
	{
		s32_a_num *= -1;
     c04:	90 95       	com	r25
     c06:	80 95       	com	r24
     c08:	70 95       	com	r23
     c0a:	61 95       	neg	r22
     c0c:	7f 4f       	sbci	r23, 0xFF	; 255
     c0e:	8f 4f       	sbci	r24, 0xFF	; 255
     c10:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     c12:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     c14:	13 c0       	rjmp	.+38     	; 0xc3c <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     c16:	2a e0       	ldi	r18, 0x0A	; 10
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	0e 94 6f 0b 	call	0x16de	; 0x16de <__divmodsi4>
     c22:	e1 e0       	ldi	r30, 0x01	; 1
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	ec 0f       	add	r30, r28
     c28:	fd 1f       	adc	r31, r29
     c2a:	e1 0f       	add	r30, r17
     c2c:	f1 1d       	adc	r31, r1
     c2e:	60 5d       	subi	r22, 0xD0	; 208
     c30:	60 83       	st	Z, r22
			s32_a_num /= 10;
     c32:	62 2f       	mov	r22, r18
     c34:	73 2f       	mov	r23, r19
     c36:	84 2f       	mov	r24, r20
     c38:	95 2f       	mov	r25, r21
			i++;
     c3a:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     c3c:	16 16       	cp	r1, r22
     c3e:	17 06       	cpc	r1, r23
     c40:	18 06       	cpc	r1, r24
     c42:	19 06       	cpc	r1, r25
     c44:	44 f3       	brlt	.-48     	; 0xc16 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     c46:	e1 e0       	ldi	r30, 0x01	; 1
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	ec 0f       	add	r30, r28
     c4c:	fd 1f       	adc	r31, r29
     c4e:	e1 0f       	add	r30, r17
     c50:	f1 1d       	adc	r31, r1
     c52:	8d e2       	ldi	r24, 0x2D	; 45
     c54:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     c56:	1f 5f       	subi	r17, 0xFF	; 255
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <LCD_writeint+0x8a>
		{
			LCD_writechar(number[k - 1]); //Display each number
     c5a:	e1 2f       	mov	r30, r17
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	8c 0f       	add	r24, r28
     c66:	9d 1f       	adc	r25, r29
     c68:	e8 0f       	add	r30, r24
     c6a:	f9 1f       	adc	r31, r25
     c6c:	80 81       	ld	r24, Z
     c6e:	0e 94 83 05 	call	0xb06	; 0xb06 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     c72:	11 50       	subi	r17, 0x01	; 1
     c74:	11 11       	cpse	r17, r1
     c76:	f1 cf       	rjmp	.-30     	; 0xc5a <LCD_writeint+0x70>
     c78:	39 c0       	rjmp	.+114    	; 0xcec <LCD_writeint+0x102>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     c7a:	61 15       	cp	r22, r1
     c7c:	71 05       	cpc	r23, r1
     c7e:	81 05       	cpc	r24, r1
     c80:	91 05       	cpc	r25, r1
     c82:	21 f4       	brne	.+8      	; 0xc8c <LCD_writeint+0xa2>
	{
		LCD_writechar('0');
     c84:	80 e3       	ldi	r24, 0x30	; 48
     c86:	0e 94 83 05 	call	0xb06	; 0xb06 <LCD_writechar>
     c8a:	30 c0       	rjmp	.+96     	; 0xcec <LCD_writeint+0x102>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     c8c:	16 16       	cp	r1, r22
     c8e:	17 06       	cpc	r1, r23
     c90:	18 06       	cpc	r1, r24
     c92:	19 06       	cpc	r1, r25
     c94:	ac f0       	brlt	.+42     	; 0xcc0 <LCD_writeint+0xd6>
     c96:	2a c0       	rjmp	.+84     	; 0xcec <LCD_writeint+0x102>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     c98:	2a e0       	ldi	r18, 0x0A	; 10
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	50 e0       	ldi	r21, 0x00	; 0
     ca0:	0e 94 6f 0b 	call	0x16de	; 0x16de <__divmodsi4>
     ca4:	e1 e0       	ldi	r30, 0x01	; 1
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	ec 0f       	add	r30, r28
     caa:	fd 1f       	adc	r31, r29
     cac:	e1 0f       	add	r30, r17
     cae:	f1 1d       	adc	r31, r1
     cb0:	60 5d       	subi	r22, 0xD0	; 208
     cb2:	60 83       	st	Z, r22
			s32_a_num /= 10;
     cb4:	62 2f       	mov	r22, r18
     cb6:	73 2f       	mov	r23, r19
     cb8:	84 2f       	mov	r24, r20
     cba:	95 2f       	mov	r25, r21
			i++;
     cbc:	1f 5f       	subi	r17, 0xFF	; 255
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <LCD_writeint+0xd8>
     cc0:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     cc2:	16 16       	cp	r1, r22
     cc4:	17 06       	cpc	r1, r23
     cc6:	18 06       	cpc	r1, r24
     cc8:	19 06       	cpc	r1, r25
     cca:	34 f3       	brlt	.-52     	; 0xc98 <LCD_writeint+0xae>
     ccc:	0d c0       	rjmp	.+26     	; 0xce8 <LCD_writeint+0xfe>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     cce:	e1 2f       	mov	r30, r17
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	31 97       	sbiw	r30, 0x01	; 1
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	8c 0f       	add	r24, r28
     cda:	9d 1f       	adc	r25, r29
     cdc:	e8 0f       	add	r30, r24
     cde:	f9 1f       	adc	r31, r25
     ce0:	80 81       	ld	r24, Z
     ce2:	0e 94 83 05 	call	0xb06	; 0xb06 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     ce6:	11 50       	subi	r17, 0x01	; 1
     ce8:	11 11       	cpse	r17, r1
     cea:	f1 cf       	rjmp	.-30     	; 0xcce <LCD_writeint+0xe4>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     cec:	2a 96       	adiw	r28, 0x0a	; 10
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	08 95       	ret

00000d00 <MOTOR_init>:
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
	
	switch(u8_a_motorid)
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	b9 f0       	breq	.+46     	; 0xd32 <MOTOR_init+0x32>
     d04:	28 f0       	brcs	.+10     	; 0xd10 <MOTOR_init+0x10>
     d06:	82 30       	cpi	r24, 0x02	; 2
     d08:	29 f1       	breq	.+74     	; 0xd54 <MOTOR_init+0x54>
     d0a:	83 30       	cpi	r24, 0x03	; 3
     d0c:	a1 f1       	breq	.+104    	; 0xd76 <MOTOR_init+0x76>
     d0e:	44 c0       	rjmp	.+136    	; 0xd98 <MOTOR_init+0x98>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
     d10:	41 e0       	ldi	r20, 0x01	; 1
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	61 e0       	ldi	r22, 0x01	; 1
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
     d24:	41 e0       	ldi	r20, 0x01	; 1
     d26:	62 e0       	ldi	r22, 0x02	; 2
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d2e:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_OUTPUT); /** MOTOR 1 ENABLE PIN **/
		break;
     d30:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	63 e0       	ldi	r22, 0x03	; 3
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	64 e0       	ldi	r22, 0x04	; 4
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     d46:	41 e0       	ldi	r20, 0x01	; 1
     d48:	65 e0       	ldi	r22, 0x05	; 5
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d50:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR1_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d52:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
     d5e:	41 e0       	ldi	r20, 0x01	; 1
     d60:	61 e0       	ldi	r22, 0x01	; 1
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     d68:	41 e0       	ldi	r20, 0x01	; 1
     d6a:	62 e0       	ldi	r22, 0x02	; 2
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d72:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d74:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	63 e0       	ldi	r22, 0x03	; 3
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	64 e0       	ldi	r22, 0x04	; 4
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	65 e0       	ldi	r22, 0x05	; 5
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     : MOTOR INIT ERROR STATUS                        **/
/*****************************************************************/
MOTOR_init_status MOTOR_init(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_initstatus = VALID_MOTOR_INIT ;  /** VARIABLE TO HOLD THE RETURN ERROR STATUS **/ 
     d94:	80 e0       	ldi	r24, 0x00	; 0
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_OUTPUT);
		DIO_setpindir(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_OUTPUT);
		
		DIO_setpindir(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_OUTPUT);  /** MOTOR 2 ENABLE PIN **/
		break;
     d96:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_initstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     d98:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_initstatus ; /** RETURN THE FINAL STATUS **/
}
     d9a:	08 95       	ret

00000d9c <MOTOR_rotateclkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	91 f0       	breq	.+36     	; 0xdc4 <MOTOR_rotateclkdir+0x28>
     da0:	28 f0       	brcs	.+10     	; 0xdac <MOTOR_rotateclkdir+0x10>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	d9 f0       	breq	.+54     	; 0xddc <MOTOR_rotateclkdir+0x40>
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	29 f1       	breq	.+74     	; 0xdf4 <MOTOR_rotateclkdir+0x58>
     daa:	30 c0       	rjmp	.+96     	; 0xe0c <MOTOR_rotateclkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     dac:	41 e0       	ldi	r20, 0x01	; 1
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dc0:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     dc2:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     dc4:	41 e0       	ldi	r20, 0x01	; 1
     dc6:	63 e0       	ldi	r22, 0x03	; 3
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	64 e0       	ldi	r22, 0x04	; 4
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     dd8:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     dda:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     de6:	40 e0       	ldi	r20, 0x00	; 0
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	82 e0       	ldi	r24, 0x02	; 2
     dec:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     df0:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     df2:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	63 e0       	ldi	r22, 0x03	; 3
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	64 e0       	ldi	r22, 0x04	; 4
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateclkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motordirectionstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e08:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_HIGH); /** PIN1 IS HIGH **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_LOW);  /** PIN2 IS LOW **/
		break;
     e0a:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motordirectionstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e0c:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motordirectionstatus ; /** RETURN THE FINAL STATUS **/
}
     e0e:	08 95       	ret

00000e10 <MOTOR_rotateanticlkdir>:
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	91 f0       	breq	.+36     	; 0xe38 <MOTOR_rotateanticlkdir+0x28>
     e14:	28 f0       	brcs	.+10     	; 0xe20 <MOTOR_rotateanticlkdir+0x10>
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	d9 f0       	breq	.+54     	; 0xe50 <MOTOR_rotateanticlkdir+0x40>
     e1a:	83 30       	cpi	r24, 0x03	; 3
     e1c:	29 f1       	breq	.+74     	; 0xe68 <MOTOR_rotateanticlkdir+0x58>
     e1e:	30 c0       	rjmp	.+96     	; 0xe80 <MOTOR_rotateanticlkdir+0x70>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e34:	80 e0       	ldi	r24, 0x00	; 0
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e36:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	63 e0       	ldi	r22, 0x03	; 3
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e42:	41 e0       	ldi	r20, 0x01	; 1
     e44:	64 e0       	ldi	r22, 0x04	; 4
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e4c:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e4e:	08 95       	ret
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e5a:	41 e0       	ldi	r20, 0x01	; 1
     e5c:	61 e0       	ldi	r22, 0x01	; 1
     e5e:	82 e0       	ldi	r24, 0x02	; 2
     e60:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e64:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR3_ID : /** SET PINS OF MOTOR 1 **/
		
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e66:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	63 e0       	ldi	r22, 0x03	; 3
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
     e72:	41 e0       	ldi	r20, 0x01	; 1
     e74:	64 e0       	ldi	r22, 0x04	; 4
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_rotateanticlkdir(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motorrotatestatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e7c:	80 e0       	ldi	r24, 0x00	; 0
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN1 , DIO_PIN_LOW);   /** PIN1 IS LOW **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_PIN2 , DIO_PIN_HIGH);  /** PIN2 IS HIGH **/
		break;
     e7e:	08 95       	ret
		
		
		default:
		/** RETURN ERROR **/
		en_a_motorrotatestatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     e80:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
     e82:	08 95       	ret

00000e84 <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	69 f0       	breq	.+26     	; 0xea2 <MOTOR_turnoff+0x1e>
     e88:	28 f0       	brcs	.+10     	; 0xe94 <MOTOR_turnoff+0x10>
     e8a:	82 30       	cpi	r24, 0x02	; 2
     e8c:	89 f0       	breq	.+34     	; 0xeb0 <MOTOR_turnoff+0x2c>
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	b1 f0       	breq	.+44     	; 0xebe <MOTOR_turnoff+0x3a>
     e92:	1c c0       	rjmp	.+56     	; 0xecc <MOTOR_turnoff+0x48>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	62 e0       	ldi	r22, 0x02	; 2
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     e9e:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     ea0:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	65 e0       	ldi	r22, 0x05	; 5
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     eac:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     eae:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	62 e0       	ldi	r22, 0x02	; 2
     eb4:	82 e0       	ldi	r24, 0x02	; 2
     eb6:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     eba:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     ebc:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	65 e0       	ldi	r22, 0x05	; 5
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ec8:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     eca:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     ecc:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     ece:	08 95       	ret

00000ed0 <MOTOR_turnon>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	69 f0       	breq	.+26     	; 0xeee <MOTOR_turnon+0x1e>
     ed4:	28 f0       	brcs	.+10     	; 0xee0 <MOTOR_turnon+0x10>
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	89 f0       	breq	.+34     	; 0xefc <MOTOR_turnon+0x2c>
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	b1 f0       	breq	.+44     	; 0xf0a <MOTOR_turnon+0x3a>
     ede:	1c c0       	rjmp	.+56     	; 0xf18 <MOTOR_turnon+0x48>
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     ee0:	41 e0       	ldi	r20, 0x01	; 1
     ee2:	62 e0       	ldi	r22, 0x02	; 2
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     eea:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     eec:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	65 e0       	ldi	r22, 0x05	; 5
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     ef8:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     efa:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	62 e0       	ldi	r22, 0x02	; 2
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     f06:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     f08:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	65 e0       	ldi	r22, 0x05	; 5
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     f14:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     f16:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     f18:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     f1a:	08 95       	ret

00000f1c <US_init>:
/** RETURNS : VOID                                                **/
/*******************************************************************/
void US_init(void)
{
	/** INITIALIZE THE TRIGGER PIN AS OUTPUT PIN **/
	DIO_setpindir(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_OUTPUT);
     f1c:	41 e0       	ldi	r20, 0x01	; 1
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 ac 07 	call	0xf58	; 0xf58 <DIO_setpindir>
     f26:	08 95       	ret

00000f28 <US_sendtrigger>:
/** RETURNS : EN_ultrasonicreturn                                 **/
/*******************************************************************/
EN_ultrasonicreturn US_sendtrigger(void)
{
	/** SEND PULSE OF 15 MICROSECOND **/
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_HIGH);
     f28:	41 e0       	ldi	r20, 0x01	; 1
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
	TMR0_delaymicros(15);
     f32:	6f e0       	ldi	r22, 0x0F	; 15
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0e 94 95 09 	call	0x132a	; 0x132a <TMR0_delaymicros>
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_LOW);
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_setpinvalue>
}
     f48:	08 95       	ret

00000f4a <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZE APPLICATION MODULES **/
     f4a:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_setentry(); /** SET THE ENTRY DATA **/
     f4e:	0e 94 76 00 	call	0xec	; 0xec <APP_setentry>
	
    while (1) 
    {	
		APP_start(); /** SUPER LOOP **/	
     f52:	0e 94 43 01 	call	0x286	; 0x286 <APP_start>
     f56:	fd cf       	rjmp	.-6      	; 0xf52 <main+0x8>

00000f58 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
     f58:	44 23       	and	r20, r20
     f5a:	19 f0       	breq	.+6      	; 0xf62 <DIO_setpindir+0xa>
     f5c:	41 30       	cpi	r20, 0x01	; 1
     f5e:	e9 f1       	breq	.+122    	; 0xfda <DIO_setpindir+0x82>
     f60:	74 c0       	rjmp	.+232    	; 0x104a <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	99 f0       	breq	.+38     	; 0xf8c <DIO_setpindir+0x34>
     f66:	28 f0       	brcs	.+10     	; 0xf72 <DIO_setpindir+0x1a>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	e9 f0       	breq	.+58     	; 0xfa6 <DIO_setpindir+0x4e>
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	41 f1       	breq	.+80     	; 0xfc0 <DIO_setpindir+0x68>
     f70:	6e c0       	rjmp	.+220    	; 0x104e <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     f72:	2a b3       	in	r18, 0x1a	; 26
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_setpindir+0x26>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	6a 95       	dec	r22
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_setpindir+0x22>
     f82:	80 95       	com	r24
     f84:	82 23       	and	r24, r18
     f86:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     f88:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
     f8a:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     f8c:	27 b3       	in	r18, 0x17	; 23
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_setpindir+0x40>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	6a 95       	dec	r22
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_setpindir+0x3c>
     f9c:	80 95       	com	r24
     f9e:	82 23       	and	r24, r18
     fa0:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     fa2:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
     fa4:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     fa6:	24 b3       	in	r18, 0x14	; 20
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_setpindir+0x5a>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	6a 95       	dec	r22
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_setpindir+0x56>
     fb6:	80 95       	com	r24
     fb8:	82 23       	and	r24, r18
     fba:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     fbc:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
     fbe:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     fc0:	21 b3       	in	r18, 0x11	; 17
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_setpindir+0x74>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	6a 95       	dec	r22
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_setpindir+0x70>
     fd0:	80 95       	com	r24
     fd2:	82 23       	and	r24, r18
     fd4:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     fd6:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
     fd8:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	91 f0       	breq	.+36     	; 0x1002 <DIO_setpindir+0xaa>
     fde:	28 f0       	brcs	.+10     	; 0xfea <DIO_setpindir+0x92>
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	d9 f0       	breq	.+54     	; 0x101a <DIO_setpindir+0xc2>
     fe4:	83 30       	cpi	r24, 0x03	; 3
     fe6:	29 f1       	breq	.+74     	; 0x1032 <DIO_setpindir+0xda>
     fe8:	34 c0       	rjmp	.+104    	; 0x1052 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     fea:	2a b3       	in	r18, 0x1a	; 26
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_setpindir+0x9e>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	6a 95       	dec	r22
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_setpindir+0x9a>
     ffa:	82 2b       	or	r24, r18
     ffc:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     ffe:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
    1000:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
    1002:	27 b3       	in	r18, 0x17	; 23
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_setpindir+0xb6>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	6a 95       	dec	r22
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_setpindir+0xb2>
    1012:	82 2b       	or	r24, r18
    1014:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
    1016:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
    1018:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
    101a:	24 b3       	in	r18, 0x14	; 20
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <DIO_setpindir+0xce>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	6a 95       	dec	r22
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <DIO_setpindir+0xca>
    102a:	82 2b       	or	r24, r18
    102c:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
    102e:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
    1030:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
    1032:	21 b3       	in	r18, 0x11	; 17
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_setpindir+0xe6>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	6a 95       	dec	r22
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_setpindir+0xe2>
    1042:	82 2b       	or	r24, r18
    1044:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
    1046:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
    1048:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
    1052:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
    1054:	08 95       	ret

00001056 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
    1056:	44 23       	and	r20, r20
    1058:	19 f0       	breq	.+6      	; 0x1060 <DIO_setpinvalue+0xa>
    105a:	41 30       	cpi	r20, 0x01	; 1
    105c:	e9 f1       	breq	.+122    	; 0x10d8 <DIO_setpinvalue+0x82>
    105e:	74 c0       	rjmp	.+232    	; 0x1148 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	99 f0       	breq	.+38     	; 0x108a <DIO_setpinvalue+0x34>
    1064:	28 f0       	brcs	.+10     	; 0x1070 <DIO_setpinvalue+0x1a>
    1066:	82 30       	cpi	r24, 0x02	; 2
    1068:	e9 f0       	breq	.+58     	; 0x10a4 <DIO_setpinvalue+0x4e>
    106a:	83 30       	cpi	r24, 0x03	; 3
    106c:	41 f1       	breq	.+80     	; 0x10be <DIO_setpinvalue+0x68>
    106e:	6e c0       	rjmp	.+220    	; 0x114c <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    1070:	2b b3       	in	r18, 0x1b	; 27
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_setpinvalue+0x26>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	6a 95       	dec	r22
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_setpinvalue+0x22>
    1080:	80 95       	com	r24
    1082:	82 23       	and	r24, r18
    1084:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1086:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    1088:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    108a:	28 b3       	in	r18, 0x18	; 24
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_setpinvalue+0x40>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	6a 95       	dec	r22
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_setpinvalue+0x3c>
    109a:	80 95       	com	r24
    109c:	82 23       	and	r24, r18
    109e:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10a0:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    10a2:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    10a4:	25 b3       	in	r18, 0x15	; 21
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <DIO_setpinvalue+0x5a>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	6a 95       	dec	r22
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <DIO_setpinvalue+0x56>
    10b4:	80 95       	com	r24
    10b6:	82 23       	and	r24, r18
    10b8:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10ba:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    10bc:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
    10be:	22 b3       	in	r18, 0x12	; 18
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_setpinvalue+0x74>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	6a 95       	dec	r22
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_setpinvalue+0x70>
    10ce:	80 95       	com	r24
    10d0:	82 23       	and	r24, r18
    10d2:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10d4:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
    10d6:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	91 f0       	breq	.+36     	; 0x1100 <DIO_setpinvalue+0xaa>
    10dc:	28 f0       	brcs	.+10     	; 0x10e8 <DIO_setpinvalue+0x92>
    10de:	82 30       	cpi	r24, 0x02	; 2
    10e0:	d9 f0       	breq	.+54     	; 0x1118 <DIO_setpinvalue+0xc2>
    10e2:	83 30       	cpi	r24, 0x03	; 3
    10e4:	29 f1       	breq	.+74     	; 0x1130 <DIO_setpinvalue+0xda>
    10e6:	34 c0       	rjmp	.+104    	; 0x1150 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    10e8:	2b b3       	in	r18, 0x1b	; 27
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_setpinvalue+0x9e>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	6a 95       	dec	r22
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_setpinvalue+0x9a>
    10f8:	82 2b       	or	r24, r18
    10fa:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    10fc:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    10fe:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1100:	28 b3       	in	r18, 0x18	; 24
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 c0       	rjmp	.+4      	; 0x110c <DIO_setpinvalue+0xb6>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	6a 95       	dec	r22
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <DIO_setpinvalue+0xb2>
    1110:	82 2b       	or	r24, r18
    1112:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1114:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1116:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1118:	25 b3       	in	r18, 0x15	; 21
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_setpinvalue+0xce>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	6a 95       	dec	r22
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_setpinvalue+0xca>
    1128:	82 2b       	or	r24, r18
    112a:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    112c:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    112e:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
    1130:	22 b3       	in	r18, 0x12	; 18
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_setpinvalue+0xe6>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	6a 95       	dec	r22
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_setpinvalue+0xe2>
    1140:	82 2b       	or	r24, r18
    1142:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
    1144:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
    1146:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
    1150:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
    1152:	08 95       	ret

00001154 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	99 f0       	breq	.+38     	; 0x117e <DIO_readpin+0x2a>
    1158:	28 f0       	brcs	.+10     	; 0x1164 <DIO_readpin+0x10>
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	e9 f0       	breq	.+58     	; 0x1198 <DIO_readpin+0x44>
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	41 f1       	breq	.+80     	; 0x11b2 <DIO_readpin+0x5e>
    1162:	34 c0       	rjmp	.+104    	; 0x11cc <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    1164:	89 b3       	in	r24, 0x19	; 25
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_readpin+0x1a>
    116a:	95 95       	asr	r25
    116c:	87 95       	ror	r24
    116e:	6a 95       	dec	r22
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_readpin+0x16>
    1172:	81 70       	andi	r24, 0x01	; 1
    1174:	89 bb       	out	0x19, r24	; 25
    1176:	fa 01       	movw	r30, r20
    1178:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    117a:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    117c:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    117e:	86 b3       	in	r24, 0x16	; 22
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_readpin+0x34>
    1184:	95 95       	asr	r25
    1186:	87 95       	ror	r24
    1188:	6a 95       	dec	r22
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_readpin+0x30>
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	86 bb       	out	0x16, r24	; 22
    1190:	fa 01       	movw	r30, r20
    1192:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1194:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    1196:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    1198:	83 b3       	in	r24, 0x13	; 19
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_readpin+0x4e>
    119e:	95 95       	asr	r25
    11a0:	87 95       	ror	r24
    11a2:	6a 95       	dec	r22
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_readpin+0x4a>
    11a6:	81 70       	andi	r24, 0x01	; 1
    11a8:	83 bb       	out	0x13, r24	; 19
    11aa:	fa 01       	movw	r30, r20
    11ac:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    11ae:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    11b0:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
    11b2:	80 b3       	in	r24, 0x10	; 16
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_readpin+0x68>
    11b8:	95 95       	asr	r25
    11ba:	87 95       	ror	r24
    11bc:	6a 95       	dec	r22
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_readpin+0x64>
    11c0:	81 70       	andi	r24, 0x01	; 1
    11c2:	80 bb       	out	0x10, r24	; 16
    11c4:	fa 01       	movw	r30, r20
    11c6:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    11c8:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
    11ca:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
    11cc:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
    11ce:	08 95       	ret

000011d0 <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 f0       	breq	.+36     	; 0x11f8 <DIO_togglepin+0x28>
    11d4:	28 f0       	brcs	.+10     	; 0x11e0 <DIO_togglepin+0x10>
    11d6:	82 30       	cpi	r24, 0x02	; 2
    11d8:	d9 f0       	breq	.+54     	; 0x1210 <DIO_togglepin+0x40>
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	29 f1       	breq	.+74     	; 0x1228 <DIO_togglepin+0x58>
    11de:	30 c0       	rjmp	.+96     	; 0x1240 <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
    11e0:	2b b3       	in	r18, 0x1b	; 27
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_togglepin+0x1c>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	6a 95       	dec	r22
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_togglepin+0x18>
    11f0:	82 27       	eor	r24, r18
    11f2:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    11f4:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
    11f6:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
    11f8:	28 b3       	in	r18, 0x18	; 24
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_togglepin+0x34>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	6a 95       	dec	r22
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_togglepin+0x30>
    1208:	82 27       	eor	r24, r18
    120a:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    120c:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
    120e:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
    1210:	25 b3       	in	r18, 0x15	; 21
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_togglepin+0x4c>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	6a 95       	dec	r22
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_togglepin+0x48>
    1220:	82 27       	eor	r24, r18
    1222:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    1224:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
    1226:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
    1228:	22 b3       	in	r18, 0x12	; 18
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <DIO_togglepin+0x64>
    1230:	88 0f       	add	r24, r24
    1232:	99 1f       	adc	r25, r25
    1234:	6a 95       	dec	r22
    1236:	e2 f7       	brpl	.-8      	; 0x1230 <DIO_togglepin+0x60>
    1238:	82 27       	eor	r24, r18
    123a:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
    123c:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
    123e:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
    1240:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
    1242:	08 95       	ret

00001244 <SET_GLOBALINTERRUPT>:
    1244:	8f b7       	in	r24, 0x3f	; 63
    1246:	80 68       	ori	r24, 0x80	; 128
    1248:	8f bf       	out	0x3f, r24	; 63
    124a:	08 95       	ret

0000124c <INT0_init>:
    124c:	0e 94 22 09 	call	0x1244	; 0x1244 <SET_GLOBALINTERRUPT>
    1250:	85 b7       	in	r24, 0x35	; 53
    1252:	81 60       	ori	r24, 0x01	; 1
    1254:	85 bf       	out	0x35, r24	; 53
    1256:	85 b7       	in	r24, 0x35	; 53
    1258:	8d 7f       	andi	r24, 0xFD	; 253
    125a:	85 bf       	out	0x35, r24	; 53
    125c:	8b b7       	in	r24, 0x3b	; 59
    125e:	80 64       	ori	r24, 0x40	; 64
    1260:	8b bf       	out	0x3b, r24	; 59
    1262:	08 95       	ret

00001264 <TMR0_init>:
    1264:	83 b7       	in	r24, 0x33	; 51
    1266:	8f 77       	andi	r24, 0x7F	; 127
    1268:	83 bf       	out	0x33, r24	; 51
    126a:	83 b7       	in	r24, 0x33	; 51
    126c:	8f 7b       	andi	r24, 0xBF	; 191
    126e:	83 bf       	out	0x33, r24	; 51
    1270:	83 b7       	in	r24, 0x33	; 51
    1272:	87 7f       	andi	r24, 0xF7	; 247
    1274:	83 bf       	out	0x33, r24	; 51
    1276:	83 b7       	in	r24, 0x33	; 51
    1278:	8f 7e       	andi	r24, 0xEF	; 239
    127a:	83 bf       	out	0x33, r24	; 51
    127c:	83 b7       	in	r24, 0x33	; 51
    127e:	8f 7d       	andi	r24, 0xDF	; 223
    1280:	83 bf       	out	0x33, r24	; 51
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	08 95       	ret

00001286 <TMR0_start>:
    1286:	83 b7       	in	r24, 0x33	; 51
    1288:	81 60       	ori	r24, 0x01	; 1
    128a:	83 bf       	out	0x33, r24	; 51
    128c:	83 b7       	in	r24, 0x33	; 51
    128e:	8d 7f       	andi	r24, 0xFD	; 253
    1290:	83 bf       	out	0x33, r24	; 51
    1292:	83 b7       	in	r24, 0x33	; 51
    1294:	8b 7f       	andi	r24, 0xFB	; 251
    1296:	83 bf       	out	0x33, r24	; 51
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	08 95       	ret

0000129c <TMR0_stop>:
    129c:	83 b7       	in	r24, 0x33	; 51
    129e:	8e 7f       	andi	r24, 0xFE	; 254
    12a0:	83 bf       	out	0x33, r24	; 51
    12a2:	83 b7       	in	r24, 0x33	; 51
    12a4:	8d 7f       	andi	r24, 0xFD	; 253
    12a6:	83 bf       	out	0x33, r24	; 51
    12a8:	83 b7       	in	r24, 0x33	; 51
    12aa:	8b 7f       	andi	r24, 0xFB	; 251
    12ac:	83 bf       	out	0x33, r24	; 51
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	08 95       	ret

000012b2 <TMR0_delayms>:
    12b2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__floatunsisf>
    12b6:	2f e6       	ldi	r18, 0x6F	; 111
    12b8:	32 e1       	ldi	r19, 0x12	; 18
    12ba:	43 e0       	ldi	r20, 0x03	; 3
    12bc:	5d e3       	ldi	r21, 0x3D	; 61
    12be:	0e 94 40 0a 	call	0x1480	; 0x1480 <__divsf3>
    12c2:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fixunssfsi>
    12c6:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <u32_gs_tmr0nuofovs>
    12ca:	70 93 b4 00 	sts	0x00B4, r23	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    12ce:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    12d2:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    12d6:	12 be       	out	0x32, r1	; 50
    12d8:	0e 94 43 09 	call	0x1286	; 0x1286 <TMR0_start>
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	ba 01       	movw	r22, r20
    12e2:	0a c0       	rjmp	.+20     	; 0x12f8 <TMR0_delayms+0x46>
    12e4:	08 b6       	in	r0, 0x38	; 56
    12e6:	00 fe       	sbrs	r0, 0
    12e8:	fd cf       	rjmp	.-6      	; 0x12e4 <TMR0_delayms+0x32>
    12ea:	88 b7       	in	r24, 0x38	; 56
    12ec:	81 60       	ori	r24, 0x01	; 1
    12ee:	88 bf       	out	0x38, r24	; 56
    12f0:	4f 5f       	subi	r20, 0xFF	; 255
    12f2:	5f 4f       	sbci	r21, 0xFF	; 255
    12f4:	6f 4f       	sbci	r22, 0xFF	; 255
    12f6:	7f 4f       	sbci	r23, 0xFF	; 255
    12f8:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <u32_gs_tmr0nuofovs>
    12fc:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    1300:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    1304:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    1308:	48 17       	cp	r20, r24
    130a:	59 07       	cpc	r21, r25
    130c:	6a 07       	cpc	r22, r26
    130e:	7b 07       	cpc	r23, r27
    1310:	48 f3       	brcs	.-46     	; 0x12e4 <TMR0_delayms+0x32>
    1312:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <u32_gs_tmr0nuofovs>
    1316:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    131a:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    131e:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    1322:	0e 94 4e 09 	call	0x129c	; 0x129c <TMR0_stop>
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	08 95       	ret

0000132a <TMR0_delaymicros>:
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	68 94       	set
    1330:	14 f8       	bld	r1, 4
    1332:	b6 95       	lsr	r27
    1334:	a7 95       	ror	r26
    1336:	97 95       	ror	r25
    1338:	87 95       	ror	r24
    133a:	16 94       	lsr	r1
    133c:	d1 f7       	brne	.-12     	; 0x1332 <TMR0_delaymicros+0x8>
    133e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <u32_gs_tmr0nuofovs>
    1342:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    1346:	a0 93 b5 00 	sts	0x00B5, r26	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    134a:	b0 93 b6 00 	sts	0x00B6, r27	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    134e:	12 be       	out	0x32, r1	; 50
    1350:	0e 94 43 09 	call	0x1286	; 0x1286 <TMR0_start>
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	ba 01       	movw	r22, r20
    135a:	0a c0       	rjmp	.+20     	; 0x1370 <TMR0_delaymicros+0x46>
    135c:	08 b6       	in	r0, 0x38	; 56
    135e:	00 fe       	sbrs	r0, 0
    1360:	fd cf       	rjmp	.-6      	; 0x135c <TMR0_delaymicros+0x32>
    1362:	88 b7       	in	r24, 0x38	; 56
    1364:	81 60       	ori	r24, 0x01	; 1
    1366:	88 bf       	out	0x38, r24	; 56
    1368:	4f 5f       	subi	r20, 0xFF	; 255
    136a:	5f 4f       	sbci	r21, 0xFF	; 255
    136c:	6f 4f       	sbci	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <u32_gs_tmr0nuofovs>
    1374:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <u32_gs_tmr0nuofovs+0x1>
    1378:	a0 91 b5 00 	lds	r26, 0x00B5	; 0x8000b5 <u32_gs_tmr0nuofovs+0x2>
    137c:	b0 91 b6 00 	lds	r27, 0x00B6	; 0x8000b6 <u32_gs_tmr0nuofovs+0x3>
    1380:	48 17       	cp	r20, r24
    1382:	59 07       	cpc	r21, r25
    1384:	6a 07       	cpc	r22, r26
    1386:	7b 07       	cpc	r23, r27
    1388:	48 f3       	brcs	.-46     	; 0x135c <TMR0_delaymicros+0x32>
    138a:	0e 94 4e 09 	call	0x129c	; 0x129c <TMR0_stop>
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	08 95       	ret

00001392 <TMR1_init>:
    1392:	8f b5       	in	r24, 0x2f	; 47
    1394:	8e 7f       	andi	r24, 0xFE	; 254
    1396:	8f bd       	out	0x2f, r24	; 47
    1398:	8f b5       	in	r24, 0x2f	; 47
    139a:	8d 7f       	andi	r24, 0xFD	; 253
    139c:	8f bd       	out	0x2f, r24	; 47
    139e:	8e b5       	in	r24, 0x2e	; 46
    13a0:	87 7f       	andi	r24, 0xF7	; 247
    13a2:	8e bd       	out	0x2e, r24	; 46
    13a4:	8e b5       	in	r24, 0x2e	; 46
    13a6:	8f 7e       	andi	r24, 0xEF	; 239
    13a8:	8e bd       	out	0x2e, r24	; 46
    13aa:	8f b5       	in	r24, 0x2f	; 47
    13ac:	84 60       	ori	r24, 0x04	; 4
    13ae:	8f bd       	out	0x2f, r24	; 47
    13b0:	8f b5       	in	r24, 0x2f	; 47
    13b2:	88 60       	ori	r24, 0x08	; 8
    13b4:	8f bd       	out	0x2f, r24	; 47
    13b6:	8f b7       	in	r24, 0x3f	; 63
    13b8:	80 68       	ori	r24, 0x80	; 128
    13ba:	8f bf       	out	0x3f, r24	; 63
    13bc:	89 b7       	in	r24, 0x39	; 57
    13be:	9a b7       	in	r25, 0x3a	; 58
    13c0:	84 60       	ori	r24, 0x04	; 4
    13c2:	9a bf       	out	0x3a, r25	; 58
    13c4:	89 bf       	out	0x39, r24	; 57
    13c6:	08 95       	ret

000013c8 <TMR1_start>:
    13c8:	1d bc       	out	0x2d, r1	; 45
    13ca:	1c bc       	out	0x2c, r1	; 44
    13cc:	8e b5       	in	r24, 0x2e	; 46
    13ce:	81 60       	ori	r24, 0x01	; 1
    13d0:	8e bd       	out	0x2e, r24	; 46
    13d2:	8e b5       	in	r24, 0x2e	; 46
    13d4:	8d 7f       	andi	r24, 0xFD	; 253
    13d6:	8e bd       	out	0x2e, r24	; 46
    13d8:	8e b5       	in	r24, 0x2e	; 46
    13da:	8b 7f       	andi	r24, 0xFB	; 251
    13dc:	8e bd       	out	0x2e, r24	; 46
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	08 95       	ret

000013e2 <TMR1_stop>:
    13e2:	8e b5       	in	r24, 0x2e	; 46
    13e4:	8e 7f       	andi	r24, 0xFE	; 254
    13e6:	8e bd       	out	0x2e, r24	; 46
    13e8:	8e b5       	in	r24, 0x2e	; 46
    13ea:	8d 7f       	andi	r24, 0xFD	; 253
    13ec:	8e bd       	out	0x2e, r24	; 46
    13ee:	8e b5       	in	r24, 0x2e	; 46
    13f0:	8b 7f       	andi	r24, 0xFB	; 251
    13f2:	8e bd       	out	0x2e, r24	; 46
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	08 95       	ret

000013f8 <TMR1_getvalue>:
    13f8:	2c b5       	in	r18, 0x2c	; 44
    13fa:	3d b5       	in	r19, 0x2d	; 45
    13fc:	fc 01       	movw	r30, r24
    13fe:	31 83       	std	Z+1, r19	; 0x01
    1400:	20 83       	st	Z, r18
    1402:	08 95       	ret

00001404 <TMR1_setcounterval>:
    1404:	9d bd       	out	0x2d, r25	; 45
    1406:	8c bd       	out	0x2c, r24	; 44
    1408:	08 95       	ret

0000140a <TMR2_init>:
    140a:	85 b5       	in	r24, 0x25	; 37
    140c:	8f 77       	andi	r24, 0x7F	; 127
    140e:	85 bd       	out	0x25, r24	; 37
    1410:	85 b5       	in	r24, 0x25	; 37
    1412:	8f 7b       	andi	r24, 0xBF	; 191
    1414:	85 bd       	out	0x25, r24	; 37
    1416:	85 b5       	in	r24, 0x25	; 37
    1418:	87 7f       	andi	r24, 0xF7	; 247
    141a:	85 bd       	out	0x25, r24	; 37
    141c:	85 b5       	in	r24, 0x25	; 37
    141e:	8f 7e       	andi	r24, 0xEF	; 239
    1420:	85 bd       	out	0x25, r24	; 37
    1422:	85 b5       	in	r24, 0x25	; 37
    1424:	8f 7d       	andi	r24, 0xDF	; 223
    1426:	85 bd       	out	0x25, r24	; 37
    1428:	8f b7       	in	r24, 0x3f	; 63
    142a:	80 68       	ori	r24, 0x80	; 128
    142c:	8f bf       	out	0x3f, r24	; 63
    142e:	89 b7       	in	r24, 0x39	; 57
    1430:	80 64       	ori	r24, 0x40	; 64
    1432:	89 bf       	out	0x39, r24	; 57
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	08 95       	ret

00001438 <TMR2_start>:
    1438:	85 b5       	in	r24, 0x25	; 37
    143a:	81 60       	ori	r24, 0x01	; 1
    143c:	85 bd       	out	0x25, r24	; 37
    143e:	85 b5       	in	r24, 0x25	; 37
    1440:	8d 7f       	andi	r24, 0xFD	; 253
    1442:	85 bd       	out	0x25, r24	; 37
    1444:	85 b5       	in	r24, 0x25	; 37
    1446:	8b 7f       	andi	r24, 0xFB	; 251
    1448:	85 bd       	out	0x25, r24	; 37
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	08 95       	ret

0000144e <TMR2_stop>:
    144e:	85 b5       	in	r24, 0x25	; 37
    1450:	8e 7f       	andi	r24, 0xFE	; 254
    1452:	85 bd       	out	0x25, r24	; 37
    1454:	85 b5       	in	r24, 0x25	; 37
    1456:	8d 7f       	andi	r24, 0xFD	; 253
    1458:	85 bd       	out	0x25, r24	; 37
    145a:	85 b5       	in	r24, 0x25	; 37
    145c:	8b 7f       	andi	r24, 0xFB	; 251
    145e:	85 bd       	out	0x25, r24	; 37
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	08 95       	ret

00001464 <TMR2_getovs>:
    1464:	bc 01       	movw	r22, r24
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__floatunsisf>
    146e:	2f e6       	ldi	r18, 0x6F	; 111
    1470:	32 e1       	ldi	r19, 0x12	; 18
    1472:	43 e0       	ldi	r20, 0x03	; 3
    1474:	5d e3       	ldi	r21, 0x3D	; 61
    1476:	0e 94 40 0a 	call	0x1480	; 0x1480 <__divsf3>
    147a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <__fixunssfsi>
    147e:	08 95       	ret

00001480 <__divsf3>:
    1480:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__divsf3x>
    1484:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__fp_round>
    1488:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_pscB>
    148c:	58 f0       	brcs	.+22     	; 0x14a4 <__divsf3+0x24>
    148e:	0e 94 27 0b 	call	0x164e	; 0x164e <__fp_pscA>
    1492:	40 f0       	brcs	.+16     	; 0x14a4 <__divsf3+0x24>
    1494:	29 f4       	brne	.+10     	; 0x14a0 <__divsf3+0x20>
    1496:	5f 3f       	cpi	r21, 0xFF	; 255
    1498:	29 f0       	breq	.+10     	; 0x14a4 <__divsf3+0x24>
    149a:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__fp_inf>
    149e:	51 11       	cpse	r21, r1
    14a0:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_szero>
    14a4:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_nan>

000014a8 <__divsf3x>:
    14a8:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_split3>
    14ac:	68 f3       	brcs	.-38     	; 0x1488 <__divsf3+0x8>

000014ae <__divsf3_pse>:
    14ae:	99 23       	and	r25, r25
    14b0:	b1 f3       	breq	.-20     	; 0x149e <__divsf3+0x1e>
    14b2:	55 23       	and	r21, r21
    14b4:	91 f3       	breq	.-28     	; 0x149a <__divsf3+0x1a>
    14b6:	95 1b       	sub	r25, r21
    14b8:	55 0b       	sbc	r21, r21
    14ba:	bb 27       	eor	r27, r27
    14bc:	aa 27       	eor	r26, r26
    14be:	62 17       	cp	r22, r18
    14c0:	73 07       	cpc	r23, r19
    14c2:	84 07       	cpc	r24, r20
    14c4:	38 f0       	brcs	.+14     	; 0x14d4 <__divsf3_pse+0x26>
    14c6:	9f 5f       	subi	r25, 0xFF	; 255
    14c8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ca:	22 0f       	add	r18, r18
    14cc:	33 1f       	adc	r19, r19
    14ce:	44 1f       	adc	r20, r20
    14d0:	aa 1f       	adc	r26, r26
    14d2:	a9 f3       	breq	.-22     	; 0x14be <__divsf3_pse+0x10>
    14d4:	35 d0       	rcall	.+106    	; 0x1540 <__divsf3_pse+0x92>
    14d6:	0e 2e       	mov	r0, r30
    14d8:	3a f0       	brmi	.+14     	; 0x14e8 <__divsf3_pse+0x3a>
    14da:	e0 e8       	ldi	r30, 0x80	; 128
    14dc:	32 d0       	rcall	.+100    	; 0x1542 <__divsf3_pse+0x94>
    14de:	91 50       	subi	r25, 0x01	; 1
    14e0:	50 40       	sbci	r21, 0x00	; 0
    14e2:	e6 95       	lsr	r30
    14e4:	00 1c       	adc	r0, r0
    14e6:	ca f7       	brpl	.-14     	; 0x14da <__divsf3_pse+0x2c>
    14e8:	2b d0       	rcall	.+86     	; 0x1540 <__divsf3_pse+0x92>
    14ea:	fe 2f       	mov	r31, r30
    14ec:	29 d0       	rcall	.+82     	; 0x1540 <__divsf3_pse+0x92>
    14ee:	66 0f       	add	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	88 1f       	adc	r24, r24
    14f4:	bb 1f       	adc	r27, r27
    14f6:	26 17       	cp	r18, r22
    14f8:	37 07       	cpc	r19, r23
    14fa:	48 07       	cpc	r20, r24
    14fc:	ab 07       	cpc	r26, r27
    14fe:	b0 e8       	ldi	r27, 0x80	; 128
    1500:	09 f0       	breq	.+2      	; 0x1504 <__divsf3_pse+0x56>
    1502:	bb 0b       	sbc	r27, r27
    1504:	80 2d       	mov	r24, r0
    1506:	bf 01       	movw	r22, r30
    1508:	ff 27       	eor	r31, r31
    150a:	93 58       	subi	r25, 0x83	; 131
    150c:	5f 4f       	sbci	r21, 0xFF	; 255
    150e:	3a f0       	brmi	.+14     	; 0x151e <__divsf3_pse+0x70>
    1510:	9e 3f       	cpi	r25, 0xFE	; 254
    1512:	51 05       	cpc	r21, r1
    1514:	78 f0       	brcs	.+30     	; 0x1534 <__divsf3_pse+0x86>
    1516:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__fp_inf>
    151a:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__fp_szero>
    151e:	5f 3f       	cpi	r21, 0xFF	; 255
    1520:	e4 f3       	brlt	.-8      	; 0x151a <__divsf3_pse+0x6c>
    1522:	98 3e       	cpi	r25, 0xE8	; 232
    1524:	d4 f3       	brlt	.-12     	; 0x151a <__divsf3_pse+0x6c>
    1526:	86 95       	lsr	r24
    1528:	77 95       	ror	r23
    152a:	67 95       	ror	r22
    152c:	b7 95       	ror	r27
    152e:	f7 95       	ror	r31
    1530:	9f 5f       	subi	r25, 0xFF	; 255
    1532:	c9 f7       	brne	.-14     	; 0x1526 <__divsf3_pse+0x78>
    1534:	88 0f       	add	r24, r24
    1536:	91 1d       	adc	r25, r1
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	97 f9       	bld	r25, 7
    153e:	08 95       	ret
    1540:	e1 e0       	ldi	r30, 0x01	; 1
    1542:	66 0f       	add	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	bb 1f       	adc	r27, r27
    154a:	62 17       	cp	r22, r18
    154c:	73 07       	cpc	r23, r19
    154e:	84 07       	cpc	r24, r20
    1550:	ba 07       	cpc	r27, r26
    1552:	20 f0       	brcs	.+8      	; 0x155c <__divsf3_pse+0xae>
    1554:	62 1b       	sub	r22, r18
    1556:	73 0b       	sbc	r23, r19
    1558:	84 0b       	sbc	r24, r20
    155a:	ba 0b       	sbc	r27, r26
    155c:	ee 1f       	adc	r30, r30
    155e:	88 f7       	brcc	.-30     	; 0x1542 <__divsf3_pse+0x94>
    1560:	e0 95       	com	r30
    1562:	08 95       	ret

00001564 <__fixunssfsi>:
    1564:	0e 94 4e 0b 	call	0x169c	; 0x169c <__fp_splitA>
    1568:	88 f0       	brcs	.+34     	; 0x158c <__fixunssfsi+0x28>
    156a:	9f 57       	subi	r25, 0x7F	; 127
    156c:	98 f0       	brcs	.+38     	; 0x1594 <__fixunssfsi+0x30>
    156e:	b9 2f       	mov	r27, r25
    1570:	99 27       	eor	r25, r25
    1572:	b7 51       	subi	r27, 0x17	; 23
    1574:	b0 f0       	brcs	.+44     	; 0x15a2 <__fixunssfsi+0x3e>
    1576:	e1 f0       	breq	.+56     	; 0x15b0 <__fixunssfsi+0x4c>
    1578:	66 0f       	add	r22, r22
    157a:	77 1f       	adc	r23, r23
    157c:	88 1f       	adc	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	1a f0       	brmi	.+6      	; 0x1588 <__fixunssfsi+0x24>
    1582:	ba 95       	dec	r27
    1584:	c9 f7       	brne	.-14     	; 0x1578 <__fixunssfsi+0x14>
    1586:	14 c0       	rjmp	.+40     	; 0x15b0 <__fixunssfsi+0x4c>
    1588:	b1 30       	cpi	r27, 0x01	; 1
    158a:	91 f0       	breq	.+36     	; 0x15b0 <__fixunssfsi+0x4c>
    158c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__fp_zero>
    1590:	b1 e0       	ldi	r27, 0x01	; 1
    1592:	08 95       	ret
    1594:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <__fp_zero>
    1598:	67 2f       	mov	r22, r23
    159a:	78 2f       	mov	r23, r24
    159c:	88 27       	eor	r24, r24
    159e:	b8 5f       	subi	r27, 0xF8	; 248
    15a0:	39 f0       	breq	.+14     	; 0x15b0 <__fixunssfsi+0x4c>
    15a2:	b9 3f       	cpi	r27, 0xF9	; 249
    15a4:	cc f3       	brlt	.-14     	; 0x1598 <__fixunssfsi+0x34>
    15a6:	86 95       	lsr	r24
    15a8:	77 95       	ror	r23
    15aa:	67 95       	ror	r22
    15ac:	b3 95       	inc	r27
    15ae:	d9 f7       	brne	.-10     	; 0x15a6 <__fixunssfsi+0x42>
    15b0:	3e f4       	brtc	.+14     	; 0x15c0 <__fixunssfsi+0x5c>
    15b2:	90 95       	com	r25
    15b4:	80 95       	com	r24
    15b6:	70 95       	com	r23
    15b8:	61 95       	neg	r22
    15ba:	7f 4f       	sbci	r23, 0xFF	; 255
    15bc:	8f 4f       	sbci	r24, 0xFF	; 255
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	08 95       	ret

000015c2 <__floatunsisf>:
    15c2:	e8 94       	clt
    15c4:	09 c0       	rjmp	.+18     	; 0x15d8 <__floatsisf+0x12>

000015c6 <__floatsisf>:
    15c6:	97 fb       	bst	r25, 7
    15c8:	3e f4       	brtc	.+14     	; 0x15d8 <__floatsisf+0x12>
    15ca:	90 95       	com	r25
    15cc:	80 95       	com	r24
    15ce:	70 95       	com	r23
    15d0:	61 95       	neg	r22
    15d2:	7f 4f       	sbci	r23, 0xFF	; 255
    15d4:	8f 4f       	sbci	r24, 0xFF	; 255
    15d6:	9f 4f       	sbci	r25, 0xFF	; 255
    15d8:	99 23       	and	r25, r25
    15da:	a9 f0       	breq	.+42     	; 0x1606 <__floatsisf+0x40>
    15dc:	f9 2f       	mov	r31, r25
    15de:	96 e9       	ldi	r25, 0x96	; 150
    15e0:	bb 27       	eor	r27, r27
    15e2:	93 95       	inc	r25
    15e4:	f6 95       	lsr	r31
    15e6:	87 95       	ror	r24
    15e8:	77 95       	ror	r23
    15ea:	67 95       	ror	r22
    15ec:	b7 95       	ror	r27
    15ee:	f1 11       	cpse	r31, r1
    15f0:	f8 cf       	rjmp	.-16     	; 0x15e2 <__floatsisf+0x1c>
    15f2:	fa f4       	brpl	.+62     	; 0x1632 <__floatsisf+0x6c>
    15f4:	bb 0f       	add	r27, r27
    15f6:	11 f4       	brne	.+4      	; 0x15fc <__floatsisf+0x36>
    15f8:	60 ff       	sbrs	r22, 0
    15fa:	1b c0       	rjmp	.+54     	; 0x1632 <__floatsisf+0x6c>
    15fc:	6f 5f       	subi	r22, 0xFF	; 255
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	8f 4f       	sbci	r24, 0xFF	; 255
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	16 c0       	rjmp	.+44     	; 0x1632 <__floatsisf+0x6c>
    1606:	88 23       	and	r24, r24
    1608:	11 f0       	breq	.+4      	; 0x160e <__floatsisf+0x48>
    160a:	96 e9       	ldi	r25, 0x96	; 150
    160c:	11 c0       	rjmp	.+34     	; 0x1630 <__floatsisf+0x6a>
    160e:	77 23       	and	r23, r23
    1610:	21 f0       	breq	.+8      	; 0x161a <__floatsisf+0x54>
    1612:	9e e8       	ldi	r25, 0x8E	; 142
    1614:	87 2f       	mov	r24, r23
    1616:	76 2f       	mov	r23, r22
    1618:	05 c0       	rjmp	.+10     	; 0x1624 <__floatsisf+0x5e>
    161a:	66 23       	and	r22, r22
    161c:	71 f0       	breq	.+28     	; 0x163a <__floatsisf+0x74>
    161e:	96 e8       	ldi	r25, 0x86	; 134
    1620:	86 2f       	mov	r24, r22
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	2a f0       	brmi	.+10     	; 0x1632 <__floatsisf+0x6c>
    1628:	9a 95       	dec	r25
    162a:	66 0f       	add	r22, r22
    162c:	77 1f       	adc	r23, r23
    162e:	88 1f       	adc	r24, r24
    1630:	da f7       	brpl	.-10     	; 0x1628 <__floatsisf+0x62>
    1632:	88 0f       	add	r24, r24
    1634:	96 95       	lsr	r25
    1636:	87 95       	ror	r24
    1638:	97 f9       	bld	r25, 7
    163a:	08 95       	ret

0000163c <__fp_inf>:
    163c:	97 f9       	bld	r25, 7
    163e:	9f 67       	ori	r25, 0x7F	; 127
    1640:	80 e8       	ldi	r24, 0x80	; 128
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	08 95       	ret

00001648 <__fp_nan>:
    1648:	9f ef       	ldi	r25, 0xFF	; 255
    164a:	80 ec       	ldi	r24, 0xC0	; 192
    164c:	08 95       	ret

0000164e <__fp_pscA>:
    164e:	00 24       	eor	r0, r0
    1650:	0a 94       	dec	r0
    1652:	16 16       	cp	r1, r22
    1654:	17 06       	cpc	r1, r23
    1656:	18 06       	cpc	r1, r24
    1658:	09 06       	cpc	r0, r25
    165a:	08 95       	ret

0000165c <__fp_pscB>:
    165c:	00 24       	eor	r0, r0
    165e:	0a 94       	dec	r0
    1660:	12 16       	cp	r1, r18
    1662:	13 06       	cpc	r1, r19
    1664:	14 06       	cpc	r1, r20
    1666:	05 06       	cpc	r0, r21
    1668:	08 95       	ret

0000166a <__fp_round>:
    166a:	09 2e       	mov	r0, r25
    166c:	03 94       	inc	r0
    166e:	00 0c       	add	r0, r0
    1670:	11 f4       	brne	.+4      	; 0x1676 <__fp_round+0xc>
    1672:	88 23       	and	r24, r24
    1674:	52 f0       	brmi	.+20     	; 0x168a <__fp_round+0x20>
    1676:	bb 0f       	add	r27, r27
    1678:	40 f4       	brcc	.+16     	; 0x168a <__fp_round+0x20>
    167a:	bf 2b       	or	r27, r31
    167c:	11 f4       	brne	.+4      	; 0x1682 <__fp_round+0x18>
    167e:	60 ff       	sbrs	r22, 0
    1680:	04 c0       	rjmp	.+8      	; 0x168a <__fp_round+0x20>
    1682:	6f 5f       	subi	r22, 0xFF	; 255
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	8f 4f       	sbci	r24, 0xFF	; 255
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	08 95       	ret

0000168c <__fp_split3>:
    168c:	57 fd       	sbrc	r21, 7
    168e:	90 58       	subi	r25, 0x80	; 128
    1690:	44 0f       	add	r20, r20
    1692:	55 1f       	adc	r21, r21
    1694:	59 f0       	breq	.+22     	; 0x16ac <__fp_splitA+0x10>
    1696:	5f 3f       	cpi	r21, 0xFF	; 255
    1698:	71 f0       	breq	.+28     	; 0x16b6 <__fp_splitA+0x1a>
    169a:	47 95       	ror	r20

0000169c <__fp_splitA>:
    169c:	88 0f       	add	r24, r24
    169e:	97 fb       	bst	r25, 7
    16a0:	99 1f       	adc	r25, r25
    16a2:	61 f0       	breq	.+24     	; 0x16bc <__fp_splitA+0x20>
    16a4:	9f 3f       	cpi	r25, 0xFF	; 255
    16a6:	79 f0       	breq	.+30     	; 0x16c6 <__fp_splitA+0x2a>
    16a8:	87 95       	ror	r24
    16aa:	08 95       	ret
    16ac:	12 16       	cp	r1, r18
    16ae:	13 06       	cpc	r1, r19
    16b0:	14 06       	cpc	r1, r20
    16b2:	55 1f       	adc	r21, r21
    16b4:	f2 cf       	rjmp	.-28     	; 0x169a <__fp_split3+0xe>
    16b6:	46 95       	lsr	r20
    16b8:	f1 df       	rcall	.-30     	; 0x169c <__fp_splitA>
    16ba:	08 c0       	rjmp	.+16     	; 0x16cc <__fp_splitA+0x30>
    16bc:	16 16       	cp	r1, r22
    16be:	17 06       	cpc	r1, r23
    16c0:	18 06       	cpc	r1, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	f1 cf       	rjmp	.-30     	; 0x16a8 <__fp_splitA+0xc>
    16c6:	86 95       	lsr	r24
    16c8:	71 05       	cpc	r23, r1
    16ca:	61 05       	cpc	r22, r1
    16cc:	08 94       	sec
    16ce:	08 95       	ret

000016d0 <__fp_zero>:
    16d0:	e8 94       	clt

000016d2 <__fp_szero>:
    16d2:	bb 27       	eor	r27, r27
    16d4:	66 27       	eor	r22, r22
    16d6:	77 27       	eor	r23, r23
    16d8:	cb 01       	movw	r24, r22
    16da:	97 f9       	bld	r25, 7
    16dc:	08 95       	ret

000016de <__divmodsi4>:
    16de:	05 2e       	mov	r0, r21
    16e0:	97 fb       	bst	r25, 7
    16e2:	1e f4       	brtc	.+6      	; 0x16ea <__divmodsi4+0xc>
    16e4:	00 94       	com	r0
    16e6:	0e 94 86 0b 	call	0x170c	; 0x170c <__negsi2>
    16ea:	57 fd       	sbrc	r21, 7
    16ec:	07 d0       	rcall	.+14     	; 0x16fc <__divmodsi4_neg2>
    16ee:	0e 94 9d 0b 	call	0x173a	; 0x173a <__udivmodsi4>
    16f2:	07 fc       	sbrc	r0, 7
    16f4:	03 d0       	rcall	.+6      	; 0x16fc <__divmodsi4_neg2>
    16f6:	4e f4       	brtc	.+18     	; 0x170a <__divmodsi4_exit>
    16f8:	0c 94 86 0b 	jmp	0x170c	; 0x170c <__negsi2>

000016fc <__divmodsi4_neg2>:
    16fc:	50 95       	com	r21
    16fe:	40 95       	com	r20
    1700:	30 95       	com	r19
    1702:	21 95       	neg	r18
    1704:	3f 4f       	sbci	r19, 0xFF	; 255
    1706:	4f 4f       	sbci	r20, 0xFF	; 255
    1708:	5f 4f       	sbci	r21, 0xFF	; 255

0000170a <__divmodsi4_exit>:
    170a:	08 95       	ret

0000170c <__negsi2>:
    170c:	90 95       	com	r25
    170e:	80 95       	com	r24
    1710:	70 95       	com	r23
    1712:	61 95       	neg	r22
    1714:	7f 4f       	sbci	r23, 0xFF	; 255
    1716:	8f 4f       	sbci	r24, 0xFF	; 255
    1718:	9f 4f       	sbci	r25, 0xFF	; 255
    171a:	08 95       	ret

0000171c <__umulhisi3>:
    171c:	a2 9f       	mul	r26, r18
    171e:	b0 01       	movw	r22, r0
    1720:	b3 9f       	mul	r27, r19
    1722:	c0 01       	movw	r24, r0
    1724:	a3 9f       	mul	r26, r19
    1726:	70 0d       	add	r23, r0
    1728:	81 1d       	adc	r24, r1
    172a:	11 24       	eor	r1, r1
    172c:	91 1d       	adc	r25, r1
    172e:	b2 9f       	mul	r27, r18
    1730:	70 0d       	add	r23, r0
    1732:	81 1d       	adc	r24, r1
    1734:	11 24       	eor	r1, r1
    1736:	91 1d       	adc	r25, r1
    1738:	08 95       	ret

0000173a <__udivmodsi4>:
    173a:	a1 e2       	ldi	r26, 0x21	; 33
    173c:	1a 2e       	mov	r1, r26
    173e:	aa 1b       	sub	r26, r26
    1740:	bb 1b       	sub	r27, r27
    1742:	fd 01       	movw	r30, r26
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <__udivmodsi4_ep>

00001746 <__udivmodsi4_loop>:
    1746:	aa 1f       	adc	r26, r26
    1748:	bb 1f       	adc	r27, r27
    174a:	ee 1f       	adc	r30, r30
    174c:	ff 1f       	adc	r31, r31
    174e:	a2 17       	cp	r26, r18
    1750:	b3 07       	cpc	r27, r19
    1752:	e4 07       	cpc	r30, r20
    1754:	f5 07       	cpc	r31, r21
    1756:	20 f0       	brcs	.+8      	; 0x1760 <__udivmodsi4_ep>
    1758:	a2 1b       	sub	r26, r18
    175a:	b3 0b       	sbc	r27, r19
    175c:	e4 0b       	sbc	r30, r20
    175e:	f5 0b       	sbc	r31, r21

00001760 <__udivmodsi4_ep>:
    1760:	66 1f       	adc	r22, r22
    1762:	77 1f       	adc	r23, r23
    1764:	88 1f       	adc	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	1a 94       	dec	r1
    176a:	69 f7       	brne	.-38     	; 0x1746 <__udivmodsi4_loop>
    176c:	60 95       	com	r22
    176e:	70 95       	com	r23
    1770:	80 95       	com	r24
    1772:	90 95       	com	r25
    1774:	9b 01       	movw	r18, r22
    1776:	ac 01       	movw	r20, r24
    1778:	bd 01       	movw	r22, r26
    177a:	cf 01       	movw	r24, r30
    177c:	08 95       	ret

0000177e <_exit>:
    177e:	f8 94       	cli

00001780 <__stop_program>:
    1780:	ff cf       	rjmp	.-2      	; 0x1780 <__stop_program>
