
Obstacle avoidance car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001312  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  00001312  000013a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080009e  0080009e  000013e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  00001450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fac  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff0  00000000  00000000  0000470c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c78  00000000  00000000  000056fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00007374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e53  00000000  00000000  00007954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143e  00000000  00000000  000087a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00009be5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 af 01 	jmp	0x35e	; 0x35e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 05 	call	0xada	; 0xada <main>
      8a:	0c 94 87 09 	jmp	0x130e	; 0x130e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint32_t u32_g_tick = 0 ;           /** GLOBAL VARIABLE TO BE COMPARED WITH DELAY TICKS **/   

/** FUNCTION TO INITIALIZE APPLICATION MODULES **/
void APP_init()
{
    ICU_init(); /** INITIALIZE ICU **/
      92:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <ICU_init>

	US_init(); /** INITILAIZATION ULTRASONIC MODULE **/
      96:	0e 94 56 05 	call	0xaac	; 0xaac <US_init>
	
	TMR0_init(); /** INITIALIZE TIMER0 **/
      9a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <TMR0_init>
	
	TMR2_init() ; /** INITIALIZE TIMER 2 **/
      9e:	0e 94 cd 07 	call	0xf9a	; 0xf9a <TMR2_init>
	
	KEYPAD_init() ; /** INITIALIZE KEYPAD **/
      a2:	0e 94 1a 02 	call	0x434	; 0x434 <KEYPAD_init>
	
	Button_init(); /** INITIALIZATION OF BUTTON **/
      a6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <Button_init>
	
	LCD_init(); /** INITIALIZE LCD **/
      aa:	0e 94 44 03 	call	0x688	; 0x688 <LCD_init>
	
	TMR0_delayms(50); /** DELAY FOR LCD INITIALIZATION **/
      ae:	62 e3       	ldi	r22, 0x32	; 50
      b0:	70 e0       	ldi	r23, 0x00	; 0
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>

	MOTOR_init(MOTOR1_ID); /** INITIALIZE 4 MOTORS **/
      ba:	80 e0       	ldi	r24, 0x00	; 0
      bc:	0e 94 82 04 	call	0x904	; 0x904 <MOTOR_init>
	MOTOR_init(MOTOR2_ID);
      c0:	81 e0       	ldi	r24, 0x01	; 1
      c2:	0e 94 82 04 	call	0x904	; 0x904 <MOTOR_init>
	MOTOR_init(MOTOR3_ID);
      c6:	82 e0       	ldi	r24, 0x02	; 2
      c8:	0e 94 82 04 	call	0x904	; 0x904 <MOTOR_init>
	MOTOR_init(MOTOR4_ID);
      cc:	83 e0       	ldi	r24, 0x03	; 3
      ce:	0e 94 82 04 	call	0x904	; 0x904 <MOTOR_init>
	
	MOTOR_rotateclkdir(MOTOR1_ID); /** DEFAULT ROTATION DIRECTION "RIGHT" **/
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR2_ID);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR3_ID);
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MOTOR_rotateclkdir>
	MOTOR_rotateclkdir(MOTOR4_ID);
      e4:	83 e0       	ldi	r24, 0x03	; 3
      e6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <MOTOR_rotateclkdir>
      ea:	08 95       	ret

000000ec <APP_setentry>:

}

/** FUNCTION TO SET DEFAULTS **/
void APP_setentry()
{
      ec:	cf 93       	push	r28
      ee:	df 93       	push	r29
      f0:	00 d0       	rcall	.+0      	; 0xf2 <APP_setentry+0x6>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_a_btnstatus = 0 , u8_a_pressednum = 0 ;
      f6:	19 82       	std	Y+1, r1	; 0x01
      f8:	1a 82       	std	Y+2, r1	; 0x02
	
 	u32_g_tick = 0 ;
      fa:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <__data_end>
      fe:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <__data_end+0x1>
     102:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end+0x2>
     106:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x3>
	 
 	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/
     10a:	88 e8       	ldi	r24, 0x88	; 136
     10c:	93 e1       	ldi	r25, 0x13	; 19
     10e:	0e 94 fa 07 	call	0xff4	; 0xff4 <TMR2_getovs>
     112:	60 93 a2 00 	sts	0x00A2, r22	; 0x8000a2 <u32_g_delay>
     116:	70 93 a3 00 	sts	0x00A3, r23	; 0x8000a3 <u32_g_delay+0x1>
     11a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <u32_g_delay+0x2>
     11e:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <u32_g_delay+0x3>

 	TMR2_start() ; /** START TIMER 2 **/
     122:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <TMR2_start>

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     126:	39 c0       	rjmp	.+114    	; 0x19a <APP_setentry+0xae>
	{
 		LCD_goto(0 , 1);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_goto>
 		LCD_writestr("Set Def. Rot");
     130:	80 e6       	ldi	r24, 0x60	; 96
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_writestr>

 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON PRESSED **/
     138:	ae 01       	movw	r20, r28
     13a:	4f 5f       	subi	r20, 0xFF	; 255
     13c:	5f 4f       	sbci	r21, 0xFF	; 255
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Is_pressed>
 		TMR0_delayms(100); /** WAIT 100 MS FOR BUTTON TO SETTLE **/
     146:	64 e6       	ldi	r22, 0x64	; 100
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>
 		Is_pressed(BUTTON1_PORT , BUTTON1_PIN , &u8_a_btnstatus); /** CHECK IF THE BUTTON IS STILL PRESSED **/
     152:	ae 01       	movw	r20, r28
     154:	4f 5f       	subi	r20, 0xFF	; 255
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	63 e0       	ldi	r22, 0x03	; 3
     15a:	83 e0       	ldi	r24, 0x03	; 3
     15c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Is_pressed>

		if (u8_a_btnstatus) /** IF THE BUTTON PRESSED **/
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	88 23       	and	r24, r24
     164:	d1 f0       	breq	.+52     	; 0x19a <APP_setentry+0xae>
 		{
 			u8_g_rotationcounter++ ; /** INCREASE ROTATION COUNTER BY 1 **/
     166:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <u8_g_rotationcounter>
     16a:	8f 5f       	subi	r24, 0xFF	; 255
     16c:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <u8_g_rotationcounter>

 			if (u8_g_rotationcounter == LEFT_ROTATION) /** LEFT ROTATION **/
     170:	81 30       	cpi	r24, 0x01	; 1
     172:	41 f4       	brne	.+16     	; 0x184 <APP_setentry+0x98>
 			{
				LCD_goto(1 , 1);
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_goto>
				LCD_writestr("LEFT ROTATION");
     17a:	8d e6       	ldi	r24, 0x6D	; 109
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_writestr>
     182:	0a c0       	rjmp	.+20     	; 0x198 <APP_setentry+0xac>
			}
	 		else if(u8_g_rotationcounter == RIGHT_ROTATION) /** RIGHT ROTATION **/
     184:	82 30       	cpi	r24, 0x02	; 2
     186:	41 f4       	brne	.+16     	; 0x198 <APP_setentry+0xac>
	 		{
 				LCD_goto(1 , 1);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_goto>
 				LCD_writestr("RIGHT ROTATION");
     190:	8b e7       	ldi	r24, 0x7B	; 123
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_writestr>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
     198:	19 82       	std	Y+1, r1	; 0x01
	 
 	u32_g_delay =  TMR2_getovs(5000) ; /** GET THE NUMBER OF OVERFLOWS NEEDED FOR 5 SECONDS **/

 	TMR2_start() ; /** START TIMER 2 **/

 	while ( u32_g_tick < u32_g_delay) /** UNTILL TICKS OF 5 SECONDS **/
     19a:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <__data_end>
     19e:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <__data_end+0x1>
     1a2:	60 91 a0 00 	lds	r22, 0x00A0	; 0x8000a0 <__data_end+0x2>
     1a6:	70 91 a1 00 	lds	r23, 0x00A1	; 0x8000a1 <__data_end+0x3>
     1aa:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <u32_g_delay>
     1ae:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <u32_g_delay+0x1>
     1b2:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <u32_g_delay+0x2>
     1b6:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <u32_g_delay+0x3>
     1ba:	48 17       	cp	r20, r24
     1bc:	59 07       	cpc	r21, r25
     1be:	6a 07       	cpc	r22, r26
     1c0:	7b 07       	cpc	r23, r27
     1c2:	08 f4       	brcc	.+2      	; 0x1c6 <APP_setentry+0xda>
     1c4:	b1 cf       	rjmp	.-158    	; 0x128 <APP_setentry+0x3c>
 			}
			u8_a_btnstatus = 0 ; /** REINITIALIZE THE BUTTON STATE **/
 		}
 	}
	
 	TMR2_stop(); /** STOP TIMER 2 **/
     1c6:	0e 94 ef 07 	call	0xfde	; 0xfde <TMR2_stop>
		
	do /** ACCEPT KEYPAD BUTTON 1 FROM USER **/
	{
 		KEYPAD_read(&u8_a_pressednum);
     1ca:	ce 01       	movw	r24, r28
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	0e 94 58 02 	call	0x4b0	; 0x4b0 <KEYPAD_read>
 	} while (u8_a_pressednum != '1');
     1d2:	8a 81       	ldd	r24, Y+2	; 0x02
     1d4:	81 33       	cpi	r24, 0x31	; 49
     1d6:	c9 f7       	brne	.-14     	; 0x1ca <APP_setentry+0xde>

 	 LCD_sendcmd(LCD_CLEAR);
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_sendcmd>
	 TMR0_delayms(20);
     1de:	64 e1       	ldi	r22, 0x14	; 20
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>
	 
	 LCD_writestr("Waiting");
     1ea:	8a e8       	ldi	r24, 0x8A	; 138
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_writestr>
	 
	 TMR0_delayms(2000); /** WAIT 2 SECONDS **/
     1f2:	60 ed       	ldi	r22, 0xD0	; 208
     1f4:	77 e0       	ldi	r23, 0x07	; 7
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>
	 
	 LCD_sendcmd(LCD_CLEAR);
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_sendcmd>
	 TMR0_delayms(20);
     204:	64 e1       	ldi	r22, 0x14	; 20
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>
	 
}
     210:	0f 90       	pop	r0
     212:	0f 90       	pop	r0
     214:	df 91       	pop	r29
     216:	cf 91       	pop	r28
     218:	08 95       	ret

0000021a <APP_start>:

void APP_start()
{	
	US_sendtrigger(); /** SEND TRIGGER **/
     21a:	0e 94 5c 05 	call	0xab8	; 0xab8 <US_sendtrigger>
		
	u8_g_distance = (u16_g_time/464) ; /** CALCULATE THE DISTANCE **/
     21e:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <u16_g_time>
     222:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <u16_g_time+0x1>
     226:	af e9       	ldi	r26, 0x9F	; 159
     228:	b6 e4       	ldi	r27, 0x46	; 70
     22a:	0e 94 56 09 	call	0x12ac	; 0x12ac <__umulhisi3>
     22e:	88 0f       	add	r24, r24
     230:	89 2f       	mov	r24, r25
     232:	88 1f       	adc	r24, r24
     234:	99 0b       	sbc	r25, r25
     236:	91 95       	neg	r25
     238:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <u8_g_distance>
	LCD_goto(0,1);
     23c:	61 e0       	ldi	r22, 0x01	; 1
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_goto>
	LCD_writestr("Distance : ");
     244:	82 e9       	ldi	r24, 0x92	; 146
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 cc 03 	call	0x798	; 0x798 <LCD_writestr>
	LCD_writeint(u8_g_distance); /** PRINT THE DISTANCE OVER THE LCD **/
     24c:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <u8_g_distance>
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 f7 03 	call	0x7ee	; 0x7ee <LCD_writeint>
	

	while(u8_g_distance <= 30)
     25a:	36 c0       	rjmp	.+108    	; 0x2c8 <APP_start+0xae>
	{
		MOTOR_turnon(MOTOR1_ID);
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 30 05 	call	0xa60	; 0xa60 <MOTOR_turnon>
		MOTOR_turnon(MOTOR2_ID);
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	0e 94 30 05 	call	0xa60	; 0xa60 <MOTOR_turnon>
		MOTOR_turnon(MOTOR3_ID);
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	0e 94 30 05 	call	0xa60	; 0xa60 <MOTOR_turnon>
		MOTOR_turnon(MOTOR4_ID);
     26e:	83 e0       	ldi	r24, 0x03	; 3
     270:	0e 94 30 05 	call	0xa60	; 0xa60 <MOTOR_turnon>
		TMR0_delaymicros(3200);
     274:	60 e8       	ldi	r22, 0x80	; 128
     276:	7c e0       	ldi	r23, 0x0C	; 12
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 5d 07 	call	0xeba	; 0xeba <TMR0_delaymicros>
		
		MOTOR_turnoff(MOTOR1_ID);
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	0e 94 0a 05 	call	0xa14	; 0xa14 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR2_ID);
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	0e 94 0a 05 	call	0xa14	; 0xa14 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR3_ID);
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	0e 94 0a 05 	call	0xa14	; 0xa14 <MOTOR_turnoff>
		MOTOR_turnoff(MOTOR4_ID);
     292:	83 e0       	ldi	r24, 0x03	; 3
     294:	0e 94 0a 05 	call	0xa14	; 0xa14 <MOTOR_turnoff>
		TMR0_delaymicros(3200);
     298:	60 e8       	ldi	r22, 0x80	; 128
     29a:	7c e0       	ldi	r23, 0x0C	; 12
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	0e 94 5d 07 	call	0xeba	; 0xeba <TMR0_delaymicros>
		
		while(u8_g_distance > 30 && u8_g_distance <= 50)
     2a4:	0c c0       	rjmp	.+24     	; 0x2be <APP_start+0xa4>
		{
			MOTOR_turnon(MOTOR1_ID);
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 30 05 	call	0xa60	; 0xa60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR2_ID);
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	0e 94 30 05 	call	0xa60	; 0xa60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR3_ID);
     2b2:	82 e0       	ldi	r24, 0x02	; 2
     2b4:	0e 94 30 05 	call	0xa60	; 0xa60 <MOTOR_turnon>
			MOTOR_turnon(MOTOR4_ID);
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	0e 94 30 05 	call	0xa60	; 0xa60 <MOTOR_turnon>
		MOTOR_turnoff(MOTOR2_ID);
		MOTOR_turnoff(MOTOR3_ID);
		MOTOR_turnoff(MOTOR4_ID);
		TMR0_delaymicros(3200);
		
		while(u8_g_distance > 30 && u8_g_distance <= 50)
     2be:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u8_g_distance>
     2c2:	8f 51       	subi	r24, 0x1F	; 31
     2c4:	84 31       	cpi	r24, 0x14	; 20
     2c6:	78 f3       	brcs	.-34     	; 0x2a6 <APP_start+0x8c>
	LCD_goto(0,1);
	LCD_writestr("Distance : ");
	LCD_writeint(u8_g_distance); /** PRINT THE DISTANCE OVER THE LCD **/
	

	while(u8_g_distance <= 30)
     2c8:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <u8_g_distance>
     2cc:	8f 31       	cpi	r24, 0x1F	; 31
     2ce:	30 f2       	brcs	.-116    	; 0x25c <APP_start+0x42>
			MOTOR_turnon(MOTOR3_ID);
			MOTOR_turnon(MOTOR4_ID);
		}

	}
}
     2d0:	08 95       	ret

000002d2 <__vector_1>:


/** EXTI0 **/
ISR(INT0_vect)
{
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	2f 93       	push	r18
     2de:	3f 93       	push	r19
     2e0:	4f 93       	push	r20
     2e2:	5f 93       	push	r21
     2e4:	6f 93       	push	r22
     2e6:	7f 93       	push	r23
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
     2ec:	af 93       	push	r26
     2ee:	bf 93       	push	r27
     2f0:	ef 93       	push	r30
     2f2:	ff 93       	push	r31
	u8_echoedge++ ; /** INCREASE THE ECHO BY 1 **/
     2f4:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <u8_echoedge>
     2f8:	8f 5f       	subi	r24, 0xFF	; 255
     2fa:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <u8_echoedge>
	
	if(u8_echoedge == 1) /** FIRST CHANGE (RISING EDGE) **/
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	19 f4       	brne	.+6      	; 0x308 <__vector_1+0x36>
	{
		ICU_start(); /** START ICU / COUNTING **/
     302:	0e 94 11 02 	call	0x422	; 0x422 <ICU_start>
     306:	10 c0       	rjmp	.+32     	; 0x328 <__vector_1+0x56>
	}
	
	else if(u8_echoedge == 2) /** SECOND CHANGE (FALLING EDGE) **/
     308:	82 30       	cpi	r24, 0x02	; 2
     30a:	71 f4       	brne	.+28     	; 0x328 <__vector_1+0x56>
	{
		ICU_stop(); /** STOP ICU / COUNTING **/
     30c:	0e 94 17 02 	call	0x42e	; 0x42e <ICU_stop>
		
		u16_g_time = ICU_getvalue(); /** GET PULSE LENGTH **/
     310:	0e 94 ff 01 	call	0x3fe	; 0x3fe <ICU_getvalue>
     314:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <u16_g_time+0x1>
     318:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <u16_g_time>
		
		ICU_setcounterval(0); /** START COUNTING FROM ZERO **/
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 14 02 	call	0x428	; 0x428 <ICU_setcounterval>
				
		u8_echoedge = 0 ; /** REINITIALIZE ECHO EDGE TO 0 TO REPEAT IN ANY CHANGE AGAIN **/
     324:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <u8_echoedge>
	}
}
     328:	ff 91       	pop	r31
     32a:	ef 91       	pop	r30
     32c:	bf 91       	pop	r27
     32e:	af 91       	pop	r26
     330:	9f 91       	pop	r25
     332:	8f 91       	pop	r24
     334:	7f 91       	pop	r23
     336:	6f 91       	pop	r22
     338:	5f 91       	pop	r21
     33a:	4f 91       	pop	r20
     33c:	3f 91       	pop	r19
     33e:	2f 91       	pop	r18
     340:	0f 90       	pop	r0
     342:	0f be       	out	0x3f, r0	; 63
     344:	0f 90       	pop	r0
     346:	1f 90       	pop	r1
     348:	18 95       	reti

0000034a <__vector_9>:

/** TIMER 1 OVERFLOW **/
ISR(TIMER1_OVF_vect)
{
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
	/** DO NOTHING **/
}
     354:	0f 90       	pop	r0
     356:	0f be       	out	0x3f, r0	; 63
     358:	0f 90       	pop	r0
     35a:	1f 90       	pop	r1
     35c:	18 95       	reti

0000035e <__vector_5>:

/** TIMER 0 OVERFLOW **/
ISR(TIMER2_OVF_vect)
{
     35e:	1f 92       	push	r1
     360:	0f 92       	push	r0
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	0f 92       	push	r0
     366:	11 24       	eor	r1, r1
     368:	8f 93       	push	r24
     36a:	9f 93       	push	r25
     36c:	af 93       	push	r26
     36e:	bf 93       	push	r27
	u32_g_tick++ ; /** INCREASE TICKS  **/
     370:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <__data_end>
     374:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <__data_end+0x1>
     378:	a0 91 a0 00 	lds	r26, 0x00A0	; 0x8000a0 <__data_end+0x2>
     37c:	b0 91 a1 00 	lds	r27, 0x00A1	; 0x8000a1 <__data_end+0x3>
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	a1 1d       	adc	r26, r1
     384:	b1 1d       	adc	r27, r1
     386:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end>
     38a:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <__data_end+0x1>
     38e:	a0 93 a0 00 	sts	0x00A0, r26	; 0x8000a0 <__data_end+0x2>
     392:	b0 93 a1 00 	sts	0x00A1, r27	; 0x8000a1 <__data_end+0x3>
}
     396:	bf 91       	pop	r27
     398:	af 91       	pop	r26
     39a:	9f 91       	pop	r25
     39c:	8f 91       	pop	r24
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <Button_init>:
/* RETURN    : void                                              */
/*****************************************************************/
void Button_init(void)
{
	/** SET THE DIRECTION OF BUTTON AS INPUT **/
	DIO_setpindir(BUTTON1_PORT , BUTTON1_PIN , DIO_PIN_INPUT);
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	63 e0       	ldi	r22, 0x03	; 3
     3ac:	83 e0       	ldi	r24, 0x03	; 3
     3ae:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     3b2:	08 95       	ret

000003b4 <Is_pressed>:
/* FUNCTION TO CHECK THE BUTTON STATUS PRESSED OR NOT            */
/* ARGUMENTS : TAKES THE BUTTON PIN                              */
/* RETURN    : RETURNS BUTTON_t type                             */
/*****************************************************************/
en_a_button_t Is_pressed(uint8_t Button_port , uint8_t Button_pin , uint8_t * value)
{
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	1f 92       	push	r1
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	8a 01       	movw	r16, r20
	en_a_button_t button_state = Button_Notpressed ; /* VARIABLE TO HOLD THE RETURN TYPE OF THE FUNCTION */
	
	PinRead_t pin_status = NOT_VALID_READ ;  /** VARIABLE TO HOLD THE STATE OF PIN READ **/
	
	uint8_t pvalue = 0 ;
     3c4:	19 82       	std	Y+1, r1	; 0x01
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
     3c6:	ae 01       	movw	r20, r28
     3c8:	4f 5f       	subi	r20, 0xFF	; 255
     3ca:	5f 4f       	sbci	r21, 0xFF	; 255
     3cc:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_readpin>
	
	if (!pin_status) 
     3d0:	81 11       	cpse	r24, r1
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <Is_pressed+0x2a>
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	f8 01       	movw	r30, r16
     3d8:	80 83       	st	Z, r24
	
	pin_status = DIO_readpin(Button_port , Button_pin , &pvalue); /** READ THE BUTTON PIN VALUE */
	
	if (!pin_status) 
	{
		button_state = Button_pressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <Is_pressed+0x32>
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
		*value = pvalue ;
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	f8 01       	movw	r30, r16
     3e2:	80 83       	st	Z, r24
		*value = pvalue ;
	}
	
	else
	{
		button_state = Button_Notpressed ; /** RETURN THE STATUS AS BUTTON IS PRESSED **/
     3e4:	80 e0       	ldi	r24, 0x00	; 0
		*value = pvalue ;
	}
	
	return button_state ; /** RETURN THE STATUS OF THE BUTTON **/
}
     3e6:	0f 90       	pop	r0
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <ICU_init>:
/**************************************************************/
en_a_icuerrorstatus ICU_init(void)
{
	en_a_icuerrorstatus en_a_returnstatus = VALID_ICU_INIT ;
	
	TMR1_init(); /** INITIALIZE TIMER 1 MODULE **/
     3f2:	0e 94 91 07 	call	0xf22	; 0xf22 <TMR1_init>
	
	#if ICU_EXTI_PIN ==  ICU_EXTI0
		INT0_init();  /** USE EXTERNAL INTERRUPT 0 PIN **/
     3f6:	0e 94 ee 06 	call	0xddc	; 0xddc <INT0_init>
		en_a_returnstatus = NOTVALID_ICU_INIT ; /** NOT VALID PIN **/
	#endif
	
	return en_a_returnstatus ; /** RETURN THE STATUS **/
		
}
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	08 95       	ret

000003fe <ICU_getvalue>:
/** FUNCTION TO GET THE VALUE OF TIMER WHEN EVENT HAPPENS    **/
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
uint16t ICU_getvalue(void)
{
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	00 d0       	rcall	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
	uint16t u16_l_time = 0 ; /** LOCAL VARIABLE TO RETURN THE TIME STAMP **/
     408:	1a 82       	std	Y+2, r1	; 0x02
     40a:	19 82       	std	Y+1, r1	; 0x01
	
	TMR1_getvalue(&u16_l_time) ; /** GET THE VALUE FROM TIMER1 REGISTER **/
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	0e 94 c4 07 	call	0xf88	; 0xf88 <TMR1_getvalue>
	
	return u16_l_time ; /** RETURN THE TIME STAMP **/
}
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	9a 81       	ldd	r25, Y+2	; 0x02
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <ICU_start>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_start(void)
{
	TMR1_start(); /** START TIMER1 COUNTING **/
     422:	0e 94 ac 07 	call	0xf58	; 0xf58 <TMR1_start>
     426:	08 95       	ret

00000428 <ICU_setcounterval>:
/** ARGUMENTS : u8_a_pin EXTERNAL INTERRUPT PIN              **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_setcounterval(uint16t u16_a_counterval)
{
	TMR1_setcounterval(u16_a_counterval);
     428:	0e 94 ca 07 	call	0xf94	; 0xf94 <TMR1_setcounterval>
     42c:	08 95       	ret

0000042e <ICU_stop>:
/** ARGUMENTS : VOID                                         **/
/** RETURN    : VOID                                         **/
/**************************************************************/
void ICU_stop(void)
{
	TMR1_stop();  /** STOP TIMER1 COUNTING **/
     42e:	0e 94 b9 07 	call	0xf72	; 0xf72 <TMR1_stop>
     432:	08 95       	ret

00000434 <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
     434:	41 e0       	ldi	r20, 0x01	; 1
     436:	65 e0       	ldi	r22, 0x05	; 5
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
     43e:	41 e0       	ldi	r20, 0x01	; 1
     440:	66 e0       	ldi	r22, 0x06	; 6
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
     448:	41 e0       	ldi	r20, 0x01	; 1
     44a:	67 e0       	ldi	r22, 0x07	; 7
     44c:	83 e0       	ldi	r24, 0x03	; 3
     44e:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>

	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
     466:	40 e0       	ldi	r20, 0x00	; 0
     468:	64 e0       	ldi	r22, 0x04	; 4
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
	DIO_setpinvalue(ROW_PORT_DATA , R3 ,  DIO_PIN_LOW);


    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
     470:	41 e0       	ldi	r20, 0x01	; 1
     472:	65 e0       	ldi	r22, 0x05	; 5
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
     47a:	41 e0       	ldi	r20, 0x01	; 1
     47c:	66 e0       	ldi	r22, 0x06	; 6
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
     484:	41 e0       	ldi	r20, 0x01	; 1
     486:	67 e0       	ldi	r22, 0x07	; 7
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
     48e:	41 e0       	ldi	r20, 0x01	; 1
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
     498:	41 e0       	ldi	r20, 0x01	; 1
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
     4a2:	41 e0       	ldi	r20, 0x01	; 1
     4a4:	64 e0       	ldi	r22, 0x04	; 4
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	08 95       	ret

000004b0 <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     4b0:	ef 92       	push	r14
     4b2:	ff 92       	push	r15
     4b4:	0f 93       	push	r16
     4b6:	1f 93       	push	r17
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	00 d0       	rcall	.+0      	; 0x4be <KEYPAD_read+0xe>
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <KEYPAD_read+0x10>
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <KEYPAD_read+0x12>
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
     4c8:	85 e0       	ldi	r24, 0x05	; 5
     4ca:	89 83       	std	Y+1, r24	; 0x01
     4cc:	86 e0       	ldi	r24, 0x06	; 6
     4ce:	8a 83       	std	Y+2, r24	; 0x02
     4d0:	87 e0       	ldi	r24, 0x07	; 7
     4d2:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
     4d4:	1c 82       	std	Y+4, r1	; 0x04
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	8d 83       	std	Y+5, r24	; 0x05
     4da:	84 e0       	ldi	r24, 0x04	; 4
     4dc:	8e 83       	std	Y+6, r24	; 0x06

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     4de:	00 e0       	ldi	r16, 0x00	; 0
     4e0:	79 c0       	rjmp	.+242    	; 0x5d4 <KEYPAD_read+0x124>
    {
		if (u8_a_rowiterator == 3 )
     4e2:	03 30       	cpi	r16, 0x03	; 3
     4e4:	39 f4       	brne	.+14     	; 0x4f4 <KEYPAD_read+0x44>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	83 e0       	ldi	r24, 0x03	; 3
     4ec:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     4f0:	10 e0       	ldi	r17, 0x00	; 0
     4f2:	62 c0       	rjmp	.+196    	; 0x5b8 <KEYPAD_read+0x108>
		{
			DIO_setpinvalue(DIO_PORTD , DIO_PIN0, u8_l_pinValue);
		}
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
     4f4:	e1 e0       	ldi	r30, 0x01	; 1
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	ec 0f       	add	r30, r28
     4fa:	fd 1f       	adc	r31, r29
     4fc:	e0 0f       	add	r30, r16
     4fe:	f1 1d       	adc	r31, r1
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	60 81       	ld	r22, Z
     504:	83 e0       	ldi	r24, 0x03	; 3
     506:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     50a:	f2 cf       	rjmp	.-28     	; 0x4f0 <KEYPAD_read+0x40>
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
     50c:	e4 e0       	ldi	r30, 0x04	; 4
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	ec 0f       	add	r30, r28
     512:	fd 1f       	adc	r31, r29
     514:	e1 0f       	add	r30, r17
     516:	f1 1d       	adc	r31, r1
     518:	a7 01       	movw	r20, r14
     51a:	60 81       	ld	r22, Z
     51c:	83 e0       	ldi	r24, 0x03	; 3
     51e:	0e 94 72 06 	call	0xce4	; 0xce4 <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
     522:	f7 01       	movw	r30, r14
     524:	80 81       	ld	r24, Z
     526:	81 11       	cpse	r24, r1
     528:	46 c0       	rjmp	.+140    	; 0x5b6 <KEYPAD_read+0x106>
            {
                if (u8_a_rowiterator == 0)
     52a:	01 11       	cpse	r16, r1
     52c:	11 c0       	rjmp	.+34     	; 0x550 <KEYPAD_read+0xa0>
                {
                    if (u8_a_coulumniterator == 0)
     52e:	11 11       	cpse	r17, r1
     530:	03 c0       	rjmp	.+6      	; 0x538 <KEYPAD_read+0x88>
                    {
                        *u8_a_value = '1' ;
     532:	81 e3       	ldi	r24, 0x31	; 49
     534:	80 83       	st	Z, r24
     536:	33 c0       	rjmp	.+102    	; 0x59e <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     538:	11 30       	cpi	r17, 0x01	; 1
     53a:	21 f4       	brne	.+8      	; 0x544 <KEYPAD_read+0x94>
                    {
                        *u8_a_value = '2' ;
     53c:	82 e3       	ldi	r24, 0x32	; 50
     53e:	f7 01       	movw	r30, r14
     540:	80 83       	st	Z, r24
     542:	2d c0       	rjmp	.+90     	; 0x59e <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     544:	12 30       	cpi	r17, 0x02	; 2
     546:	59 f5       	brne	.+86     	; 0x59e <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '3' ;
     548:	83 e3       	ldi	r24, 0x33	; 51
     54a:	f7 01       	movw	r30, r14
     54c:	80 83       	st	Z, r24
     54e:	27 c0       	rjmp	.+78     	; 0x59e <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 1)
     550:	01 30       	cpi	r16, 0x01	; 1
     552:	91 f4       	brne	.+36     	; 0x578 <KEYPAD_read+0xc8>
                {
                    if (u8_a_coulumniterator == 0)
     554:	11 11       	cpse	r17, r1
     556:	04 c0       	rjmp	.+8      	; 0x560 <KEYPAD_read+0xb0>
                    {
                        *u8_a_value = '4' ;
     558:	84 e3       	ldi	r24, 0x34	; 52
     55a:	f7 01       	movw	r30, r14
     55c:	80 83       	st	Z, r24
     55e:	1f c0       	rjmp	.+62     	; 0x59e <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     560:	11 30       	cpi	r17, 0x01	; 1
     562:	21 f4       	brne	.+8      	; 0x56c <KEYPAD_read+0xbc>
                    {
                        *u8_a_value = '5' ;
     564:	85 e3       	ldi	r24, 0x35	; 53
     566:	f7 01       	movw	r30, r14
     568:	80 83       	st	Z, r24
     56a:	19 c0       	rjmp	.+50     	; 0x59e <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     56c:	12 30       	cpi	r17, 0x02	; 2
     56e:	b9 f4       	brne	.+46     	; 0x59e <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '6' ;
     570:	86 e3       	ldi	r24, 0x36	; 54
     572:	f7 01       	movw	r30, r14
     574:	80 83       	st	Z, r24
     576:	13 c0       	rjmp	.+38     	; 0x59e <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 2)
     578:	02 30       	cpi	r16, 0x02	; 2
     57a:	89 f4       	brne	.+34     	; 0x59e <KEYPAD_read+0xee>
                {
                    if (u8_a_coulumniterator == 0)
     57c:	11 11       	cpse	r17, r1
     57e:	04 c0       	rjmp	.+8      	; 0x588 <KEYPAD_read+0xd8>
                    {
                        *u8_a_value = '7' ;
     580:	87 e3       	ldi	r24, 0x37	; 55
     582:	f7 01       	movw	r30, r14
     584:	80 83       	st	Z, r24
     586:	0b c0       	rjmp	.+22     	; 0x59e <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     588:	11 30       	cpi	r17, 0x01	; 1
     58a:	21 f4       	brne	.+8      	; 0x594 <KEYPAD_read+0xe4>
                    {
                        *u8_a_value = '8' ;
     58c:	88 e3       	ldi	r24, 0x38	; 56
     58e:	f7 01       	movw	r30, r14
     590:	80 83       	st	Z, r24
     592:	05 c0       	rjmp	.+10     	; 0x59e <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     594:	12 30       	cpi	r17, 0x02	; 2
     596:	19 f4       	brne	.+6      	; 0x59e <KEYPAD_read+0xee>
                    {
                        *u8_a_value = '9' ;
     598:	89 e3       	ldi	r24, 0x39	; 57
     59a:	f7 01       	movw	r30, r14
     59c:	80 83       	st	Z, r24
                    }
                }
				
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     59e:	e1 e0       	ldi	r30, 0x01	; 1
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	ec 0f       	add	r30, r28
     5a4:	fd 1f       	adc	r31, r29
     5a6:	e0 0f       	add	r30, r16
     5a8:	f1 1d       	adc	r31, r1
     5aa:	60 81       	ld	r22, Z
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_togglepin>
				return KEYPAD_readSuccess;
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	13 c0       	rjmp	.+38     	; 0x5dc <KEYPAD_read+0x12c>
		else
		{
			DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
		}

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     5b6:	1f 5f       	subi	r17, 0xFF	; 255
     5b8:	13 30       	cpi	r17, 0x03	; 3
     5ba:	08 f4       	brcc	.+2      	; 0x5be <KEYPAD_read+0x10e>
     5bc:	a7 cf       	rjmp	.-178    	; 0x50c <KEYPAD_read+0x5c>
				DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
				return KEYPAD_readSuccess;
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     5be:	e1 e0       	ldi	r30, 0x01	; 1
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	ec 0f       	add	r30, r28
     5c4:	fd 1f       	adc	r31, r29
     5c6:	e0 0f       	add	r30, r16
     5c8:	f1 1d       	adc	r31, r1
     5ca:	60 81       	ld	r22, Z
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	0e 94 b0 06 	call	0xd60	; 0xd60 <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     5d2:	0f 5f       	subi	r16, 0xFF	; 255
     5d4:	03 30       	cpi	r16, 0x03	; 3
     5d6:	08 f4       	brcc	.+2      	; 0x5da <KEYPAD_read+0x12a>
     5d8:	84 cf       	rjmp	.-248    	; 0x4e2 <KEYPAD_read+0x32>
            }
        }
		
			DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
    }
    return KEYPAD_readFail;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	26 96       	adiw	r28, 0x06	; 6
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	1f 91       	pop	r17
     5ee:	0f 91       	pop	r16
     5f0:	ff 90       	pop	r15
     5f2:	ef 90       	pop	r14
     5f4:	08 95       	ret

000005f6 <LCD_sendcmd>:
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     5f6:	cf 93       	push	r28
     5f8:	c8 2f       	mov	r28, r24
     5fa:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <TMR0_init>
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	61 e0       	ldi	r22, 0x01	; 1
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	62 e0       	ldi	r22, 0x02	; 2
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	63 e0       	ldi	r22, 0x03	; 3
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     61c:	8b b3       	in	r24, 0x1b	; 27
     61e:	9c 2f       	mov	r25, r28
     620:	90 7f       	andi	r25, 0xF0	; 240
     622:	8f 70       	andi	r24, 0x0F	; 15
     624:	89 2b       	or	r24, r25
     626:	8b bb       	out	0x1b, r24	; 27
     628:	41 e0       	ldi	r20, 0x01	; 1
     62a:	63 e0       	ldi	r22, 0x03	; 3
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	63 e0       	ldi	r22, 0x03	; 3
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     648:	20 e1       	ldi	r18, 0x10	; 16
     64a:	c2 9f       	mul	r28, r18
     64c:	c0 01       	movw	r24, r0
     64e:	11 24       	eor	r1, r1
     650:	9b b3       	in	r25, 0x1b	; 27
     652:	9f 70       	andi	r25, 0x0F	; 15
     654:	89 2b       	or	r24, r25
     656:	8b bb       	out	0x1b, r24	; 27
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	63 e0       	ldi	r22, 0x03	; 3
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     662:	61 e0       	ldi	r22, 0x01	; 1
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	63 e0       	ldi	r22, 0x03	; 3
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     678:	65 e0       	ldi	r22, 0x05	; 5
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <LCD_init>:
     688:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <TMR0_init>
     68c:	41 e0       	ldi	r20, 0x01	; 1
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     696:	41 e0       	ldi	r20, 0x01	; 1
     698:	62 e0       	ldi	r22, 0x02	; 2
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     6a0:	41 e0       	ldi	r20, 0x01	; 1
     6a2:	63 e0       	ldi	r22, 0x03	; 3
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     6aa:	41 e0       	ldi	r20, 0x01	; 1
     6ac:	64 e0       	ldi	r22, 0x04	; 4
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     6b4:	41 e0       	ldi	r20, 0x01	; 1
     6b6:	65 e0       	ldi	r22, 0x05	; 5
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     6be:	41 e0       	ldi	r20, 0x01	; 1
     6c0:	66 e0       	ldi	r22, 0x06	; 6
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	67 e0       	ldi	r22, 0x07	; 7
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     6d2:	64 e1       	ldi	r22, 0x14	; 20
     6d4:	70 e0       	ldi	r23, 0x00	; 0
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>
     6de:	83 e3       	ldi	r24, 0x33	; 51
     6e0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_sendcmd>
     6e4:	82 e3       	ldi	r24, 0x32	; 50
     6e6:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_sendcmd>
     6ea:	88 e2       	ldi	r24, 0x28	; 40
     6ec:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_sendcmd>
     6f0:	8c e0       	ldi	r24, 0x0C	; 12
     6f2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_sendcmd>
     6f6:	86 e0       	ldi	r24, 0x06	; 6
     6f8:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_sendcmd>
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_sendcmd>
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_sendcmd>
     708:	08 95       	ret

0000070a <LCD_writechar>:
     70a:	cf 93       	push	r28
     70c:	c8 2f       	mov	r28, r24
     70e:	41 e0       	ldi	r20, 0x01	; 1
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	62 e0       	ldi	r22, 0x02	; 2
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	63 e0       	ldi	r22, 0x03	; 3
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     72c:	8b b3       	in	r24, 0x1b	; 27
     72e:	9c 2f       	mov	r25, r28
     730:	90 7f       	andi	r25, 0xF0	; 240
     732:	8f 70       	andi	r24, 0x0F	; 15
     734:	89 2b       	or	r24, r25
     736:	8b bb       	out	0x1b, r24	; 27
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	63 e0       	ldi	r22, 0x03	; 3
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	63 e0       	ldi	r22, 0x03	; 3
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     758:	20 e1       	ldi	r18, 0x10	; 16
     75a:	c2 9f       	mul	r28, r18
     75c:	c0 01       	movw	r24, r0
     75e:	11 24       	eor	r1, r1
     760:	9b b3       	in	r25, 0x1b	; 27
     762:	9f 70       	andi	r25, 0x0F	; 15
     764:	89 2b       	or	r24, r25
     766:	8b bb       	out	0x1b, r24	; 27
     768:	41 e0       	ldi	r20, 0x01	; 1
     76a:	63 e0       	ldi	r22, 0x03	; 3
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     772:	61 e0       	ldi	r22, 0x01	; 1
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	63 e0       	ldi	r22, 0x03	; 3
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     788:	65 e0       	ldi	r22, 0x05	; 5
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	0e 94 21 07 	call	0xe42	; 0xe42 <TMR0_delayms>
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <LCD_writestr>:
     798:	0f 93       	push	r16
     79a:	1f 93       	push	r17
     79c:	cf 93       	push	r28
     79e:	8c 01       	movw	r16, r24
     7a0:	c0 e0       	ldi	r28, 0x00	; 0
     7a2:	03 c0       	rjmp	.+6      	; 0x7aa <LCD_writestr+0x12>
     7a4:	0e 94 85 03 	call	0x70a	; 0x70a <LCD_writechar>
     7a8:	cf 5f       	subi	r28, 0xFF	; 255
     7aa:	f8 01       	movw	r30, r16
     7ac:	ec 0f       	add	r30, r28
     7ae:	f1 1d       	adc	r31, r1
     7b0:	80 81       	ld	r24, Z
     7b2:	81 11       	cpse	r24, r1
     7b4:	f7 cf       	rjmp	.-18     	; 0x7a4 <LCD_writestr+0xc>
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	08 95       	ret

000007be <LCD_goto>:
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <LCD_goto+0x6>
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	90 e8       	ldi	r25, 0x80	; 128
     7ca:	99 83       	std	Y+1, r25	; 0x01
     7cc:	90 ec       	ldi	r25, 0xC0	; 192
     7ce:	9a 83       	std	Y+2, r25	; 0x02
     7d0:	e1 e0       	ldi	r30, 0x01	; 1
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	ec 0f       	add	r30, r28
     7d6:	fd 1f       	adc	r31, r29
     7d8:	e8 0f       	add	r30, r24
     7da:	f1 1d       	adc	r31, r1
     7dc:	80 81       	ld	r24, Z
     7de:	86 0f       	add	r24, r22
     7e0:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <LCD_sendcmd>
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	2a 97       	sbiw	r28, 0x0a	; 10
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	f8 94       	cli
     7fe:	de bf       	out	0x3e, r29	; 62
     800:	0f be       	out	0x3f, r0	; 63
     802:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     804:	99 23       	and	r25, r25
     806:	dc f5       	brge	.+118    	; 0x87e <__stack+0x1f>
	{
		s32_a_num *= -1;
     808:	90 95       	com	r25
     80a:	80 95       	com	r24
     80c:	70 95       	com	r23
     80e:	61 95       	neg	r22
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	8f 4f       	sbci	r24, 0xFF	; 255
     814:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     816:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     818:	13 c0       	rjmp	.+38     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     81a:	2a e0       	ldi	r18, 0x0A	; 10
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	0e 94 37 09 	call	0x126e	; 0x126e <__divmodsi4>
     826:	e1 e0       	ldi	r30, 0x01	; 1
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	ec 0f       	add	r30, r28
     82c:	fd 1f       	adc	r31, r29
     82e:	e1 0f       	add	r30, r17
     830:	f1 1d       	adc	r31, r1
     832:	60 5d       	subi	r22, 0xD0	; 208
     834:	60 83       	st	Z, r22
			s32_a_num /= 10;
     836:	62 2f       	mov	r22, r18
     838:	73 2f       	mov	r23, r19
     83a:	84 2f       	mov	r24, r20
     83c:	95 2f       	mov	r25, r21
			i++;
     83e:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     840:	16 16       	cp	r1, r22
     842:	17 06       	cpc	r1, r23
     844:	18 06       	cpc	r1, r24
     846:	19 06       	cpc	r1, r25
     848:	44 f3       	brlt	.-48     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     84a:	e1 e0       	ldi	r30, 0x01	; 1
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	ec 0f       	add	r30, r28
     850:	fd 1f       	adc	r31, r29
     852:	e1 0f       	add	r30, r17
     854:	f1 1d       	adc	r31, r1
     856:	8d e2       	ldi	r24, 0x2D	; 45
     858:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     85a:	1f 5f       	subi	r17, 0xFF	; 255
     85c:	0d c0       	rjmp	.+26     	; 0x878 <__stack+0x19>
		{
			LCD_writechar(number[k - 1]); //Display each number
     85e:	e1 2f       	mov	r30, r17
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	31 97       	sbiw	r30, 0x01	; 1
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	8c 0f       	add	r24, r28
     86a:	9d 1f       	adc	r25, r29
     86c:	e8 0f       	add	r30, r24
     86e:	f9 1f       	adc	r31, r25
     870:	80 81       	ld	r24, Z
     872:	0e 94 85 03 	call	0x70a	; 0x70a <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     876:	11 50       	subi	r17, 0x01	; 1
     878:	11 11       	cpse	r17, r1
     87a:	f1 cf       	rjmp	.-30     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     87c:	39 c0       	rjmp	.+114    	; 0x8f0 <__stack+0x91>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     87e:	61 15       	cp	r22, r1
     880:	71 05       	cpc	r23, r1
     882:	81 05       	cpc	r24, r1
     884:	91 05       	cpc	r25, r1
     886:	21 f4       	brne	.+8      	; 0x890 <__stack+0x31>
	{
		LCD_writechar('0');
     888:	80 e3       	ldi	r24, 0x30	; 48
     88a:	0e 94 85 03 	call	0x70a	; 0x70a <LCD_writechar>
     88e:	30 c0       	rjmp	.+96     	; 0x8f0 <__stack+0x91>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     890:	16 16       	cp	r1, r22
     892:	17 06       	cpc	r1, r23
     894:	18 06       	cpc	r1, r24
     896:	19 06       	cpc	r1, r25
     898:	ac f0       	brlt	.+42     	; 0x8c4 <__stack+0x65>
     89a:	2a c0       	rjmp	.+84     	; 0x8f0 <__stack+0x91>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     89c:	2a e0       	ldi	r18, 0x0A	; 10
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	0e 94 37 09 	call	0x126e	; 0x126e <__divmodsi4>
     8a8:	e1 e0       	ldi	r30, 0x01	; 1
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	ec 0f       	add	r30, r28
     8ae:	fd 1f       	adc	r31, r29
     8b0:	e1 0f       	add	r30, r17
     8b2:	f1 1d       	adc	r31, r1
     8b4:	60 5d       	subi	r22, 0xD0	; 208
     8b6:	60 83       	st	Z, r22
			s32_a_num /= 10;
     8b8:	62 2f       	mov	r22, r18
     8ba:	73 2f       	mov	r23, r19
     8bc:	84 2f       	mov	r24, r20
     8be:	95 2f       	mov	r25, r21
			i++;
     8c0:	1f 5f       	subi	r17, 0xFF	; 255
     8c2:	01 c0       	rjmp	.+2      	; 0x8c6 <__stack+0x67>
     8c4:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     8c6:	16 16       	cp	r1, r22
     8c8:	17 06       	cpc	r1, r23
     8ca:	18 06       	cpc	r1, r24
     8cc:	19 06       	cpc	r1, r25
     8ce:	34 f3       	brlt	.-52     	; 0x89c <__stack+0x3d>
     8d0:	0d c0       	rjmp	.+26     	; 0x8ec <__stack+0x8d>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     8d2:	e1 2f       	mov	r30, r17
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	31 97       	sbiw	r30, 0x01	; 1
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	8c 0f       	add	r24, r28
     8de:	9d 1f       	adc	r25, r29
     8e0:	e8 0f       	add	r30, r24
     8e2:	f9 1f       	adc	r31, r25
     8e4:	80 81       	ld	r24, Z
     8e6:	0e 94 85 03 	call	0x70a	; 0x70a <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     8ea:	11 50       	subi	r17, 0x01	; 1
     8ec:	11 11       	cpse	r17, r1
     8ee:	f1 cf       	rjmp	.-30     	; 0x8d2 <__stack+0x73>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     8f0:	2a 96       	adiw	r28, 0x0a	; 10
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	08 95       	ret

00000904 <MOTOR_init>:
		break;
		
	}
	
	return en_a_motorrotatestatus ; /** RETURN THE FINAL STATUS **/
}
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	b9 f0       	breq	.+46     	; 0x936 <MOTOR_init+0x32>
     908:	28 f0       	brcs	.+10     	; 0x914 <MOTOR_init+0x10>
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	29 f1       	breq	.+74     	; 0x958 <MOTOR_init+0x54>
     90e:	83 30       	cpi	r24, 0x03	; 3
     910:	a1 f1       	breq	.+104    	; 0x97a <MOTOR_init+0x76>
     912:	44 c0       	rjmp	.+136    	; 0x99c <MOTOR_init+0x98>
     914:	41 e0       	ldi	r20, 0x01	; 1
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     91e:	41 e0       	ldi	r20, 0x01	; 1
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	62 e0       	ldi	r22, 0x02	; 2
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	08 95       	ret
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	63 e0       	ldi	r22, 0x03	; 3
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     940:	41 e0       	ldi	r20, 0x01	; 1
     942:	64 e0       	ldi	r22, 0x04	; 4
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     94a:	41 e0       	ldi	r20, 0x01	; 1
     94c:	65 e0       	ldi	r22, 0x05	; 5
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	08 95       	ret
     958:	41 e0       	ldi	r20, 0x01	; 1
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     962:	41 e0       	ldi	r20, 0x01	; 1
     964:	61 e0       	ldi	r22, 0x01	; 1
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     96c:	41 e0       	ldi	r20, 0x01	; 1
     96e:	62 e0       	ldi	r22, 0x02	; 2
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	08 95       	ret
     97a:	41 e0       	ldi	r20, 0x01	; 1
     97c:	63 e0       	ldi	r22, 0x03	; 3
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     984:	41 e0       	ldi	r20, 0x01	; 1
     986:	64 e0       	ldi	r22, 0x04	; 4
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	65 e0       	ldi	r22, 0x05	; 5
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	08 95       	ret
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	08 95       	ret

000009a0 <MOTOR_rotateclkdir>:
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	91 f0       	breq	.+36     	; 0x9c8 <MOTOR_rotateclkdir+0x28>
     9a4:	28 f0       	brcs	.+10     	; 0x9b0 <MOTOR_rotateclkdir+0x10>
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	d9 f0       	breq	.+54     	; 0x9e0 <MOTOR_rotateclkdir+0x40>
     9aa:	83 30       	cpi	r24, 0x03	; 3
     9ac:	29 f1       	breq	.+74     	; 0x9f8 <MOTOR_rotateclkdir+0x58>
     9ae:	30 c0       	rjmp	.+96     	; 0xa10 <MOTOR_rotateclkdir+0x70>
     9b0:	41 e0       	ldi	r20, 0x01	; 1
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	08 95       	ret
     9c8:	41 e0       	ldi	r20, 0x01	; 1
     9ca:	63 e0       	ldi	r22, 0x03	; 3
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	64 e0       	ldi	r22, 0x04	; 4
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	08 95       	ret
     9e0:	41 e0       	ldi	r20, 0x01	; 1
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	08 95       	ret
     9f8:	41 e0       	ldi	r20, 0x01	; 1
     9fa:	63 e0       	ldi	r22, 0x03	; 3
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	64 e0       	ldi	r22, 0x04	; 4
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	08 95       	ret
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	08 95       	ret

00000a14 <MOTOR_turnoff>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	69 f0       	breq	.+26     	; 0xa32 <MOTOR_turnoff+0x1e>
     a18:	28 f0       	brcs	.+10     	; 0xa24 <MOTOR_turnoff+0x10>
     a1a:	82 30       	cpi	r24, 0x02	; 2
     a1c:	89 f0       	breq	.+34     	; 0xa40 <MOTOR_turnoff+0x2c>
     a1e:	83 30       	cpi	r24, 0x03	; 3
     a20:	b1 f0       	breq	.+44     	; 0xa4e <MOTOR_turnoff+0x3a>
     a22:	1c c0       	rjmp	.+56     	; 0xa5c <MOTOR_turnoff+0x48>
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	62 e0       	ldi	r22, 0x02	; 2
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     a2e:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : /** SET PINS OF MOTOR 1 **/
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     a30:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	65 e0       	ldi	r22, 0x05	; 5
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     a3c:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     a3e:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	62 e0       	ldi	r22, 0x02	; 2
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     a4a:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     a4c:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	65 e0       	ldi	r22, 0x05	; 5
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnoff(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     a58:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_LOW); /** SET ENABLE PIN TO LOW **/
		break;
     a5a:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     a5c:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     a5e:	08 95       	ret

00000a60 <MOTOR_turnon>:
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
	
	switch(u8_a_motorid)
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	69 f0       	breq	.+26     	; 0xa7e <MOTOR_turnon+0x1e>
     a64:	28 f0       	brcs	.+10     	; 0xa70 <MOTOR_turnon+0x10>
     a66:	82 30       	cpi	r24, 0x02	; 2
     a68:	89 f0       	breq	.+34     	; 0xa8c <MOTOR_turnon+0x2c>
     a6a:	83 30       	cpi	r24, 0x03	; 3
     a6c:	b1 f0       	breq	.+44     	; 0xa9a <MOTOR_turnon+0x3a>
     a6e:	1c c0       	rjmp	.+56     	; 0xaa8 <MOTOR_turnon+0x48>
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     a70:	41 e0       	ldi	r20, 0x01	; 1
     a72:	62 e0       	ldi	r22, 0x02	; 2
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     a7a:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_motorid)
	{
		case MOTOR1_ID : 
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     a7c:	08 95       	ret
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     a7e:	41 e0       	ldi	r20, 0x01	; 1
     a80:	65 e0       	ldi	r22, 0x05	; 5
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     a88:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR1_PORT , MOTOR1_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR2_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     a8a:	08 95       	ret
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	62 e0       	ldi	r22, 0x02	; 2
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     a96:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR2_PORT , MOTOR2_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR3_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     a98:	08 95       	ret
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
     a9a:	41 e0       	ldi	r20, 0x01	; 1
     a9c:	65 e0       	ldi	r22, 0x05	; 5
     a9e:	82 e0       	ldi	r24, 0x02	; 2
     aa0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
/** ARGUMENTS  : MOTOR ID                                       **/
/** RETURN     :  MOTOR INIT ERROR STATUS                       **/
/*****************************************************************/
MOTOR_init_status MOTOR_turnon(uint8_t u8_a_motorid)
{
	MOTOR_init_status en_a_motoroffstatus = VALID_MOTOR_INIT ; /** VARIABLE TO HOLD THE RETURN STATUS **/
     aa4:	80 e0       	ldi	r24, 0x00	; 0
		DIO_setpinvalue(MOTOR3_PORT , MOTOR3_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
		
		case MOTOR4_ID:  /** SET PINS OF MOTOR 2 **/
		DIO_setpinvalue(MOTOR4_PORT , MOTOR4_ENABLE_PIN , DIO_PIN_HIGH); /** SET ENABLE PIN TO HIGH **/
		break;
     aa6:	08 95       	ret
		
		default:
		/** RETURN ERROR **/
		en_a_motoroffstatus = NOTVALID_MOTOR_INIT ; /** AN ERROR IN INITIALIZE MOTOR **/
     aa8:	81 e0       	ldi	r24, 0x01	; 1
		break;
		
	}
	
	return en_a_motoroffstatus ; /** RETURN THE FINAL STATUS **/
}
     aaa:	08 95       	ret

00000aac <US_init>:
/** RETURNS : VOID                                                **/
/*******************************************************************/
void US_init(void)
{
	/** INITIALIZE THE TRIGGER PIN AS OUTPUT PIN **/
	DIO_setpindir(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_OUTPUT);
     aac:	41 e0       	ldi	r20, 0x01	; 1
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	0e 94 74 05 	call	0xae8	; 0xae8 <DIO_setpindir>
     ab6:	08 95       	ret

00000ab8 <US_sendtrigger>:
/** RETURNS : EN_ultrasonicreturn                                 **/
/*******************************************************************/
EN_ultrasonicreturn US_sendtrigger(void)
{
	/** SEND PULSE OF 15 MICROSECOND **/
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_HIGH);
     ab8:	41 e0       	ldi	r20, 0x01	; 1
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
	TMR0_delaymicros(15);
     ac2:	6f e0       	ldi	r22, 0x0F	; 15
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 5d 07 	call	0xeba	; 0xeba <TMR0_delaymicros>
	DIO_setpinvalue(US_TRIG_PORT , US_TRIG_PIN , DIO_PIN_LOW);
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <DIO_setpinvalue>
}
     ad8:	08 95       	ret

00000ada <main>:

#include "APP/APP.h"

int main(void)
{
	APP_init(); /** INITIALIZE APPLICATION MODULES **/
     ada:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	APP_setentry(); /** SET THE ENTRY DATA **/
     ade:	0e 94 76 00 	call	0xec	; 0xec <APP_setentry>
	
    while (1) 
    {
		APP_start(); /** SUPER LOOP **/	
     ae2:	0e 94 0d 01 	call	0x21a	; 0x21a <APP_start>
     ae6:	fd cf       	rjmp	.-6      	; 0xae2 <main+0x8>

00000ae8 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
     ae8:	44 23       	and	r20, r20
     aea:	19 f0       	breq	.+6      	; 0xaf2 <DIO_setpindir+0xa>
     aec:	41 30       	cpi	r20, 0x01	; 1
     aee:	e9 f1       	breq	.+122    	; 0xb6a <DIO_setpindir+0x82>
     af0:	74 c0       	rjmp	.+232    	; 0xbda <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	99 f0       	breq	.+38     	; 0xb1c <DIO_setpindir+0x34>
     af6:	28 f0       	brcs	.+10     	; 0xb02 <DIO_setpindir+0x1a>
     af8:	82 30       	cpi	r24, 0x02	; 2
     afa:	e9 f0       	breq	.+58     	; 0xb36 <DIO_setpindir+0x4e>
     afc:	83 30       	cpi	r24, 0x03	; 3
     afe:	41 f1       	breq	.+80     	; 0xb50 <DIO_setpindir+0x68>
     b00:	6e c0       	rjmp	.+220    	; 0xbde <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     b02:	2a b3       	in	r18, 0x1a	; 26
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	02 c0       	rjmp	.+4      	; 0xb0e <DIO_setpindir+0x26>
     b0a:	88 0f       	add	r24, r24
     b0c:	99 1f       	adc	r25, r25
     b0e:	6a 95       	dec	r22
     b10:	e2 f7       	brpl	.-8      	; 0xb0a <DIO_setpindir+0x22>
     b12:	80 95       	com	r24
     b14:	82 23       	and	r24, r18
     b16:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     b18:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
     b1a:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     b1c:	27 b3       	in	r18, 0x17	; 23
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <DIO_setpindir+0x40>
     b24:	88 0f       	add	r24, r24
     b26:	99 1f       	adc	r25, r25
     b28:	6a 95       	dec	r22
     b2a:	e2 f7       	brpl	.-8      	; 0xb24 <DIO_setpindir+0x3c>
     b2c:	80 95       	com	r24
     b2e:	82 23       	and	r24, r18
     b30:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     b32:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
     b34:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     b36:	24 b3       	in	r18, 0x14	; 20
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <DIO_setpindir+0x5a>
     b3e:	88 0f       	add	r24, r24
     b40:	99 1f       	adc	r25, r25
     b42:	6a 95       	dec	r22
     b44:	e2 f7       	brpl	.-8      	; 0xb3e <DIO_setpindir+0x56>
     b46:	80 95       	com	r24
     b48:	82 23       	and	r24, r18
     b4a:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     b4c:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
     b4e:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     b50:	21 b3       	in	r18, 0x11	; 17
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_setpindir+0x74>
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	6a 95       	dec	r22
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <DIO_setpindir+0x70>
     b60:	80 95       	com	r24
     b62:	82 23       	and	r24, r18
     b64:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     b66:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
     b68:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     b6a:	81 30       	cpi	r24, 0x01	; 1
     b6c:	91 f0       	breq	.+36     	; 0xb92 <DIO_setpindir+0xaa>
     b6e:	28 f0       	brcs	.+10     	; 0xb7a <DIO_setpindir+0x92>
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	d9 f0       	breq	.+54     	; 0xbaa <DIO_setpindir+0xc2>
     b74:	83 30       	cpi	r24, 0x03	; 3
     b76:	29 f1       	breq	.+74     	; 0xbc2 <DIO_setpindir+0xda>
     b78:	34 c0       	rjmp	.+104    	; 0xbe2 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     b7a:	2a b3       	in	r18, 0x1a	; 26
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <DIO_setpindir+0x9e>
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	6a 95       	dec	r22
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <DIO_setpindir+0x9a>
     b8a:	82 2b       	or	r24, r18
     b8c:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     b8e:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     b90:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     b92:	27 b3       	in	r18, 0x17	; 23
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <DIO_setpindir+0xb6>
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	6a 95       	dec	r22
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <DIO_setpindir+0xb2>
     ba2:	82 2b       	or	r24, r18
     ba4:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     ba6:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     ba8:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     baa:	24 b3       	in	r18, 0x14	; 20
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_setpindir+0xce>
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	6a 95       	dec	r22
     bb8:	e2 f7       	brpl	.-8      	; 0xbb2 <DIO_setpindir+0xca>
     bba:	82 2b       	or	r24, r18
     bbc:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     bbe:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     bc0:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     bc2:	21 b3       	in	r18, 0x11	; 17
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <DIO_setpindir+0xe6>
     bca:	88 0f       	add	r24, r24
     bcc:	99 1f       	adc	r25, r25
     bce:	6a 95       	dec	r22
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <DIO_setpindir+0xe2>
     bd2:	82 2b       	or	r24, r18
     bd4:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     bd6:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     bd8:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     be2:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
     be4:	08 95       	ret

00000be6 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
     be6:	44 23       	and	r20, r20
     be8:	19 f0       	breq	.+6      	; 0xbf0 <DIO_setpinvalue+0xa>
     bea:	41 30       	cpi	r20, 0x01	; 1
     bec:	e9 f1       	breq	.+122    	; 0xc68 <DIO_setpinvalue+0x82>
     bee:	74 c0       	rjmp	.+232    	; 0xcd8 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	99 f0       	breq	.+38     	; 0xc1a <DIO_setpinvalue+0x34>
     bf4:	28 f0       	brcs	.+10     	; 0xc00 <DIO_setpinvalue+0x1a>
     bf6:	82 30       	cpi	r24, 0x02	; 2
     bf8:	e9 f0       	breq	.+58     	; 0xc34 <DIO_setpinvalue+0x4e>
     bfa:	83 30       	cpi	r24, 0x03	; 3
     bfc:	41 f1       	breq	.+80     	; 0xc4e <DIO_setpinvalue+0x68>
     bfe:	6e c0       	rjmp	.+220    	; 0xcdc <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     c00:	2b b3       	in	r18, 0x1b	; 27
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <DIO_setpinvalue+0x26>
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	6a 95       	dec	r22
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <DIO_setpinvalue+0x22>
     c10:	80 95       	com	r24
     c12:	82 23       	and	r24, r18
     c14:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     c16:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     c18:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     c1a:	28 b3       	in	r18, 0x18	; 24
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_setpinvalue+0x40>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	6a 95       	dec	r22
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <DIO_setpinvalue+0x3c>
     c2a:	80 95       	com	r24
     c2c:	82 23       	and	r24, r18
     c2e:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     c30:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     c32:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     c34:	25 b3       	in	r18, 0x15	; 21
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 c0       	rjmp	.+4      	; 0xc40 <DIO_setpinvalue+0x5a>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	6a 95       	dec	r22
     c42:	e2 f7       	brpl	.-8      	; 0xc3c <DIO_setpinvalue+0x56>
     c44:	80 95       	com	r24
     c46:	82 23       	and	r24, r18
     c48:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     c4a:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     c4c:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     c4e:	22 b3       	in	r18, 0x12	; 18
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <DIO_setpinvalue+0x74>
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	6a 95       	dec	r22
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <DIO_setpinvalue+0x70>
     c5e:	80 95       	com	r24
     c60:	82 23       	and	r24, r18
     c62:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     c64:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     c66:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
     c68:	81 30       	cpi	r24, 0x01	; 1
     c6a:	91 f0       	breq	.+36     	; 0xc90 <DIO_setpinvalue+0xaa>
     c6c:	28 f0       	brcs	.+10     	; 0xc78 <DIO_setpinvalue+0x92>
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	d9 f0       	breq	.+54     	; 0xca8 <DIO_setpinvalue+0xc2>
     c72:	83 30       	cpi	r24, 0x03	; 3
     c74:	29 f1       	breq	.+74     	; 0xcc0 <DIO_setpinvalue+0xda>
     c76:	34 c0       	rjmp	.+104    	; 0xce0 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     c78:	2b b3       	in	r18, 0x1b	; 27
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	02 c0       	rjmp	.+4      	; 0xc84 <DIO_setpinvalue+0x9e>
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	6a 95       	dec	r22
     c86:	e2 f7       	brpl	.-8      	; 0xc80 <DIO_setpinvalue+0x9a>
     c88:	82 2b       	or	r24, r18
     c8a:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     c8c:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     c8e:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     c90:	28 b3       	in	r18, 0x18	; 24
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <DIO_setpinvalue+0xb6>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	6a 95       	dec	r22
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <DIO_setpinvalue+0xb2>
     ca0:	82 2b       	or	r24, r18
     ca2:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     ca4:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     ca6:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     ca8:	25 b3       	in	r18, 0x15	; 21
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_setpinvalue+0xce>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	6a 95       	dec	r22
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_setpinvalue+0xca>
     cb8:	82 2b       	or	r24, r18
     cba:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     cbc:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     cbe:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     cc0:	22 b3       	in	r18, 0x12	; 18
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <DIO_setpinvalue+0xe6>
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	6a 95       	dec	r22
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <DIO_setpinvalue+0xe2>
     cd0:	82 2b       	or	r24, r18
     cd2:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     cd4:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     cd6:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     ce0:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
     ce2:	08 95       	ret

00000ce4 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	99 f0       	breq	.+38     	; 0xd0e <DIO_readpin+0x2a>
     ce8:	28 f0       	brcs	.+10     	; 0xcf4 <DIO_readpin+0x10>
     cea:	82 30       	cpi	r24, 0x02	; 2
     cec:	e9 f0       	breq	.+58     	; 0xd28 <DIO_readpin+0x44>
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	41 f1       	breq	.+80     	; 0xd42 <DIO_readpin+0x5e>
     cf2:	34 c0       	rjmp	.+104    	; 0xd5c <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     cf4:	89 b3       	in	r24, 0x19	; 25
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_readpin+0x1a>
     cfa:	95 95       	asr	r25
     cfc:	87 95       	ror	r24
     cfe:	6a 95       	dec	r22
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_readpin+0x16>
     d02:	81 70       	andi	r24, 0x01	; 1
     d04:	89 bb       	out	0x19, r24	; 25
     d06:	fa 01       	movw	r30, r20
     d08:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     d0a:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     d0c:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     d0e:	86 b3       	in	r24, 0x16	; 22
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <DIO_readpin+0x34>
     d14:	95 95       	asr	r25
     d16:	87 95       	ror	r24
     d18:	6a 95       	dec	r22
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <DIO_readpin+0x30>
     d1c:	81 70       	andi	r24, 0x01	; 1
     d1e:	86 bb       	out	0x16, r24	; 22
     d20:	fa 01       	movw	r30, r20
     d22:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     d24:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     d26:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     d28:	83 b3       	in	r24, 0x13	; 19
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <DIO_readpin+0x4e>
     d2e:	95 95       	asr	r25
     d30:	87 95       	ror	r24
     d32:	6a 95       	dec	r22
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <DIO_readpin+0x4a>
     d36:	81 70       	andi	r24, 0x01	; 1
     d38:	83 bb       	out	0x13, r24	; 19
     d3a:	fa 01       	movw	r30, r20
     d3c:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     d3e:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     d40:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     d42:	80 b3       	in	r24, 0x10	; 16
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_readpin+0x68>
     d48:	95 95       	asr	r25
     d4a:	87 95       	ror	r24
     d4c:	6a 95       	dec	r22
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_readpin+0x64>
     d50:	81 70       	andi	r24, 0x01	; 1
     d52:	80 bb       	out	0x10, r24	; 16
     d54:	fa 01       	movw	r30, r20
     d56:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     d58:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     d5a:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
     d5c:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
     d5e:	08 95       	ret

00000d60 <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	91 f0       	breq	.+36     	; 0xd88 <DIO_togglepin+0x28>
     d64:	28 f0       	brcs	.+10     	; 0xd70 <DIO_togglepin+0x10>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	d9 f0       	breq	.+54     	; 0xda0 <DIO_togglepin+0x40>
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	29 f1       	breq	.+74     	; 0xdb8 <DIO_togglepin+0x58>
     d6e:	30 c0       	rjmp	.+96     	; 0xdd0 <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
     d70:	2b b3       	in	r18, 0x1b	; 27
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_togglepin+0x1c>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	6a 95       	dec	r22
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_togglepin+0x18>
     d80:	82 27       	eor	r24, r18
     d82:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     d84:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
     d86:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
     d88:	28 b3       	in	r18, 0x18	; 24
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_togglepin+0x34>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	6a 95       	dec	r22
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_togglepin+0x30>
     d98:	82 27       	eor	r24, r18
     d9a:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     d9c:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
     d9e:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
     da0:	25 b3       	in	r18, 0x15	; 21
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_togglepin+0x4c>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	6a 95       	dec	r22
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_togglepin+0x48>
     db0:	82 27       	eor	r24, r18
     db2:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     db4:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
     db6:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
     db8:	22 b3       	in	r18, 0x12	; 18
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_togglepin+0x64>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	6a 95       	dec	r22
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_togglepin+0x60>
     dc8:	82 27       	eor	r24, r18
     dca:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     dcc:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
     dce:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
     dd0:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
     dd2:	08 95       	ret

00000dd4 <SET_GLOBALINTERRUPT>:
/** RETURNS    : VOID                                   */
/********************************************************/
void SET_GLOBALINTERRUPT(void)
{
	#if GLOBAL_INTERRUPT_STATE  ==  GLOBAL_INTERRUPT_STATE_ENABLE /** ENABLE GLOBAL INTERRUPTS **/
	  set_bit(SREG , 7);
     dd4:	8f b7       	in	r24, 0x3f	; 63
     dd6:	80 68       	ori	r24, 0x80	; 128
     dd8:	8f bf       	out	0x3f, r24	; 63
     dda:	08 95       	ret

00000ddc <INT0_init>:
/** ARGUMENTS  : VOID                                   */
/** RETURNS    : VOID                                   */
/********************************************************/
void INT0_init(void)
{
	SET_GLOBALINTERRUPT(); /** ENABLE GLOBAL INTERRUPTS */
     ddc:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <SET_GLOBALINTERRUPT>
	  clear_bit(MCUCR , 0);
	  clear_bit(MCUCR , 1);
	  
	#elif EXTERNAL_INT0_TRIGGER  == INT_TRIGGER_ANY_CHANGE
	
	  set_bit(MCUCR , 0);
     de0:	85 b7       	in	r24, 0x35	; 53
     de2:	81 60       	ori	r24, 0x01	; 1
     de4:	85 bf       	out	0x35, r24	; 53
	  clear_bit(MCUCR ,1);
     de6:	85 b7       	in	r24, 0x35	; 53
     de8:	8d 7f       	andi	r24, 0xFD	; 253
     dea:	85 bf       	out	0x35, r24	; 53
	  
	#endif
	
	/* Enable INT0 */
	set_bit(GICR , 6);	
     dec:	8b b7       	in	r24, 0x3b	; 59
     dee:	80 64       	ori	r24, 0x40	; 64
     df0:	8b bf       	out	0x3b, r24	; 59
     df2:	08 95       	ret

00000df4 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
     df4:	83 b7       	in	r24, 0x33	; 51
     df6:	8f 77       	andi	r24, 0x7F	; 127
     df8:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
     dfa:	83 b7       	in	r24, 0x33	; 51
     dfc:	8f 7b       	andi	r24, 0xBF	; 191
     dfe:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
     e00:	83 b7       	in	r24, 0x33	; 51
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
     e06:	83 b7       	in	r24, 0x33	; 51
     e08:	8f 7e       	andi	r24, 0xEF	; 239
     e0a:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
     e0c:	83 b7       	in	r24, 0x33	; 51
     e0e:	8f 7d       	andi	r24, 0xDF	; 223
     e10:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	08 95       	ret

00000e16 <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
     e16:	83 b7       	in	r24, 0x33	; 51
     e18:	81 60       	ori	r24, 0x01	; 1
     e1a:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
     e1c:	83 b7       	in	r24, 0x33	; 51
     e1e:	8d 7f       	andi	r24, 0xFD	; 253
     e20:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
     e22:	83 b7       	in	r24, 0x33	; 51
     e24:	8b 7f       	andi	r24, 0xFB	; 251
     e26:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	08 95       	ret

00000e2c <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
     e2c:	83 b7       	in	r24, 0x33	; 51
     e2e:	8e 7f       	andi	r24, 0xFE	; 254
     e30:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
     e32:	83 b7       	in	r24, 0x33	; 51
     e34:	8d 7f       	andi	r24, 0xFD	; 253
     e36:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
     e38:	83 b7       	in	r24, 0x33	; 51
     e3a:	8b 7f       	andi	r24, 0xFB	; 251
     e3c:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	08 95       	ret

00000e42 <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
     e42:	0e 94 a9 08 	call	0x1152	; 0x1152 <__floatunsisf>
     e46:	2f e6       	ldi	r18, 0x6F	; 111
     e48:	32 e1       	ldi	r19, 0x12	; 18
     e4a:	43 e0       	ldi	r20, 0x03	; 3
     e4c:	5d e3       	ldi	r21, 0x3D	; 61
     e4e:	0e 94 08 08 	call	0x1010	; 0x1010 <__divsf3>
     e52:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fixunssfsi>
     e56:	60 93 ab 00 	sts	0x00AB, r22	; 0x8000ab <u32_gs_tmr0nuofovs>
     e5a:	70 93 ac 00 	sts	0x00AC, r23	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
     e5e:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
     e62:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
     e66:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
     e68:	0e 94 0b 07 	call	0xe16	; 0xe16 <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     e72:	0a c0       	rjmp	.+20     	; 0xe88 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
     e74:	08 b6       	in	r0, 0x38	; 56
     e76:	00 fe       	sbrs	r0, 0
     e78:	fd cf       	rjmp	.-6      	; 0xe74 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
     e7a:	88 b7       	in	r24, 0x38	; 56
     e7c:	81 60       	ori	r24, 0x01	; 1
     e7e:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
     e80:	4f 5f       	subi	r20, 0xFF	; 255
     e82:	5f 4f       	sbci	r21, 0xFF	; 255
     e84:	6f 4f       	sbci	r22, 0xFF	; 255
     e86:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     e88:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <u32_gs_tmr0nuofovs>
     e8c:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
     e90:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
     e94:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
     e98:	48 17       	cp	r20, r24
     e9a:	59 07       	cpc	r21, r25
     e9c:	6a 07       	cpc	r22, r26
     e9e:	7b 07       	cpc	r23, r27
     ea0:	48 f3       	brcs	.-46     	; 0xe74 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
     ea2:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <u32_gs_tmr0nuofovs>
     ea6:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
     eaa:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
     eae:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
     eb2:	0e 94 16 07 	call	0xe2c	; 0xe2c <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	08 95       	ret

00000eba <TMR0_delaymicros>:
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	u32_gs_tmr0nuofovs = (u32_a_delaymicros / 32);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
     eba:	dc 01       	movw	r26, r24
     ebc:	cb 01       	movw	r24, r22
     ebe:	68 94       	set
     ec0:	14 f8       	bld	r1, 4
     ec2:	b6 95       	lsr	r27
     ec4:	a7 95       	ror	r26
     ec6:	97 95       	ror	r25
     ec8:	87 95       	ror	r24
     eca:	16 94       	lsr	r1
     ecc:	d1 f7       	brne	.-12     	; 0xec2 <TMR0_delaymicros+0x8>
     ece:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <u32_gs_tmr0nuofovs>
     ed2:	90 93 ac 00 	sts	0x00AC, r25	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
     ed6:	a0 93 ad 00 	sts	0x00AD, r26	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
     eda:	b0 93 ae 00 	sts	0x00AE, r27	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
	
	TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
     ede:	12 be       	out	0x32, r1	; 50
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
     ee0:	0e 94 0b 07 	call	0xe16	; 0xe16 <TMR0_start>
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delaymicros(uint32_t u32_a_delaymicros)
{
	uint32_t u32_a_overflowcounter = 0 ;
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	50 e0       	ldi	r21, 0x00	; 0
     ee8:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     eea:	0a c0       	rjmp	.+20     	; 0xf00 <TMR0_delaymicros+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
     eec:	08 b6       	in	r0, 0x38	; 56
     eee:	00 fe       	sbrs	r0, 0
     ef0:	fd cf       	rjmp	.-6      	; 0xeec <TMR0_delaymicros+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
     ef2:	88 b7       	in	r24, 0x38	; 56
     ef4:	81 60       	ori	r24, 0x01	; 1
     ef6:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
     ef8:	4f 5f       	subi	r20, 0xFF	; 255
     efa:	5f 4f       	sbci	r21, 0xFF	; 255
     efc:	6f 4f       	sbci	r22, 0xFF	; 255
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     f00:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <u32_gs_tmr0nuofovs>
     f04:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <u32_gs_tmr0nuofovs+0x1>
     f08:	a0 91 ad 00 	lds	r26, 0x00AD	; 0x8000ad <u32_gs_tmr0nuofovs+0x2>
     f0c:	b0 91 ae 00 	lds	r27, 0x00AE	; 0x8000ae <u32_gs_tmr0nuofovs+0x3>
     f10:	48 17       	cp	r20, r24
     f12:	59 07       	cpc	r21, r25
     f14:	6a 07       	cpc	r22, r26
     f16:	7b 07       	cpc	r23, r27
     f18:	48 f3       	brcs	.-46     	; 0xeec <TMR0_delaymicros+0x32>
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_a_overflowcounter = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop(); /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
     f1a:	0e 94 16 07 	call	0xe2c	; 0xe2c <TMR0_stop>
	
	return en_a_delaystatus ; 
}
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	08 95       	ret

00000f22 <TMR1_init>:
	 
	#elif TMR1_CLK_SOURCE == TMR1_INTERNAL_CLK_SOURCE
	
	 #if TMR1_MODE == NORMAL_MODE
	  
	  clear_bit(TCCR1A , 0);
     f22:	8f b5       	in	r24, 0x2f	; 47
     f24:	8e 7f       	andi	r24, 0xFE	; 254
     f26:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1A , 1);
     f28:	8f b5       	in	r24, 0x2f	; 47
     f2a:	8d 7f       	andi	r24, 0xFD	; 253
     f2c:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1B , 3);
     f2e:	8e b5       	in	r24, 0x2e	; 46
     f30:	87 7f       	andi	r24, 0xF7	; 247
     f32:	8e bd       	out	0x2e, r24	; 46
	  clear_bit(TCCR1B , 4);
     f34:	8e b5       	in	r24, 0x2e	; 46
     f36:	8f 7e       	andi	r24, 0xEF	; 239
     f38:	8e bd       	out	0x2e, r24	; 46
	  
	  /* NON PWM MODE */
	  set_bit(TCCR1A , 2);
     f3a:	8f b5       	in	r24, 0x2f	; 47
     f3c:	84 60       	ori	r24, 0x04	; 4
     f3e:	8f bd       	out	0x2f, r24	; 47
	  set_bit(TCCR1A , 3);
     f40:	8f b5       	in	r24, 0x2f	; 47
     f42:	88 60       	ori	r24, 0x08	; 8
     f44:	8f bd       	out	0x2f, r24	; 47
	  
	  /* ENABLE INTERRUPT */
	  set_bit(SREG , 7);   /** ENABLE GLOBAL INTTERUPTS **/
     f46:	8f b7       	in	r24, 0x3f	; 63
     f48:	80 68       	ori	r24, 0x80	; 128
     f4a:	8f bf       	out	0x3f, r24	; 63
	  set_bit(TIMSK , 2);  /** NABLE TMR1 INTERRUPT **/
     f4c:	89 b7       	in	r24, 0x39	; 57
     f4e:	9a b7       	in	r25, 0x3a	; 58
     f50:	84 60       	ori	r24, 0x04	; 4
     f52:	9a bf       	out	0x3a, r25	; 58
     f54:	89 bf       	out	0x39, r24	; 57
	 /* SET THE OC1B BIT AS OUTPUT */
	 DIO_setpindir(DIO_PORTD , DIO_PIN4 , DIO_PIN_OUTPUT);
	#endif
	#endif
#endif
}
     f56:	08 95       	ret

00000f58 <TMR1_start>:
/******************************************************************************/
TMR1_start_status TMR1_start(void)
{
  TMR1_start_status en_a_startstatus = TMR1_NOT_VALID_START ; /** VARIABLE TO HOLD THE RETURN STATUS **/
  
  TCNT1 = 0 ;   /** SET THE INITIAL VALUE IN TCNT1 REGISTER **/
     f58:	1d bc       	out	0x2d, r1	; 45
     f5a:	1c bc       	out	0x2c, r1	; 44

         en_a_startstatus = TMR1_VALID_START ; /** STATUS IS VALID **/
	 
	 #elif TMR1_PRESCALLER_VALUE == NO_PRESCALER
	 
	 set_bit(TCCR1B , 0);
     f5c:	8e b5       	in	r24, 0x2e	; 46
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 1);
     f62:	8e b5       	in	r24, 0x2e	; 46
     f64:	8d 7f       	andi	r24, 0xFD	; 253
     f66:	8e bd       	out	0x2e, r24	; 46
	 clear_bit(TCCR1B , 2);
     f68:	8e b5       	in	r24, 0x2e	; 46
     f6a:	8b 7f       	andi	r24, 0xFB	; 251
     f6c:	8e bd       	out	0x2e, r24	; 46

	 #endif
	#endif

  return en_a_startstatus ; /** RETURN THE FINAL STATUS **/
}
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	08 95       	ret

00000f72 <TMR1_stop>:
TMR1_stop_status TMR1_stop(void)
{
     TMR1_stop_status en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** VARIABLE TO HOLD THE RETURN STATUS  **/
	
     /* TURN THE CLOCK OFF */
     clear_bit(TCCR1B , 0);
     f72:	8e b5       	in	r24, 0x2e	; 46
     f74:	8e 7f       	andi	r24, 0xFE	; 254
     f76:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 1);
     f78:	8e b5       	in	r24, 0x2e	; 46
     f7a:	8d 7f       	andi	r24, 0xFD	; 253
     f7c:	8e bd       	out	0x2e, r24	; 46
     clear_bit(TCCR1B , 2);
     f7e:	8e b5       	in	r24, 0x2e	; 46
     f80:	8b 7f       	andi	r24, 0xFB	; 251
     f82:	8e bd       	out	0x2e, r24	; 46

     en_a_stopstatus = TMR1_NOT_VALID_STOP ; /** UPDATE THE STOP STATUS **/

     return en_a_stopstatus ; /** RETURN THE FINAL STATUS **/

}
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	08 95       	ret

00000f88 <TMR1_getvalue>:
/** ARGUMENTS  : u16_a_value                                                 **/
/** RETURN     : VOID                                                        **/
/******************************************************************************/
void TMR1_getvalue(uint16t * u16_a_value)
{
	*u16_a_value = TCNT1 ; /** GET THE VALUE FROM TIMER1 COUNTING REGISTER **/
     f88:	2c b5       	in	r18, 0x2c	; 44
     f8a:	3d b5       	in	r19, 0x2d	; 45
     f8c:	fc 01       	movw	r30, r24
     f8e:	31 83       	std	Z+1, r19	; 0x01
     f90:	20 83       	st	Z, r18
     f92:	08 95       	ret

00000f94 <TMR1_setcounterval>:
/** ARGUMENTS  : TAKES DELAY IN ms                                             */
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
void TMR1_setcounterval(uint16t u16_a_tmrval)
{
	TCNT1 = u16_a_tmrval ; /** SET THE PASSED VALUE IN TIMER COUNTING REGISTER **/
     f94:	9d bd       	out	0x2d, r25	; 45
     f96:	8c bd       	out	0x2c, r24	; 44
     f98:	08 95       	ret

00000f9a <TMR2_init>:
	/* TIMER MODE OF TMR0 */
	#elif TIMER2_CLK_SRC == INTERNAL_CLK_SRC
	
	#if TIMER2_MODE == TMR2_NORMAL_MODE
	
	clear_bit(TCCR2 , 7);
     f9a:	85 b5       	in	r24, 0x25	; 37
     f9c:	8f 77       	andi	r24, 0x7F	; 127
     f9e:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 6);
     fa0:	85 b5       	in	r24, 0x25	; 37
     fa2:	8f 7b       	andi	r24, 0xBF	; 191
     fa4:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 3);
     fa6:	85 b5       	in	r24, 0x25	; 37
     fa8:	87 7f       	andi	r24, 0xF7	; 247
     faa:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 4);
     fac:	85 b5       	in	r24, 0x25	; 37
     fae:	8f 7e       	andi	r24, 0xEF	; 239
     fb0:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 5);
     fb2:	85 b5       	in	r24, 0x25	; 37
     fb4:	8f 7d       	andi	r24, 0xDF	; 223
     fb6:	85 bd       	out	0x25, r24	; 37
	
	/* ENABLE INTERRUPT */
	set_bit(SREG , 7);
     fb8:	8f b7       	in	r24, 0x3f	; 63
     fba:	80 68       	ori	r24, 0x80	; 128
     fbc:	8f bf       	out	0x3f, r24	; 63
	set_bit(TIMSK , 6);
     fbe:	89 b7       	in	r24, 0x39	; 57
     fc0:	80 64       	ori	r24, 0x40	; 64
     fc2:	89 bf       	out	0x39, r24	; 57
	#endif
	#endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	08 95       	ret

00000fc8 <TMR2_start>:
	
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR2 , 0);
     fc8:	85 b5       	in	r24, 0x25	; 37
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
     fce:	85 b5       	in	r24, 0x25	; 37
     fd0:	8d 7f       	andi	r24, 0xFD	; 253
     fd2:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
     fd4:	85 b5       	in	r24, 0x25	; 37
     fd6:	8b 7f       	andi	r24, 0xFB	; 251
     fd8:	85 bd       	out	0x25, r24	; 37
	en_a_startstatus = TMR2_VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	08 95       	ret

00000fde <TMR2_stop>:
TMR2_stop_error TMR2_stop(void)
{
	TMR2_stop_error en_a_stopStatus = TMR2_VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR2 , 0);
     fde:	85 b5       	in	r24, 0x25	; 37
     fe0:	8e 7f       	andi	r24, 0xFE	; 254
     fe2:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 1);
     fe4:	85 b5       	in	r24, 0x25	; 37
     fe6:	8d 7f       	andi	r24, 0xFD	; 253
     fe8:	85 bd       	out	0x25, r24	; 37
	clear_bit(TCCR2 , 2);
     fea:	85 b5       	in	r24, 0x25	; 37
     fec:	8b 7f       	andi	r24, 0xFB	; 251
     fee:	85 bd       	out	0x25, r24	; 37
	
	en_a_stopStatus = TMR2_VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	08 95       	ret

00000ff4 <TMR2_getovs>:
	u32_a_ovs = (u16_a_delay / 0.256);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
	

	#elif TIMER2_PRESCALER_VAL == NO_PRESCALER
	
	u32_a_ovs = (u16_a_delay / 0.032);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
     ff4:	bc 01       	movw	r22, r24
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 a9 08 	call	0x1152	; 0x1152 <__floatunsisf>
     ffe:	2f e6       	ldi	r18, 0x6F	; 111
    1000:	32 e1       	ldi	r19, 0x12	; 18
    1002:	43 e0       	ldi	r20, 0x03	; 3
    1004:	5d e3       	ldi	r21, 0x3D	; 61
    1006:	0e 94 08 08 	call	0x1010	; 0x1010 <__divsf3>
    100a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fixunssfsi>
	
	#endif
	
	return u32_a_ovs ;  /** RETURN THE CALCULATED NUMBER OF OVERFLOWS **/
}
    100e:	08 95       	ret

00001010 <__divsf3>:
    1010:	0e 94 1c 08 	call	0x1038	; 0x1038 <__divsf3x>
    1014:	0c 94 fd 08 	jmp	0x11fa	; 0x11fa <__fp_round>
    1018:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__fp_pscB>
    101c:	58 f0       	brcs	.+22     	; 0x1034 <__divsf3+0x24>
    101e:	0e 94 ef 08 	call	0x11de	; 0x11de <__fp_pscA>
    1022:	40 f0       	brcs	.+16     	; 0x1034 <__divsf3+0x24>
    1024:	29 f4       	brne	.+10     	; 0x1030 <__divsf3+0x20>
    1026:	5f 3f       	cpi	r21, 0xFF	; 255
    1028:	29 f0       	breq	.+10     	; 0x1034 <__divsf3+0x24>
    102a:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_inf>
    102e:	51 11       	cpse	r21, r1
    1030:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__fp_szero>
    1034:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__fp_nan>

00001038 <__divsf3x>:
    1038:	0e 94 0e 09 	call	0x121c	; 0x121c <__fp_split3>
    103c:	68 f3       	brcs	.-38     	; 0x1018 <__divsf3+0x8>

0000103e <__divsf3_pse>:
    103e:	99 23       	and	r25, r25
    1040:	b1 f3       	breq	.-20     	; 0x102e <__divsf3+0x1e>
    1042:	55 23       	and	r21, r21
    1044:	91 f3       	breq	.-28     	; 0x102a <__divsf3+0x1a>
    1046:	95 1b       	sub	r25, r21
    1048:	55 0b       	sbc	r21, r21
    104a:	bb 27       	eor	r27, r27
    104c:	aa 27       	eor	r26, r26
    104e:	62 17       	cp	r22, r18
    1050:	73 07       	cpc	r23, r19
    1052:	84 07       	cpc	r24, r20
    1054:	38 f0       	brcs	.+14     	; 0x1064 <__divsf3_pse+0x26>
    1056:	9f 5f       	subi	r25, 0xFF	; 255
    1058:	5f 4f       	sbci	r21, 0xFF	; 255
    105a:	22 0f       	add	r18, r18
    105c:	33 1f       	adc	r19, r19
    105e:	44 1f       	adc	r20, r20
    1060:	aa 1f       	adc	r26, r26
    1062:	a9 f3       	breq	.-22     	; 0x104e <__divsf3_pse+0x10>
    1064:	35 d0       	rcall	.+106    	; 0x10d0 <__divsf3_pse+0x92>
    1066:	0e 2e       	mov	r0, r30
    1068:	3a f0       	brmi	.+14     	; 0x1078 <__divsf3_pse+0x3a>
    106a:	e0 e8       	ldi	r30, 0x80	; 128
    106c:	32 d0       	rcall	.+100    	; 0x10d2 <__divsf3_pse+0x94>
    106e:	91 50       	subi	r25, 0x01	; 1
    1070:	50 40       	sbci	r21, 0x00	; 0
    1072:	e6 95       	lsr	r30
    1074:	00 1c       	adc	r0, r0
    1076:	ca f7       	brpl	.-14     	; 0x106a <__divsf3_pse+0x2c>
    1078:	2b d0       	rcall	.+86     	; 0x10d0 <__divsf3_pse+0x92>
    107a:	fe 2f       	mov	r31, r30
    107c:	29 d0       	rcall	.+82     	; 0x10d0 <__divsf3_pse+0x92>
    107e:	66 0f       	add	r22, r22
    1080:	77 1f       	adc	r23, r23
    1082:	88 1f       	adc	r24, r24
    1084:	bb 1f       	adc	r27, r27
    1086:	26 17       	cp	r18, r22
    1088:	37 07       	cpc	r19, r23
    108a:	48 07       	cpc	r20, r24
    108c:	ab 07       	cpc	r26, r27
    108e:	b0 e8       	ldi	r27, 0x80	; 128
    1090:	09 f0       	breq	.+2      	; 0x1094 <__divsf3_pse+0x56>
    1092:	bb 0b       	sbc	r27, r27
    1094:	80 2d       	mov	r24, r0
    1096:	bf 01       	movw	r22, r30
    1098:	ff 27       	eor	r31, r31
    109a:	93 58       	subi	r25, 0x83	; 131
    109c:	5f 4f       	sbci	r21, 0xFF	; 255
    109e:	3a f0       	brmi	.+14     	; 0x10ae <__divsf3_pse+0x70>
    10a0:	9e 3f       	cpi	r25, 0xFE	; 254
    10a2:	51 05       	cpc	r21, r1
    10a4:	78 f0       	brcs	.+30     	; 0x10c4 <__divsf3_pse+0x86>
    10a6:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_inf>
    10aa:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__fp_szero>
    10ae:	5f 3f       	cpi	r21, 0xFF	; 255
    10b0:	e4 f3       	brlt	.-8      	; 0x10aa <__divsf3_pse+0x6c>
    10b2:	98 3e       	cpi	r25, 0xE8	; 232
    10b4:	d4 f3       	brlt	.-12     	; 0x10aa <__divsf3_pse+0x6c>
    10b6:	86 95       	lsr	r24
    10b8:	77 95       	ror	r23
    10ba:	67 95       	ror	r22
    10bc:	b7 95       	ror	r27
    10be:	f7 95       	ror	r31
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	c9 f7       	brne	.-14     	; 0x10b6 <__divsf3_pse+0x78>
    10c4:	88 0f       	add	r24, r24
    10c6:	91 1d       	adc	r25, r1
    10c8:	96 95       	lsr	r25
    10ca:	87 95       	ror	r24
    10cc:	97 f9       	bld	r25, 7
    10ce:	08 95       	ret
    10d0:	e1 e0       	ldi	r30, 0x01	; 1
    10d2:	66 0f       	add	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	bb 1f       	adc	r27, r27
    10da:	62 17       	cp	r22, r18
    10dc:	73 07       	cpc	r23, r19
    10de:	84 07       	cpc	r24, r20
    10e0:	ba 07       	cpc	r27, r26
    10e2:	20 f0       	brcs	.+8      	; 0x10ec <__divsf3_pse+0xae>
    10e4:	62 1b       	sub	r22, r18
    10e6:	73 0b       	sbc	r23, r19
    10e8:	84 0b       	sbc	r24, r20
    10ea:	ba 0b       	sbc	r27, r26
    10ec:	ee 1f       	adc	r30, r30
    10ee:	88 f7       	brcc	.-30     	; 0x10d2 <__divsf3_pse+0x94>
    10f0:	e0 95       	com	r30
    10f2:	08 95       	ret

000010f4 <__fixunssfsi>:
    10f4:	0e 94 16 09 	call	0x122c	; 0x122c <__fp_splitA>
    10f8:	88 f0       	brcs	.+34     	; 0x111c <__fixunssfsi+0x28>
    10fa:	9f 57       	subi	r25, 0x7F	; 127
    10fc:	98 f0       	brcs	.+38     	; 0x1124 <__fixunssfsi+0x30>
    10fe:	b9 2f       	mov	r27, r25
    1100:	99 27       	eor	r25, r25
    1102:	b7 51       	subi	r27, 0x17	; 23
    1104:	b0 f0       	brcs	.+44     	; 0x1132 <__fixunssfsi+0x3e>
    1106:	e1 f0       	breq	.+56     	; 0x1140 <__fixunssfsi+0x4c>
    1108:	66 0f       	add	r22, r22
    110a:	77 1f       	adc	r23, r23
    110c:	88 1f       	adc	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	1a f0       	brmi	.+6      	; 0x1118 <__fixunssfsi+0x24>
    1112:	ba 95       	dec	r27
    1114:	c9 f7       	brne	.-14     	; 0x1108 <__fixunssfsi+0x14>
    1116:	14 c0       	rjmp	.+40     	; 0x1140 <__fixunssfsi+0x4c>
    1118:	b1 30       	cpi	r27, 0x01	; 1
    111a:	91 f0       	breq	.+36     	; 0x1140 <__fixunssfsi+0x4c>
    111c:	0e 94 30 09 	call	0x1260	; 0x1260 <__fp_zero>
    1120:	b1 e0       	ldi	r27, 0x01	; 1
    1122:	08 95       	ret
    1124:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__fp_zero>
    1128:	67 2f       	mov	r22, r23
    112a:	78 2f       	mov	r23, r24
    112c:	88 27       	eor	r24, r24
    112e:	b8 5f       	subi	r27, 0xF8	; 248
    1130:	39 f0       	breq	.+14     	; 0x1140 <__fixunssfsi+0x4c>
    1132:	b9 3f       	cpi	r27, 0xF9	; 249
    1134:	cc f3       	brlt	.-14     	; 0x1128 <__fixunssfsi+0x34>
    1136:	86 95       	lsr	r24
    1138:	77 95       	ror	r23
    113a:	67 95       	ror	r22
    113c:	b3 95       	inc	r27
    113e:	d9 f7       	brne	.-10     	; 0x1136 <__fixunssfsi+0x42>
    1140:	3e f4       	brtc	.+14     	; 0x1150 <__fixunssfsi+0x5c>
    1142:	90 95       	com	r25
    1144:	80 95       	com	r24
    1146:	70 95       	com	r23
    1148:	61 95       	neg	r22
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	8f 4f       	sbci	r24, 0xFF	; 255
    114e:	9f 4f       	sbci	r25, 0xFF	; 255
    1150:	08 95       	ret

00001152 <__floatunsisf>:
    1152:	e8 94       	clt
    1154:	09 c0       	rjmp	.+18     	; 0x1168 <__floatsisf+0x12>

00001156 <__floatsisf>:
    1156:	97 fb       	bst	r25, 7
    1158:	3e f4       	brtc	.+14     	; 0x1168 <__floatsisf+0x12>
    115a:	90 95       	com	r25
    115c:	80 95       	com	r24
    115e:	70 95       	com	r23
    1160:	61 95       	neg	r22
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8f 4f       	sbci	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	99 23       	and	r25, r25
    116a:	a9 f0       	breq	.+42     	; 0x1196 <__floatsisf+0x40>
    116c:	f9 2f       	mov	r31, r25
    116e:	96 e9       	ldi	r25, 0x96	; 150
    1170:	bb 27       	eor	r27, r27
    1172:	93 95       	inc	r25
    1174:	f6 95       	lsr	r31
    1176:	87 95       	ror	r24
    1178:	77 95       	ror	r23
    117a:	67 95       	ror	r22
    117c:	b7 95       	ror	r27
    117e:	f1 11       	cpse	r31, r1
    1180:	f8 cf       	rjmp	.-16     	; 0x1172 <__floatsisf+0x1c>
    1182:	fa f4       	brpl	.+62     	; 0x11c2 <__floatsisf+0x6c>
    1184:	bb 0f       	add	r27, r27
    1186:	11 f4       	brne	.+4      	; 0x118c <__floatsisf+0x36>
    1188:	60 ff       	sbrs	r22, 0
    118a:	1b c0       	rjmp	.+54     	; 0x11c2 <__floatsisf+0x6c>
    118c:	6f 5f       	subi	r22, 0xFF	; 255
    118e:	7f 4f       	sbci	r23, 0xFF	; 255
    1190:	8f 4f       	sbci	r24, 0xFF	; 255
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	16 c0       	rjmp	.+44     	; 0x11c2 <__floatsisf+0x6c>
    1196:	88 23       	and	r24, r24
    1198:	11 f0       	breq	.+4      	; 0x119e <__floatsisf+0x48>
    119a:	96 e9       	ldi	r25, 0x96	; 150
    119c:	11 c0       	rjmp	.+34     	; 0x11c0 <__floatsisf+0x6a>
    119e:	77 23       	and	r23, r23
    11a0:	21 f0       	breq	.+8      	; 0x11aa <__floatsisf+0x54>
    11a2:	9e e8       	ldi	r25, 0x8E	; 142
    11a4:	87 2f       	mov	r24, r23
    11a6:	76 2f       	mov	r23, r22
    11a8:	05 c0       	rjmp	.+10     	; 0x11b4 <__floatsisf+0x5e>
    11aa:	66 23       	and	r22, r22
    11ac:	71 f0       	breq	.+28     	; 0x11ca <__floatsisf+0x74>
    11ae:	96 e8       	ldi	r25, 0x86	; 134
    11b0:	86 2f       	mov	r24, r22
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	2a f0       	brmi	.+10     	; 0x11c2 <__floatsisf+0x6c>
    11b8:	9a 95       	dec	r25
    11ba:	66 0f       	add	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	da f7       	brpl	.-10     	; 0x11b8 <__floatsisf+0x62>
    11c2:	88 0f       	add	r24, r24
    11c4:	96 95       	lsr	r25
    11c6:	87 95       	ror	r24
    11c8:	97 f9       	bld	r25, 7
    11ca:	08 95       	ret

000011cc <__fp_inf>:
    11cc:	97 f9       	bld	r25, 7
    11ce:	9f 67       	ori	r25, 0x7F	; 127
    11d0:	80 e8       	ldi	r24, 0x80	; 128
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	08 95       	ret

000011d8 <__fp_nan>:
    11d8:	9f ef       	ldi	r25, 0xFF	; 255
    11da:	80 ec       	ldi	r24, 0xC0	; 192
    11dc:	08 95       	ret

000011de <__fp_pscA>:
    11de:	00 24       	eor	r0, r0
    11e0:	0a 94       	dec	r0
    11e2:	16 16       	cp	r1, r22
    11e4:	17 06       	cpc	r1, r23
    11e6:	18 06       	cpc	r1, r24
    11e8:	09 06       	cpc	r0, r25
    11ea:	08 95       	ret

000011ec <__fp_pscB>:
    11ec:	00 24       	eor	r0, r0
    11ee:	0a 94       	dec	r0
    11f0:	12 16       	cp	r1, r18
    11f2:	13 06       	cpc	r1, r19
    11f4:	14 06       	cpc	r1, r20
    11f6:	05 06       	cpc	r0, r21
    11f8:	08 95       	ret

000011fa <__fp_round>:
    11fa:	09 2e       	mov	r0, r25
    11fc:	03 94       	inc	r0
    11fe:	00 0c       	add	r0, r0
    1200:	11 f4       	brne	.+4      	; 0x1206 <__fp_round+0xc>
    1202:	88 23       	and	r24, r24
    1204:	52 f0       	brmi	.+20     	; 0x121a <__fp_round+0x20>
    1206:	bb 0f       	add	r27, r27
    1208:	40 f4       	brcc	.+16     	; 0x121a <__fp_round+0x20>
    120a:	bf 2b       	or	r27, r31
    120c:	11 f4       	brne	.+4      	; 0x1212 <__fp_round+0x18>
    120e:	60 ff       	sbrs	r22, 0
    1210:	04 c0       	rjmp	.+8      	; 0x121a <__fp_round+0x20>
    1212:	6f 5f       	subi	r22, 0xFF	; 255
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	8f 4f       	sbci	r24, 0xFF	; 255
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	08 95       	ret

0000121c <__fp_split3>:
    121c:	57 fd       	sbrc	r21, 7
    121e:	90 58       	subi	r25, 0x80	; 128
    1220:	44 0f       	add	r20, r20
    1222:	55 1f       	adc	r21, r21
    1224:	59 f0       	breq	.+22     	; 0x123c <__fp_splitA+0x10>
    1226:	5f 3f       	cpi	r21, 0xFF	; 255
    1228:	71 f0       	breq	.+28     	; 0x1246 <__fp_splitA+0x1a>
    122a:	47 95       	ror	r20

0000122c <__fp_splitA>:
    122c:	88 0f       	add	r24, r24
    122e:	97 fb       	bst	r25, 7
    1230:	99 1f       	adc	r25, r25
    1232:	61 f0       	breq	.+24     	; 0x124c <__fp_splitA+0x20>
    1234:	9f 3f       	cpi	r25, 0xFF	; 255
    1236:	79 f0       	breq	.+30     	; 0x1256 <__fp_splitA+0x2a>
    1238:	87 95       	ror	r24
    123a:	08 95       	ret
    123c:	12 16       	cp	r1, r18
    123e:	13 06       	cpc	r1, r19
    1240:	14 06       	cpc	r1, r20
    1242:	55 1f       	adc	r21, r21
    1244:	f2 cf       	rjmp	.-28     	; 0x122a <__fp_split3+0xe>
    1246:	46 95       	lsr	r20
    1248:	f1 df       	rcall	.-30     	; 0x122c <__fp_splitA>
    124a:	08 c0       	rjmp	.+16     	; 0x125c <__fp_splitA+0x30>
    124c:	16 16       	cp	r1, r22
    124e:	17 06       	cpc	r1, r23
    1250:	18 06       	cpc	r1, r24
    1252:	99 1f       	adc	r25, r25
    1254:	f1 cf       	rjmp	.-30     	; 0x1238 <__fp_splitA+0xc>
    1256:	86 95       	lsr	r24
    1258:	71 05       	cpc	r23, r1
    125a:	61 05       	cpc	r22, r1
    125c:	08 94       	sec
    125e:	08 95       	ret

00001260 <__fp_zero>:
    1260:	e8 94       	clt

00001262 <__fp_szero>:
    1262:	bb 27       	eor	r27, r27
    1264:	66 27       	eor	r22, r22
    1266:	77 27       	eor	r23, r23
    1268:	cb 01       	movw	r24, r22
    126a:	97 f9       	bld	r25, 7
    126c:	08 95       	ret

0000126e <__divmodsi4>:
    126e:	05 2e       	mov	r0, r21
    1270:	97 fb       	bst	r25, 7
    1272:	1e f4       	brtc	.+6      	; 0x127a <__divmodsi4+0xc>
    1274:	00 94       	com	r0
    1276:	0e 94 4e 09 	call	0x129c	; 0x129c <__negsi2>
    127a:	57 fd       	sbrc	r21, 7
    127c:	07 d0       	rcall	.+14     	; 0x128c <__divmodsi4_neg2>
    127e:	0e 94 65 09 	call	0x12ca	; 0x12ca <__udivmodsi4>
    1282:	07 fc       	sbrc	r0, 7
    1284:	03 d0       	rcall	.+6      	; 0x128c <__divmodsi4_neg2>
    1286:	4e f4       	brtc	.+18     	; 0x129a <__divmodsi4_exit>
    1288:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__negsi2>

0000128c <__divmodsi4_neg2>:
    128c:	50 95       	com	r21
    128e:	40 95       	com	r20
    1290:	30 95       	com	r19
    1292:	21 95       	neg	r18
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	4f 4f       	sbci	r20, 0xFF	; 255
    1298:	5f 4f       	sbci	r21, 0xFF	; 255

0000129a <__divmodsi4_exit>:
    129a:	08 95       	ret

0000129c <__negsi2>:
    129c:	90 95       	com	r25
    129e:	80 95       	com	r24
    12a0:	70 95       	com	r23
    12a2:	61 95       	neg	r22
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	8f 4f       	sbci	r24, 0xFF	; 255
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	08 95       	ret

000012ac <__umulhisi3>:
    12ac:	a2 9f       	mul	r26, r18
    12ae:	b0 01       	movw	r22, r0
    12b0:	b3 9f       	mul	r27, r19
    12b2:	c0 01       	movw	r24, r0
    12b4:	a3 9f       	mul	r26, r19
    12b6:	70 0d       	add	r23, r0
    12b8:	81 1d       	adc	r24, r1
    12ba:	11 24       	eor	r1, r1
    12bc:	91 1d       	adc	r25, r1
    12be:	b2 9f       	mul	r27, r18
    12c0:	70 0d       	add	r23, r0
    12c2:	81 1d       	adc	r24, r1
    12c4:	11 24       	eor	r1, r1
    12c6:	91 1d       	adc	r25, r1
    12c8:	08 95       	ret

000012ca <__udivmodsi4>:
    12ca:	a1 e2       	ldi	r26, 0x21	; 33
    12cc:	1a 2e       	mov	r1, r26
    12ce:	aa 1b       	sub	r26, r26
    12d0:	bb 1b       	sub	r27, r27
    12d2:	fd 01       	movw	r30, r26
    12d4:	0d c0       	rjmp	.+26     	; 0x12f0 <__udivmodsi4_ep>

000012d6 <__udivmodsi4_loop>:
    12d6:	aa 1f       	adc	r26, r26
    12d8:	bb 1f       	adc	r27, r27
    12da:	ee 1f       	adc	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	a2 17       	cp	r26, r18
    12e0:	b3 07       	cpc	r27, r19
    12e2:	e4 07       	cpc	r30, r20
    12e4:	f5 07       	cpc	r31, r21
    12e6:	20 f0       	brcs	.+8      	; 0x12f0 <__udivmodsi4_ep>
    12e8:	a2 1b       	sub	r26, r18
    12ea:	b3 0b       	sbc	r27, r19
    12ec:	e4 0b       	sbc	r30, r20
    12ee:	f5 0b       	sbc	r31, r21

000012f0 <__udivmodsi4_ep>:
    12f0:	66 1f       	adc	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	88 1f       	adc	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	1a 94       	dec	r1
    12fa:	69 f7       	brne	.-38     	; 0x12d6 <__udivmodsi4_loop>
    12fc:	60 95       	com	r22
    12fe:	70 95       	com	r23
    1300:	80 95       	com	r24
    1302:	90 95       	com	r25
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	bd 01       	movw	r22, r26
    130a:	cf 01       	movw	r24, r30
    130c:	08 95       	ret

0000130e <_exit>:
    130e:	f8 94       	cli

00001310 <__stop_program>:
    1310:	ff cf       	rjmp	.-2      	; 0x1310 <__stop_program>
